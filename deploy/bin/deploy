#!/bin/bash

set -x

function usage() {
    echo -n \
        "Usage: $(basename "$0") -t TERRAFORM_DIR [--plan,--skip-tf]
Deploys the project infrastructure.
-t TERRAFORM_DIR: The terraform directory. Required.
-e ENVIRONMENT: The environment to deploy. Required.
--plan: Only run Terraform plan.
--skip-tf: Skips Terraform apply. Will still gather terraform output
"
}

###################
# Parse arguments #
###################
echo "The arguments passed to this script are: $@"

while [[ "$#" -gt 0 ]]; do case $1 in
    -t)
        TERRAFORM_DIR=${2}
        shift
        shift
        ;;
    -e)
        ENVIRONMENT=${2}
        shift
        ;;
    --skip-tf)
        SKIP_TF=1
        shift
        ;;
    --plan)
        PLAN_ONLY=1
        shift
        ;;
    --destroy)
        DESTROY=1
        shift
        ;;
    --help)
        usage
        exit 0
        shift
        ;;
    *)
        usage "Unknown parameter passed: $1"
        shift
        shift
        ;;
    esac done

###################################
# Check and configure environment #
###################################

function require_env() {
    v=$(eval echo \$${1})

    if [[ -z ${v} ]]; then
        echo "Must set ${1} as environment variable" >&2
        exit 1
    fi
}

echo $ENVIRONMENT
if [[ -z ${TERRAFORM_DIR} ]]; then
    echo "Must pass in TERRAFORM_DIR with -t"
    exit 1
fi

if [[ -z ${ENVIRONMENT} ]]; then
    echo "Must pass in ENVIRONMENT with -e"
    exit 1
fi

# Print some information

echo "===== Running Deploy for $ENVIRONMENT ====="

# Replace the backend state key in the main.tf to pick the right environment
sed -i "s/ENVIRONMENT_TO_REPLACE/$ENVIRONMENT/g" ${TERRAFORM_DIR}/main.tf


# ---- TODO: Run Chartpress ------

# ---------------------------------------------------

if [ "${BASH_SOURCE[0]}" = "${0}" ]; then

    #####################
    # Deploy Terraform  #
    #####################

    pushd ${TERRAFORM_DIR}

    if [[ "${SKIP_TF}" != 1 ]]; then
        echo "Deploying infrastructure with Terraform..."
        terraform init

        if [ "${PLAN_ONLY}" ]; then
            terraform plan
            exit 0
        fi

        if [ "${DESTROY}" ]; then
            terraform destroy --auto-approve
            exit 0
        fi

        terraform apply -auto-approve
    fi

    # if environment is production, then we get the credentials for the production cluster.
    # else we get the credentials for the staging cluster
    az login -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
    if [[ "${ENVIRONMENT}" == "production" ]]; then
        echo "Getting credentials for production cluster..."
        az aks get-credentials --resource-group ifrcpgo002rg --name ifrcpgo-cluster
    else
        echo "Getting credentials for staging cluster..."
        az aks get-credentials --resource-group ifrctgo002rg --name ifrctgo-cluster
    fi

    

    helm upgrade --install --wait \
        -f ../helm/ifrcgo-helm/values.yaml \
        -f ../helm/ifrcgo-helm/values-${ENVIRONMENT}.yaml \
        ifrcgo-helm \
        ../helm/ifrcgo-helm \
        --set env.DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY} \
        --set env.DJANGO_DB_USER=${DJANGO_DB_USER} \
        --set env.DJANGO_DB_PASS=${DJANGO_DB_PASS} \
        --set env.DJANGO_DB_HOST=${DJANGO_DB_HOST} \
        --set env.DJANGO_DB_PORT=${DJANGO_DB_PORT} \
        --set env.AZURE_STORAGE_ACCOUNT=${AZURE_STORAGE_ACCOUNT} \
        --set env.AZURE_STORAGE_KEY=${AZURE_STORAGE_KEY} \
        --set env.EMAIL_API_ENDPOINT=${EMAIL_API_ENDPOINT} \
        --set env.EMAIL_HOST=${EMAIL_HOST} \
        --set env.EMAIL_PORT=${EMAIL_PORT} \
        --set env.EMAIL_USER=${EMAIL_USER} \
        --set env.EMAIL_PASS=${EMAIL_PASS} \
        --set env.TEST_EMAILS=${TEST_EMAILS} \
        --set env.AWS_TRANSLATE_ACCESS_KEY=${AWS_TRANSLATE_ACCESS_KEY} \
        --set env.AWS_TRANSLATE_SECRET_KEY=${AWS_TRANSLATE_SECRET_KEY} \
        --set env.AWS_TRANSLATE_REGION=${AWS_TRANSLATE_REGION} \
        --set env.MOLNIX_API_BASE=${MOLNIX_API_BASE} \
        --set env.MOLNIX_USERNAME=${MOLNIX_USERNAME} \
        --set env.MOLNIX_PASSWORD=${MOLNIX_PASSWORD} \
        --set env.ERP_API_ENDPOINT=${ERP_API_ENDPOINT} \
        --set env.ERP_API_SUBSCRIPTION_KEY=${ERP_API_SUBSCRIPTION_KEY} \
        --set env.FDRS_APIKEY=${FDRS_APIKEY} \
        --set env.FDRS_CREDENTIAL=${FDRS_CREDENTIAL} \
        --set env.HPC_CREDENTIAL=${HPC_CREDENTIAL} \
        --set env.APPLICATION_INSIGHTS_INSTRUMENTATION_KEY=${APPLICATION_INSIGHTS_INSTRUMENTATION_KEY} \
        --set env.GO_FTPHOST=${GO_FTPHOST} \
        --set env.GO_FTPUSER=${GO_FTPUSER} \
        --set env.GO_FTPPASS=${GO_FTPPASS} \
        --set env.GO_DBPASS=${GO_DBPASS} \
        --set env.APPEALS_USER=${APPEALS_USER} \
        --set env.APPEALS_PASS=${APPEALS_PASS} \
        --set env.IFRC_TRANSLATION_GET_API_KEY=${IFRC_TRANSLATION_GET_API_KEY} \
        --set env.IFRC_TRANSLATION_HEADER_API_KEY=${IFRC_TRANSLATION_HEADER_API_KEY} \
        --set secrets.API_TLS_CRT=${API_TLS_CRT} \
        --set secrets.API_TLS_KEY=${API_TLS_KEY} \
        --set secrets.API_ADDITIONAL_DOMAIN_TLS_CRT=${API_ADDITIONAL_DOMAIN_TLS_CRT} \
        --set secrets.API_ADDITIONAL_DOMAIN_TLS_KEY=${API_ADDITIONAL_DOMAIN_TLS_KEY}
fi
