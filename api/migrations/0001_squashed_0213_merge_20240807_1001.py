# Generated by Django 4.2.15 on 2024-09-13 14:31

import re
import uuid

import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.contrib.postgres.operations
import django.core.validators
import django.db.migrations.operations.special
import django.db.models.deletion
import django.utils.timezone
import tinymce.models
from django.conf import settings
from django.db import migrations, models

import api.management.commands.triggers_to_db
import api.models
import api.utils

# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# api.migrations.0077_auto_20200721_1051 - NOT REQUIRED
# api.migrations.0084_region_label - NOT REQUIRED
# api.migrations.0101_uppercase_iso - NOT REQUIRED
# api.migrations.0188_auto_20231130_0900 - NOT REQUIRED
# api.migrations.0211_alter_countrydirectory_unique_together_and_more - NOT REQUIRED
# api.migrations.0212_alter_countrycapacitystrengthening_unique_together - NOT REQUIRED
# api.migrations.0212_profile_limit_access_to_guest - NOT REQUIRED


class Migration(migrations.Migration):

    replaces = [
        ("api", "0001_initial"),
        ("api", "0002_auto_20180410_1445"),
        ("api", "0003_auto_20180607_1822"),
        ("api", "0004_auto_20180610_1803"),
        ("api", "0005_auto_20180614_2206"),
        ("api", "0006_fieldreport_report_date"),
        ("api", "0007_event_updated_at"),
        ("api", "0008_auto_20180704_1700"),
        ("api", "0009_auto_20180712_1922"),
        ("api", "0010_auto_20181008_0950"),
        ("api", "0011_auto_20181015_0934"),
        ("api", "0012_auto_20181016_0730"),
        ("api", "0013_auto_20181120_1038"),
        ("api", "0014_snippet_position"),
        ("api", "0015_auto_20190409_1540"),
        ("api", "0016_auto_20190424_1224"),
        ("api", "0017_auto_20190424_1508"),
        ("api", "0018_country_logo"),
        ("api", "0019_auto_20190626_1420"),
        ("api", "0020_auto_20190703_0614"),
        ("api", "0021_auto_20190718_1414"),
        ("api", "0022_appeal_real_data_update"),
        ("api", "0023_auto_20190724_0841"),
        ("api", "0024_eventcontact_phone"),
        ("api", "0025_fieldreportcontact_phone"),
        ("api", "0026_auto_20191120_1026"),
        ("api", "0027_auto_20191125_0939"),
        ("api", "0027_auto_20191120_1223"),
        ("api", "0028_merge_20191125_0949"),
        ("api", "0029_auto_20191125_0949"),
        ("api", "0030_fieldreport_other_sources"),
        ("api", "0028_event_is_featured_region"),
        ("api", "0031_merge_20191127_0832"),
        ("api", "0032_auto_20191127_0847"),
        ("api", "0033_auto_20191127_0850"),
        ("api", "0034_auto_20191128_0846"),
        ("api", "0035_fieldreport_ns_request_assistance"),
        ("api", "0036_auto_20191215_0615"),
        ("api", "0036_emergencyoperationsdataset"),
        ("api", "0037_auto_20200109_0902"),
        ("api", "0038_auto_20200110_1333"),
        ("api", "0039_auto_20200110_1546"),
        ("api", "0040_auto_20200121_1609"),
        ("api", "0041_cronjob"),
        ("api", "0042_auto_20200128_1045"),
        ("api", "0043_event_slug"),
        ("api", "0044_auto_20200318_0643"),
        ("api", "0045_auto_20200325_0905"),
        ("api", "0045_auto_20200320_1121"),
        ("api", "0046_merge_20200325_1016"),
        ("api", "0043_authlog"),
        ("api", "0044_reversiondifferencelog"),
        ("api", "0045_auto_20200212_1354"),
        ("api", "0047_merge_20200327_1005"),
        ("api", "0045_auto_20200326_0912"),
        ("api", "0048_merge_20200401_1310"),
        ("api", "0049_auto_20200403_0857"),
        ("api", "0050_auto_20200406_0614"),
        ("api", "0051_fieldreport_sit_fields_date"),
        ("api", "0052_auto_20200406_0623"),
        ("api", "0046_auto_20200406_0953"),
        ("api", "0049_merge_20200406_1026"),
        ("api", "0053_merge_20200406_1343"),
        ("api", "0047_auto_20200331_1153"),
        ("api", "0048_auto_20200401_1249"),
        ("api", "0049_merge_20200403_1508"),
        ("api", "0054_merge_20200407_1212"),
        ("api", "0054_auto_20200407_0939"),
        ("api", "0055_merge_20200407_1236"),
        ("api", "0056_auto_20200413_1010"),
        ("api", "0057_auto_20200414_1021"),
        ("api", "0058_auto_20200415_1606"),
        ("api", "0059_auto_20200430_0852"),
        ("api", "0059_auto_20200430_0801"),
        ("api", "0060_merge_20200501_1230"),
        ("api", "0061_action_is_disabled"),
        ("api", "0062_auto_20200501_1335"),
        ("api", "0063_auto_20200501_1348"),
        ("api", "0064_auto_20200504_0917"),
        ("api", "0065_fieldreport_epi_figures_source"),
        ("api", "0064_auto_20200504_1438"),
        ("api", "0066_merge_20200508_1241"),
        ("api", "0067_auto_20200528_0840"),
        ("api", "0068_notificationguid"),
        ("api", "0069_delete_notificationguid"),
        ("api", "0070_auto_20200618_0904"),
        ("api", "0071_auto_20200623_0704"),
        ("api", "0072_auto_20200623_0734"),
        ("api", "0073_auto_20200624_1538"),
        ("api", "0074_auto_20200701_0939"),
        ("api", "0075_auto_20200707_1231"),
        ("api", "0076_auto_20200721_0950"),
        ("api", "0077_auto_20200721_1051"),
        ("api", "0078_auto_20200721_1108"),
        ("api", "0079_auto_20200728_0920"),
        ("api", "0080_region_bbox"),
        ("api", "0075_profile_last_frontend_login"),
        ("api", "0076_auto_20200728_1500"),
        ("api", "0081_merge_20200730_1237"),
        ("api", "0082_auto_20200806_0635"),
        ("api", "0083_auto_20200814_0503"),
        ("api", "0084_region_label"),
        ("api", "0085_auto_20200903_0843"),
        ("api", "0086_auto_20200916_0942"),
        ("api", "0087_auto_20200918_0922"),
        ("api", "0088_auto_20201119_0809"),
        ("api", "0089_auto_20201119_0818"),
        ("api", "0090_auto_20201120_1045"),
        ("api", "0091_auto_20201120_1118"),
        ("api", "0092_auto_20201123_1025"),
        ("api", "0093_auto_20201123_1026"),
        ("api", "0088_auto_20201105_0943"),
        ("api", "0094_merge_20201123_1340"),
        ("api", "0095_auto_20201124_0813"),
        ("api", "0096_auto_20201124_0855"),
        ("api", "0097_auto_20201124_0856"),
        ("api", "0098_auto_20201125_1156"),
        ("api", "0099_auto_20201127_1048"),
        ("api", "0100_auto_20201130_0954"),
        ("api", "0101_uppercase_iso"),
        ("api", "0102_auto_20201208_1314"),
        ("api", "0088_auto_20201118_1144"),
        ("api", "0101_merge_20201210_0822"),
        ("api", "0103_merge_20201210_0900"),
        ("api", "0104_auto_20201210_0910"),
        ("api", "0105_auto_20201211_0758"),
        ("api", "0106_auto_20210126_0820"),
        ("api", "0107_action_tooltip_text"),
        ("api", "0108_fieldreport_epi_notes_since_last_fr"),
        ("api", "0109_auto_20210201_0949"),
        ("api", "0110_auto_20210202_0950"),
        ("api", "0111_externalpartner_externalpartnercategory_fieldreportexternalpartner_fieldreportexternalpartnercategor"),
        ("api", "0112_auto_20210202_1825"),
        ("api", "0113_auto_20210204_1021"),
        ("api", "0114_auto_20210204_1203"),
        ("api", "0106_auto_20201214_0858"),
        ("api", "0115_merge_20210204_1319"),
        ("api", "0116_auto_20210205_1443"),
        ("api", "0116_auto_20210205_0905"),
        ("api", "0117_merge_20210205_1458"),
        ("api", "0118_country_in_search"),
        ("api", "0119_auto_20210208_1003"),
        ("api", "0120_maincontact"),
        ("api", "0121_geccode"),
        ("api", "0122_auto_20210308_0705"),
        ("api", "0123_auto_20210318_1520"),
        ("api", "0106_auto_20210219_0908"),
        ("api", "0122_merge_20210301_1001"),
        ("api", "0123_auto_20210301_1014"),
        ("api", "0124_merge_20210414_0714"),
        ("api", "0125_erpguid"),
        ("api", "0126_auto_20210418_1357"),
        ("api", "0127_appealfilter"),
        ("api", "0128_appealhistory"),
        ("api", "0129_appealhistory_fill"),
        ("api", "0130_auto_20210615_0920"),
        ("api", "0131_appealhistory_fill_2"),
        ("api", "0132_auto_20210701_0635"),
        ("api", "0133_auto_20210922_1327"),
        ("api", "0134_generaldocument"),
        ("api", "0135_usercountry"),
        ("api", "0136_event_visibility"),
        ("api", "0137_auto_20220105_1533"),
        ("api", "0138_auto_20220104_1027"),
        ("api", "0139_userregion"),
        ("api", "0140_auto_20220126_1112"),
        ("api", "0133_auto_20210729_1609"),
        ("api", "0134_merge_20211020_0622"),
        ("api", "0137_merge_20220104_0845"),
        ("api", "0141_merge_20220202_0546"),
        ("api", "0142_auto_20220202_0551"),
        ("api", "0137_auto_20211227_1441"),
        ("api", "0138_auto_20220105_0543"),
        ("api", "0143_merge_20220214_0557"),
        ("api", "0143_auto_20220218_0817"),
        ("api", "0144_merge_20220218_0941"),
        ("api", "0145_auto_20220218_1338"),
        ("api", "0146_auto_20220228_0952"),
        ("api", "0147_auto_20220304_1057"),
        ("api", "0148_auto_20220314_1059"),
        ("api", "0149_auto_20220318_0413"),
        ("api", "0150_event_emergency_response_contact_email"),
        ("api", "0150_admin2_admin2geoms"),
        ("api", "0151_merge_20220325_1027"),
        ("api", "0152_countryoffieldreporttoreview"),
        ("api", "0153_auto_20220513_0633"),
        ("api", "0153_auto_20220510_0730"),
        ("api", "0154_merge_20220513_0934"),
        ("api", "0155_auto_20220523_0824"),
        ("api", "0155_auto_20220621_0757"),
        ("api", "0156_appealfilter_comment"),
        ("api", "0157_event_image_and_summary_translations"),
        ("api", "0158_alter_admin2geoms_geom"),
        ("api", "0159_auto_20221028_0940"),
        ("api", "0158_fieldreport_recent_affected"),
        ("api", "0159_auto_20221022_1542"),
        ("api", "0160_merge_0159_auto_20221022_1542_0159_auto_20221028_0940"),
        ("api", "0161_alter_event_options"),
        ("api", "0162_admin2_created_at"),
        ("api", "0163_admin2_is_deprecated"),
        ("api", "0164_appealdocumenttype"),
        ("api", "0165_auto_20230424_1725"),
        ("api", "0166_auto_20230424_1742"),
        ("api", "0167_alter_appealdocument_iso3"),
        ("api", "0168_alter_country_iso"),
        ("api", "0169_auto_20230425_1120"),
        ("api", "0163_auto_20230410_0720"),
        ("api", "0170_merge_0163_auto_20230410_0720_0169_auto_20230425_1120"),
        ("api", "0164_merge_20230419_0524"),
        ("api", "0171_merge_20230614_0818"),
        ("api", "0172_alter_fieldreport_status"),
        ("api", "0173_export"),
        ("api", "0174_alter_export_pdf_file"),
        ("api", "0175_export_selector"),
        ("api", "0176_auto_20230906_0446"),
        ("api", "0177_alter_export_selector"),
        ("api", "0178_auto_20230911_0923"),
        ("api", "0179_alter_export_export_type"),
        ("api", "0180_auto_20230913_0433"),
        ("api", "0181_auto_20230914_1026"),
        ("api", "0182_alter_export_export_type"),
        ("api", "0183_auto_20230928_0635"),
        ("api", "0184_auto_20231004_0756"),
        ("api", "0185_alter_fieldreport_status"),
        ("api", "0186_auto_20231103_0904"),
        ("api", "0187_gdacsevent_disaster_type"),
        ("api", "0188_auto_20231130_0900"),
        ("api", "0189_auto_20231212_0434"),
        ("api", "0190_countrydirectory"),
        ("api", "0191_countrykeydocument"),
        ("api", "0192_nsdinitiatives"),
        ("api", "0193_countrycapacitystrengthening"),
        ("api", "0194_countryorganizationalcapacity"),
        ("api", "0187_auto_20231218_0508"),
        ("api", "0195_merge_20231219_0511"),
        ("api", "0196_alter_gdacsevent_severity"),
        ("api", "0197_country_founded_date"),
        ("api", "0198_countrysupportingpartner"),
        ("api", "0199_countrysupportingpartner_supporting_type"),
        ("api", "0200_countryicrcpresence"),
        ("api", "0201_country_disaster_law_url"),
        ("api", "0202_alter_countryorganizationalcapacity_country"),
        ("api", "0203_alter_countryicrcpresence_country"),
        ("api", "0188_auto_20240109_0508"),
        ("api", "0204_merge_20240129_0639"),
        ("api", "0188_alter_export_export_type"),
        ("api", "0189_merge_20240117_0551"),
        ("api", "0190_remove_export_selector"),
        ("api", "0189_auto_20240219_0904"),
        ("api", "0190_auto_20240220_0510"),
        ("api", "0205_merge_20240227_0819"),
        ("api", "0206_alter_export_export_type"),
        ("api", "0207_auto_20240311_1044"),
        ("api", "0208_auto_20240404_0518"),
        ("api", "0209_auto_20240423_0604"),
        ("api", "0210_profile_accepted_montandon_license_terms"),
        ("api", "0211_alter_countrydirectory_unique_together_and_more"),
        ("api", "0212_profile_limit_access_to_guest"),
        ("api", "0212_alter_countrycapacitystrengthening_unique_together"),
        ("api", "0213_merge_20240807_1001"),
    ]

    initial = True

    dependencies = [
        ("auth", "0008_alter_user_username_max_length"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Action",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100, verbose_name="name")),
                (
                    "organizations",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[("NTLS", "National Society"), ("PNS", "Foreign Society"), ("FDRN", "Federation")],
                            max_length=4,
                        ),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name="organizations",
                    ),
                ),
                (
                    "field_report_types",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[("EVT", "Event"), ("EW", "Early Warning"), ("EPI", "Epidemic"), ("COVID", "COVID-19")],
                            max_length=16,
                        ),
                        default=list,
                        size=None,
                        verbose_name="field report types",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("General", "General"),
                            ("Health", "Health"),
                            ("NS Institutional Strengthening", "NS Institutional Strengthening"),
                            ("Socioeconomic Interventions", "Socioeconomic Interventions"),
                        ],
                        default="General",
                        max_length=255,
                        verbose_name="category",
                    ),
                ),
                ("is_disabled", models.BooleanField(default=False, help_text="Disable in form", verbose_name="is disabled?")),
            ],
            options={
                "verbose_name": "action",
                "verbose_name_plural": "actions",
            },
        ),
        migrations.CreateModel(
            name="DisasterType",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100, verbose_name="name")),
                ("summary", models.TextField(verbose_name="summary")),
            ],
            options={
                "ordering": ("name",),
                "verbose_name": "disaster type",
                "verbose_name_plural": "disaster types",
            },
        ),
        migrations.CreateModel(
            name="Region",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "name",
                    models.IntegerField(
                        choices=[
                            (0, "Africa"),
                            (1, "Americas"),
                            (2, "Asia Pacific"),
                            (3, "Europe"),
                            (4, "Middle East & North Africa"),
                        ],
                        default=0,
                        verbose_name="name",
                    ),
                ),
            ],
            options={
                "ordering": ("name",),
                "verbose_name": "region",
                "verbose_name_plural": "regions",
            },
        ),
        migrations.CreateModel(
            name="SourceType",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=40, verbose_name="name")),
            ],
            options={
                "verbose_name": "source type",
                "verbose_name_plural": "source types",
            },
        ),
        migrations.CreateModel(
            name="Country",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100, verbose_name="name")),
                ("iso", models.CharField(max_length=2, null=True, verbose_name="ISO")),
                ("society_name", models.TextField(blank=True, verbose_name="society name")),
                ("society_url", models.URLField(blank=True, verbose_name="URL - Society")),
                (
                    "region",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.region",
                        verbose_name="region",
                    ),
                ),
                (
                    "inform_score",
                    models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True, verbose_name="inform score"),
                ),
                ("key_priorities", models.TextField(blank=True, null=True, verbose_name="key priorities")),
                ("overview", models.TextField(blank=True, null=True, verbose_name="overview")),
                (
                    "logo",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=api.models.logo_document_path,
                        validators=[django.core.validators.FileExtensionValidator(allowed_extensions=["png", "jpg", "gif"])],
                        verbose_name="logo",
                    ),
                ),
                (
                    "record_type",
                    models.IntegerField(
                        choices=[
                            (1, "Country"),
                            (2, "Cluster"),
                            (3, "Region"),
                            (4, "Country Office"),
                            (5, "Representative Office"),
                        ],
                        default=1,
                        help_text="Type of entity",
                        verbose_name="type",
                    ),
                ),
                ("iso3", models.CharField(max_length=3, null=True, verbose_name="ISO3")),
                (
                    "wb_population",
                    models.PositiveIntegerField(
                        blank=True, help_text="population data from WB API", null=True, verbose_name="WB population"
                    ),
                ),
                (
                    "wb_year",
                    models.CharField(
                        blank=True, help_text="population data year from WB API", max_length=4, null=True, verbose_name="WB Year"
                    ),
                ),
                ("url_ifrc", models.URLField(blank=True, verbose_name="URL - IFRC")),
            ],
            options={
                "verbose_name_plural": "countries",
                "ordering": ("name",),
                "verbose_name": "country",
            },
        ),
        migrations.CreateModel(
            name="AdminContact",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("ctype", models.CharField(blank=True, max_length=100, verbose_name="type")),
                ("name", models.CharField(max_length=100, verbose_name="name")),
                ("title", models.CharField(max_length=300, verbose_name="title")),
                ("email", models.CharField(max_length=300, verbose_name="email")),
            ],
            options={
                "verbose_name": "admin contact",
                "verbose_name_plural": "admin contacts",
            },
        ),
        migrations.CreateModel(
            name="AdminKeyFigure",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("figure", models.CharField(max_length=100, verbose_name="figure")),
                ("deck", models.CharField(max_length=50, verbose_name="deck")),
                ("source", models.CharField(max_length=256, verbose_name="source")),
                (
                    "visibility",
                    models.IntegerField(
                        choices=[(1, "RCRC Movement"), (2, "IFRC Secretariat"), (3, "Public"), (4, "IFRC and NS")],
                        default=3,
                        verbose_name="visibility",
                    ),
                ),
            ],
            options={
                "ordering": ("source",),
                "verbose_name": "admin key figure",
                "verbose_name_plural": "admin key figures",
            },
        ),
        migrations.CreateModel(
            name="AdminLink",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=100, verbose_name="title")),
                ("url", models.URLField(max_length=300, verbose_name="url")),
            ],
            options={
                "verbose_name": "admin link",
                "verbose_name_plural": "admin links",
            },
        ),
        migrations.CreateModel(
            name="RegionContact",
            fields=[
                (
                    "admincontact_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.admincontact",
                    ),
                ),
                (
                    "region",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contacts",
                        to="api.region",
                        verbose_name="region",
                    ),
                ),
            ],
            options={
                "verbose_name": "region contact",
                "verbose_name_plural": "region contacts",
            },
            bases=("api.admincontact",),
        ),
        migrations.CreateModel(
            name="RegionKeyFigure",
            fields=[
                (
                    "adminkeyfigure_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.adminkeyfigure",
                    ),
                ),
                (
                    "region",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="key_figures",
                        to="api.region",
                        verbose_name="region",
                    ),
                ),
            ],
            options={
                "verbose_name": "region key figure",
                "verbose_name_plural": "region key figures",
            },
            bases=("api.adminkeyfigure",),
        ),
        migrations.CreateModel(
            name="RegionLink",
            fields=[
                (
                    "adminlink_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.adminlink",
                    ),
                ),
                (
                    "region",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="links", to="api.region", verbose_name="region"
                    ),
                ),
            ],
            options={
                "verbose_name": "region link",
                "verbose_name_plural": "region links",
            },
            bases=("api.adminlink",),
        ),
        migrations.CreateModel(
            name="District",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100, verbose_name="name")),
                ("code", models.CharField(max_length=10, verbose_name="code")),
                ("country_iso", models.CharField(max_length=3, null=True, verbose_name="country ISO3")),
                ("country_name", models.CharField(max_length=100, verbose_name="country name")),
                (
                    "country",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to="api.country", verbose_name="country"
                    ),
                ),
                (
                    "is_enclave",
                    models.BooleanField(
                        default=False, help_text="Is it an enclave away from parent country?", verbose_name="is enclave?"
                    ),
                ),
                (
                    "wb_population",
                    models.PositiveIntegerField(
                        blank=True, help_text="population data from WB API", null=True, verbose_name="WB population"
                    ),
                ),
                (
                    "wb_year",
                    models.CharField(
                        blank=True, help_text="population data year from WB API", max_length=4, null=True, verbose_name="WB year"
                    ),
                ),
            ],
            options={
                "ordering": ("code",),
                "verbose_name": "district",
                "verbose_name_plural": "districts",
            },
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100, verbose_name="name")),
                ("summary", tinymce.models.HTMLField(blank=True, default="", verbose_name="summary")),
                ("num_affected", models.IntegerField(blank=True, null=True, verbose_name="number of affected")),
                (
                    "ifrc_severity_level",
                    models.IntegerField(
                        choices=[(0, "Yellow"), (1, "Orange"), (2, "Red")], default=0, verbose_name="IFRC Severity level"
                    ),
                ),
                ("glide", models.CharField(blank=True, max_length=18, verbose_name="glide")),
                ("disaster_start_date", models.DateTimeField(verbose_name="disaster start date")),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="created at")),
                ("auto_generated", models.BooleanField(default=False, editable=False, verbose_name="auto generated")),
                ("countries", models.ManyToManyField(to="api.country", verbose_name="countries")),
                (
                    "dtype",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.disastertype",
                        verbose_name="disaster type",
                    ),
                ),
                ("regions", models.ManyToManyField(to="api.region", verbose_name="regions")),
                (
                    "auto_generated_source",
                    models.CharField(blank=True, editable=False, max_length=50, null=True, verbose_name="auto generated source"),
                ),
                ("is_featured", models.BooleanField(default=False, verbose_name="is featured on home page")),
                ("districts", models.ManyToManyField(blank=True, to="api.district", verbose_name="districts")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="updated at")),
                ("hide_attached_field_reports", models.BooleanField(default=False, verbose_name="hide attached field reports?")),
                ("num_dead", models.IntegerField(blank=True, null=True, verbose_name="number of dead")),
                ("num_displaced", models.IntegerField(blank=True, null=True, verbose_name="name")),
                ("num_injured", models.IntegerField(blank=True, null=True, verbose_name="number of injured")),
                ("num_missing", models.IntegerField(blank=True, null=True, verbose_name="number of missing")),
                ("previous_update", models.DateTimeField(blank=True, null=True, verbose_name="previous update")),
                ("is_featured_region", models.BooleanField(default=False, verbose_name="is featured on region page")),
                (
                    "slug",
                    models.CharField(
                        blank=True,
                        default=None,
                        editable=False,
                        help_text="Optional string for a clean URL. For example, go.ifrc.org/emergencies/hurricane-katrina-2019. The string cannot start with a number and is forced to be lowercase. Recommend using hyphens over underscores. Special characters like # is not allowed.",
                        max_length=50,
                        null=True,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[-a-zA-Z0-9_]+\\Z"),
                                "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.",
                                "invalid",
                            ),
                            api.utils.validate_slug_number,
                        ],
                        verbose_name="slug",
                    ),
                ),
                (
                    "tab_one_title",
                    models.CharField(blank=True, default="Additional Information", max_length=50, verbose_name="tab one title"),
                ),
                ("tab_three_title", models.CharField(blank=True, max_length=50, null=True, verbose_name="tab three title")),
                ("tab_two_title", models.CharField(blank=True, max_length=50, null=True, verbose_name="tab two title")),
                (
                    "parent_event",
                    models.ForeignKey(
                        blank=True,
                        help_text="If needed, you have to change the connected Appeals', Field Reports', etc to point to the parent Emergency manually.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.event",
                        verbose_name="Parent Emergency",
                    ),
                ),
            ],
            options={
                "verbose_name": "emergency",
                "verbose_name_plural": "emergencies",
                "ordering": ("-disaster_start_date",),
            },
        ),
        migrations.CreateModel(
            name="SituationReportType",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("type", models.CharField(max_length=50, verbose_name="type")),
                (
                    "is_primary",
                    models.BooleanField(
                        default=False,
                        editable=False,
                        help_text="Ensure this type gets precedence over others that are empty",
                        verbose_name="is primary?",
                    ),
                ),
            ],
            options={
                "verbose_name": "situation report type",
                "verbose_name_plural": "situation report types",
            },
        ),
        migrations.CreateModel(
            name="FieldReport",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("rid", models.CharField(blank=True, editable=False, max_length=100, null=True, verbose_name="r id")),
                ("summary", models.TextField(blank=True, verbose_name="summary")),
                ("description", tinymce.models.HTMLField(blank=True, default="", verbose_name="description")),
                ("status", models.IntegerField(default=0, verbose_name="status")),
                ("request_assistance", models.BooleanField(default=False, verbose_name="request assistance")),
                ("num_injured", models.IntegerField(blank=True, null=True, verbose_name="number of injured")),
                ("num_dead", models.IntegerField(blank=True, null=True, verbose_name="number of dead")),
                ("num_missing", models.IntegerField(blank=True, null=True, verbose_name="number of missing")),
                ("num_affected", models.IntegerField(blank=True, null=True, verbose_name="number of affected")),
                ("num_displaced", models.IntegerField(blank=True, null=True, verbose_name="number of displaced")),
                ("num_assisted", models.IntegerField(blank=True, null=True, verbose_name="number of assisted")),
                ("num_localstaff", models.IntegerField(blank=True, null=True, verbose_name="number of localstaff")),
                ("num_volunteers", models.IntegerField(blank=True, null=True, verbose_name="number of volunteers")),
                (
                    "num_expats_delegates",
                    models.IntegerField(blank=True, null=True, verbose_name="number of expatriate delegates"),
                ),
                ("gov_num_injured", models.IntegerField(blank=True, null=True, verbose_name="number of injured (goverment)")),
                ("gov_num_dead", models.IntegerField(blank=True, null=True, verbose_name="number of dead (goverment)")),
                ("gov_num_missing", models.IntegerField(blank=True, null=True, verbose_name="number of missing (goverment)")),
                ("gov_num_affected", models.IntegerField(blank=True, null=True, verbose_name="number of affected (goverment)")),
                ("gov_num_displaced", models.IntegerField(blank=True, null=True, verbose_name="number of displaced (goverment)")),
                ("gov_num_assisted", models.IntegerField(blank=True, null=True, verbose_name="number of assisted (goverment)")),
                ("actions_others", models.TextField(blank=True, null=True, verbose_name="actions taken (others)")),
                (
                    "visibility",
                    models.IntegerField(
                        choices=[(1, "RCRC Movement"), (2, "IFRC Secretariat"), (3, "Public"), (4, "IFRC and NS")],
                        default=1,
                        verbose_name="visibility",
                    ),
                ),
                (
                    "bulletin",
                    models.IntegerField(
                        choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")],
                        default=0,
                        verbose_name="bulletin",
                    ),
                ),
                (
                    "dref",
                    models.IntegerField(
                        choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")], default=0, verbose_name="DREF"
                    ),
                ),
                ("dref_amount", models.IntegerField(blank=True, null=True, verbose_name="DREF amount")),
                (
                    "appeal",
                    models.IntegerField(
                        choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")], default=0, verbose_name="appeal"
                    ),
                ),
                ("appeal_amount", models.IntegerField(blank=True, null=True, verbose_name="appeal amount")),
                (
                    "rdrt",
                    models.IntegerField(
                        choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")], default=0, verbose_name="RDRT"
                    ),
                ),
                ("num_rdrt", models.IntegerField(blank=True, null=True, verbose_name="number of RDRT")),
                (
                    "fact",
                    models.IntegerField(
                        choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")], default=0, verbose_name="fact"
                    ),
                ),
                ("num_fact", models.IntegerField(blank=True, null=True, verbose_name="number of fact")),
                (
                    "ifrc_staff",
                    models.IntegerField(
                        choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")],
                        default=0,
                        verbose_name="IFRC staff",
                    ),
                ),
                ("num_ifrc_staff", models.IntegerField(blank=True, null=True, verbose_name="number of IFRC staff")),
                (
                    "eru_base_camp",
                    models.IntegerField(
                        choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")],
                        default=0,
                        verbose_name="ERU base camp",
                    ),
                ),
                ("eru_base_camp_units", models.IntegerField(blank=True, null=True, verbose_name="ERU base camp units")),
                (
                    "eru_basic_health_care",
                    models.IntegerField(
                        choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")],
                        default=0,
                        verbose_name="ERU basic health care",
                    ),
                ),
                (
                    "eru_basic_health_care_units",
                    models.IntegerField(blank=True, null=True, verbose_name="ERU basic health units"),
                ),
                (
                    "eru_it_telecom",
                    models.IntegerField(
                        choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")],
                        default=0,
                        verbose_name="ERU IT telecom",
                    ),
                ),
                ("eru_it_telecom_units", models.IntegerField(blank=True, null=True, verbose_name="ERU IT telecom units")),
                (
                    "eru_logistics",
                    models.IntegerField(
                        choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")],
                        default=0,
                        verbose_name="ERU logistics",
                    ),
                ),
                ("eru_logistics_units", models.IntegerField(blank=True, null=True, verbose_name="ERU logistics units")),
                (
                    "eru_deployment_hospital",
                    models.IntegerField(
                        choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")],
                        default=0,
                        verbose_name="ERU deployment hospital",
                    ),
                ),
                (
                    "eru_deployment_hospital_units",
                    models.IntegerField(blank=True, null=True, verbose_name="ERU deployment hospital units"),
                ),
                (
                    "eru_referral_hospital",
                    models.IntegerField(
                        choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")],
                        default=0,
                        verbose_name="ERU referral hospital",
                    ),
                ),
                (
                    "eru_referral_hospital_units",
                    models.IntegerField(blank=True, null=True, verbose_name="ERU referral hospital units"),
                ),
                (
                    "eru_relief",
                    models.IntegerField(
                        choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")],
                        default=0,
                        verbose_name="ERU relief",
                    ),
                ),
                ("eru_relief_units", models.IntegerField(blank=True, null=True, verbose_name="ERU relief units")),
                (
                    "eru_water_sanitation_15",
                    models.IntegerField(
                        choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")],
                        default=0,
                        verbose_name="ERU water sanitaion M15",
                    ),
                ),
                (
                    "eru_water_sanitation_15_units",
                    models.IntegerField(blank=True, null=True, verbose_name="ERU water sanitaion M15 units"),
                ),
                (
                    "eru_water_sanitation_40",
                    models.IntegerField(
                        choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")],
                        default=0,
                        verbose_name="ERU water sanitaion M40",
                    ),
                ),
                (
                    "eru_water_sanitation_40_units",
                    models.IntegerField(blank=True, null=True, verbose_name="ERU water sanitaion M40 units"),
                ),
                (
                    "eru_water_sanitation_20",
                    models.IntegerField(
                        choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")],
                        default=0,
                        verbose_name="ERU water sanitaion MSM20",
                    ),
                ),
                (
                    "eru_water_sanitation_20_units",
                    models.IntegerField(blank=True, null=True, verbose_name="ERU water sanitaion MSM20 units"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="created at")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="updated at")),
                ("countries", models.ManyToManyField(to="api.country", verbose_name="countries")),
                (
                    "dtype",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="api.disastertype", verbose_name="disaster type"
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="field_reports",
                        to="api.event",
                        verbose_name="event",
                    ),
                ),
                ("regions", models.ManyToManyField(blank=True, to="api.region", verbose_name="regions")),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="user",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
                ("districts", models.ManyToManyField(blank=True, to="api.district", verbose_name="districts")),
                ("report_date", models.DateTimeField(editable=False, null=True, verbose_name="report date")),
                ("previous_update", models.DateTimeField(blank=True, null=True, verbose_name="previous updated at")),
                ("other_num_affected", models.IntegerField(blank=True, null=True, verbose_name="number of affected (other)")),
                ("other_num_assisted", models.IntegerField(blank=True, null=True, verbose_name="number of assisted (other)")),
                ("other_num_dead", models.IntegerField(blank=True, null=True, verbose_name="number of dead (other)")),
                ("other_num_displaced", models.IntegerField(blank=True, null=True, verbose_name="number of displace (other)")),
                ("other_num_injured", models.IntegerField(blank=True, null=True, verbose_name="number of injured (other)")),
                ("other_num_missing", models.IntegerField(blank=True, null=True, verbose_name="number of missing (other)")),
                ("start_date", models.DateTimeField(blank=True, null=True, verbose_name="start date")),
                (
                    "affected_pop_centres",
                    models.CharField(blank=True, max_length=512, null=True, verbose_name="affected population centres"),
                ),
                (
                    "gov_affected_pop_centres",
                    models.CharField(
                        blank=True, max_length=512, null=True, verbose_name="affected population centres (goverment)"
                    ),
                ),
                (
                    "gov_num_highest_risk",
                    models.IntegerField(blank=True, null=True, verbose_name="people at highest risk (goverment)"),
                ),
                ("num_highest_risk", models.IntegerField(blank=True, null=True, verbose_name="number of highest risk")),
                (
                    "num_potentially_affected",
                    models.IntegerField(blank=True, null=True, verbose_name="number of potentially affected"),
                ),
                (
                    "other_affected_pop_centres",
                    models.CharField(
                        blank=True, max_length=512, null=True, verbose_name="number of affected population centres (other)"
                    ),
                ),
                (
                    "other_num_highest_risk",
                    models.IntegerField(blank=True, null=True, verbose_name="number of highest risk (other)"),
                ),
                (
                    "forecast_based_action",
                    models.IntegerField(
                        choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")],
                        default=0,
                        verbose_name="forecast based action",
                    ),
                ),
                (
                    "forecast_based_action_amount",
                    models.IntegerField(blank=True, null=True, verbose_name="forecast based action amount"),
                ),
                (
                    "imminent_dref",
                    models.IntegerField(
                        choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")],
                        default=0,
                        verbose_name="imminent dref",
                    ),
                ),
                ("imminent_dref_amount", models.IntegerField(blank=True, null=True, verbose_name="imminent dref amount")),
                ("other_sources", models.TextField(blank=True, default="", verbose_name="sources (other)")),
                (
                    "gov_num_potentially_affected",
                    models.IntegerField(blank=True, null=True, verbose_name="potentially affected (goverment)"),
                ),
                (
                    "other_num_potentially_affected",
                    models.IntegerField(blank=True, null=True, verbose_name="number of potentially affected (other)"),
                ),
                ("ns_request_assistance", models.BooleanField(default=False, verbose_name="NS request assistance")),
                ("cases", models.IntegerField(blank=True, null=True, verbose_name="number of cases")),
                ("confirmed_cases", models.IntegerField(blank=True, null=True, verbose_name="number of confirmed cases")),
                ("health_min_num_assisted", models.IntegerField(blank=True, null=True, verbose_name="number of assisted (who)")),
                ("probable_cases", models.IntegerField(blank=True, null=True, verbose_name="number of probable cases")),
                ("suspected_cases", models.IntegerField(blank=True, null=True, verbose_name="number of suspected cases")),
                ("who_num_assisted", models.IntegerField(blank=True, null=True, verbose_name="number of assisted (who)")),
                ("health_min_cases", models.IntegerField(blank=True, null=True, verbose_name="number of cases (MOH)")),
                (
                    "health_min_confirmed_cases",
                    models.IntegerField(blank=True, null=True, verbose_name="number of confirmed cases (MOH)"),
                ),
                ("health_min_num_dead", models.IntegerField(blank=True, null=True, verbose_name="number of dead (MOH)")),
                (
                    "health_min_probable_cases",
                    models.IntegerField(blank=True, null=True, verbose_name="number of probabale cases (MOH)"),
                ),
                (
                    "health_min_suspected_cases",
                    models.IntegerField(blank=True, null=True, verbose_name="number of suspected cases (MOH)"),
                ),
                ("other_cases", models.IntegerField(blank=True, null=True, verbose_name="number of cases (other)")),
                (
                    "other_confirmed_cases",
                    models.IntegerField(blank=True, null=True, verbose_name="number of confirmed cases (other)"),
                ),
                (
                    "other_probable_cases",
                    models.IntegerField(blank=True, null=True, verbose_name="number of probable cases (other)"),
                ),
                (
                    "other_suspected_cases",
                    models.IntegerField(blank=True, null=True, verbose_name="number of suspected cases (other)"),
                ),
                ("who_cases", models.IntegerField(blank=True, null=True, verbose_name="number of cases (WHO)")),
                (
                    "who_confirmed_cases",
                    models.IntegerField(blank=True, null=True, verbose_name="number of confirmed cases (WHO)"),
                ),
                ("who_num_dead", models.IntegerField(blank=True, null=True, verbose_name="number of number of dead (WHO)")),
                ("who_probable_cases", models.IntegerField(blank=True, null=True, verbose_name="number of probable cases (WHO)")),
                (
                    "who_suspected_cases",
                    models.IntegerField(blank=True, null=True, verbose_name="number of suspected cases (WHO)"),
                ),
                ("sit_fields_date", models.DateTimeField(blank=True, null=True, verbose_name="situation fields date")),
                (
                    "is_covid_report",
                    models.BooleanField(
                        default=False,
                        help_text="Is this a Field Report specific to the COVID-19 emergency?",
                        verbose_name="is covid report?",
                    ),
                ),
                ("epi_cases", models.IntegerField(blank=True, null=True, verbose_name="number of cases (epidemic)")),
                (
                    "epi_confirmed_cases",
                    models.IntegerField(blank=True, null=True, verbose_name="number of confirmed cases (epidemic)"),
                ),
                ("epi_num_dead", models.IntegerField(blank=True, null=True, verbose_name="number of dead (epidemic)")),
                (
                    "epi_probable_cases",
                    models.IntegerField(blank=True, null=True, verbose_name="number of probable cases (epidemic)"),
                ),
                (
                    "epi_suspected_cases",
                    models.IntegerField(blank=True, null=True, verbose_name="number of suspected cases (epidemic)"),
                ),
                (
                    "epi_figures_source",
                    models.IntegerField(
                        blank=True,
                        choices=[(0, "Ministry of health"), (1, "WHO"), (2, "OTHER")],
                        default=0,
                        null=True,
                        verbose_name="figures source (epidemic)",
                    ),
                ),
            ],
            options={
                "ordering": ("-created_at", "-updated_at"),
                "verbose_name": "field report",
                "verbose_name_plural": "field reports",
            },
        ),
        migrations.CreateModel(
            name="EmergencyOperationsDataset",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_validated",
                    models.BooleanField(
                        default=False, help_text="Did anyone check the editable data?", verbose_name="is validated?"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="created_at")),
                ("modified_at", models.DateTimeField(auto_now=True, verbose_name="modified_at")),
                ("raw_file_name", models.TextField(blank=True, null=True)),
                ("raw_file_url", models.TextField(blank=True, null=True)),
                ("raw_appeal_launch_date", models.TextField(blank=True, null=True, verbose_name="appeal launch date (raw)")),
                ("raw_appeal_number", models.TextField(blank=True, null=True, verbose_name="appeal number (raw)")),
                ("raw_category_allocated", models.TextField(blank=True, null=True, verbose_name="category allocated (raw)")),
                ("raw_date_of_issue", models.TextField(blank=True, null=True, verbose_name="date of issue (raw)")),
                ("raw_dref_allocated", models.TextField(blank=True, null=True)),
                ("raw_expected_end_date", models.TextField(blank=True, null=True, verbose_name="expected end date (raw)")),
                ("raw_expected_time_frame", models.TextField(blank=True, null=True, verbose_name="expected time frame (raw)")),
                ("raw_glide_number", models.TextField(blank=True, null=True, verbose_name="glide number (raw)")),
                (
                    "raw_num_of_people_affected",
                    models.TextField(blank=True, null=True, verbose_name="number of people affected (raw)"),
                ),
                (
                    "raw_num_of_people_to_be_assisted",
                    models.TextField(blank=True, null=True, verbose_name="number of people to be assisted (raw)"),
                ),
                (
                    "raw_disaster_risk_reduction_female",
                    models.TextField(blank=True, null=True, verbose_name="number of disaster risk reduction female (raw)"),
                ),
                (
                    "raw_disaster_risk_reduction_male",
                    models.TextField(blank=True, null=True, verbose_name="number of disaster risk reduction male (raw)"),
                ),
                (
                    "raw_disaster_risk_reduction_people_reached",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of disaster risk reduction people reached (raw)"
                    ),
                ),
                (
                    "raw_disaster_risk_reduction_people_targeted",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of disaster risk reduction people targeted (raw)"
                    ),
                ),
                (
                    "raw_disaster_risk_reduction_requirements",
                    models.TextField(blank=True, null=True, verbose_name="number of disaster risk reduction requirements (raw)"),
                ),
                ("raw_health_female", models.TextField(blank=True, null=True, verbose_name="health female (raw)")),
                ("raw_health_male", models.TextField(blank=True, null=True, verbose_name="health male (raw)")),
                (
                    "raw_health_people_reached",
                    models.TextField(blank=True, null=True, verbose_name="health people reached (raw)"),
                ),
                (
                    "raw_health_people_targeted",
                    models.TextField(blank=True, null=True, verbose_name="health people targeted (raw)"),
                ),
                ("raw_health_requirements", models.TextField(blank=True, null=True, verbose_name="health requirements (raw)")),
                (
                    "raw_livelihoods_and_basic_needs_female",
                    models.TextField(blank=True, null=True, verbose_name="number of livelihhods and basic needs female (raw)"),
                ),
                (
                    "raw_livelihoods_and_basic_needs_male",
                    models.TextField(blank=True, null=True, verbose_name="number of livelihhods and basic needs male (raw)"),
                ),
                (
                    "raw_livelihoods_and_basic_needs_people_reached",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of livelihhods and basic needs people reached (raw)"
                    ),
                ),
                (
                    "raw_livelihoods_and_basic_needs_people_targeted",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of livelihhods and basic needs people targeted (raw)"
                    ),
                ),
                (
                    "raw_livelihoods_and_basic_needs_requirements",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of livelihhods and basic needs requirements (raw)"
                    ),
                ),
                (
                    "raw_migration_female",
                    models.TextField(blank=True, null=True, verbose_name="number of migration female (raw)"),
                ),
                ("raw_migration_male", models.TextField(blank=True, null=True, verbose_name="number of migration male (raw)")),
                (
                    "raw_migration_people_reached",
                    models.TextField(blank=True, null=True, verbose_name="number of migration people reached (raw)"),
                ),
                (
                    "raw_migration_people_targeted",
                    models.TextField(blank=True, null=True, verbose_name="number of migration people targeted (raw)"),
                ),
                (
                    "raw_migration_requirements",
                    models.TextField(blank=True, null=True, verbose_name="number of migration requirements (raw)"),
                ),
                (
                    "raw_protection_gender_and_inclusion_female",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of protection gender and inclusion female (raw)"
                    ),
                ),
                (
                    "raw_protection_gender_and_inclusion_male",
                    models.TextField(blank=True, null=True, verbose_name="number of protection gender and inclusion male (raw)"),
                ),
                (
                    "raw_protection_gender_and_inclusion_people_reached",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of protection gender and inclusion people reached (raw)"
                    ),
                ),
                (
                    "raw_protection_gender_and_inclusion_people_targeted",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of protection gender and inclusion people targeted (raw)"
                    ),
                ),
                (
                    "raw_protection_gender_and_inclusion_requirements",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of protection gender and inclusion requirements (raw)"
                    ),
                ),
                ("raw_shelter_female", models.TextField(blank=True, null=True, verbose_name="number of shelter female (raw)")),
                ("raw_shelter_male", models.TextField(blank=True, null=True, verbose_name="number of shelter male (raw)")),
                (
                    "raw_shelter_people_reached",
                    models.TextField(blank=True, null=True, verbose_name="number of shelter people reached (raw)"),
                ),
                (
                    "raw_shelter_people_targeted",
                    models.TextField(blank=True, null=True, verbose_name="number of shelter people targeted (raw)"),
                ),
                (
                    "raw_shelter_requirements",
                    models.TextField(blank=True, null=True, verbose_name="number of shelter requirements (raw)"),
                ),
                (
                    "raw_water_sanitation_and_hygiene_female",
                    models.TextField(blank=True, null=True, verbose_name="number of water sanitation and hygiene female (raw)"),
                ),
                (
                    "raw_water_sanitation_and_hygiene_male",
                    models.TextField(blank=True, null=True, verbose_name="number of water sanitation and hygiene male (raw)"),
                ),
                (
                    "raw_water_sanitation_and_hygiene_people_reached",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of water sanitation and hygiene people reached (raw)"
                    ),
                ),
                (
                    "raw_water_sanitation_and_hygiene_people_targeted",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of water sanitation and hygiene people targeted (raw)"
                    ),
                ),
                (
                    "raw_water_sanitation_and_hygiene_requirements",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of water sanitation and hygiene requirements (raw)"
                    ),
                ),
                ("raw_education_female", models.TextField(blank=True, null=True, verbose_name="number of eduction female (raw)")),
                ("raw_education_male", models.TextField(blank=True, null=True, verbose_name="number of eduction male (raw)")),
                (
                    "raw_education_people_reached",
                    models.TextField(blank=True, null=True, verbose_name="number of eduction people reached (raw)"),
                ),
                (
                    "raw_education_people_targeted",
                    models.TextField(blank=True, null=True, verbose_name="number of eduction people targeted (raw)"),
                ),
                (
                    "raw_education_requirements",
                    models.TextField(blank=True, null=True, verbose_name="number of eduction requirements (raw)"),
                ),
                ("file_name", models.CharField(blank=True, max_length=200, null=True)),
                ("appeal_launch_date", models.DateField(blank=True, null=True, verbose_name="appeal launch date")),
                ("appeal_number", models.CharField(blank=True, max_length=20, null=True, verbose_name="appeal number")),
                (
                    "category_allocated",
                    models.CharField(blank=True, max_length=100, null=True, verbose_name="category allocated"),
                ),
                ("date_of_issue", models.DateField(blank=True, null=True, verbose_name="date of issue")),
                ("dref_allocated", models.IntegerField(blank=True, null=True, verbose_name="DREF allocated")),
                ("expected_end_date", models.DateField(blank=True, null=True, verbose_name="expected end date")),
                ("expected_time_frame", models.IntegerField(blank=True, null=True, verbose_name="expected time frame")),
                ("glide_number", models.CharField(blank=True, max_length=18, null=True, verbose_name="glide number")),
                ("num_of_people_affected", models.IntegerField(blank=True, null=True, verbose_name="number of people affected")),
                (
                    "num_of_people_to_be_assisted",
                    models.IntegerField(blank=True, null=True, verbose_name="number of people to be assisted"),
                ),
                (
                    "disaster_risk_reduction_female",
                    models.IntegerField(blank=True, null=True, verbose_name="number of disaster risk reduction female"),
                ),
                (
                    "disaster_risk_reduction_male",
                    models.IntegerField(blank=True, null=True, verbose_name="number of disaster risk reduction male"),
                ),
                (
                    "disaster_risk_reduction_people_reached",
                    models.IntegerField(blank=True, null=True, verbose_name="number of disaster risk reduction people reached"),
                ),
                (
                    "disaster_risk_reduction_people_targeted",
                    models.IntegerField(blank=True, null=True, verbose_name="number of disaster risk reduction people targeted"),
                ),
                (
                    "disaster_risk_reduction_requirements",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="number of disaster risk reduction people requirements"
                    ),
                ),
                ("health_female", models.IntegerField(blank=True, null=True, verbose_name="number of health female")),
                ("health_male", models.IntegerField(blank=True, null=True, verbose_name="number of health male")),
                (
                    "health_people_reached",
                    models.IntegerField(blank=True, null=True, verbose_name="number of health people reached"),
                ),
                (
                    "health_people_targeted",
                    models.IntegerField(blank=True, null=True, verbose_name="number of health people targeted"),
                ),
                ("health_requirements", models.IntegerField(blank=True, null=True, verbose_name="number of health requirements")),
                (
                    "livelihoods_and_basic_needs_female",
                    models.IntegerField(blank=True, null=True, verbose_name="number of livelihhods and basic needs female"),
                ),
                (
                    "livelihoods_and_basic_needs_male",
                    models.IntegerField(blank=True, null=True, verbose_name="number of livelihhods and basic needs male"),
                ),
                (
                    "livelihoods_and_basic_needs_people_reached",
                    models.IntegerField(blank=True, null=True, verbose_name="number of livelihhods and basic people reached"),
                ),
                (
                    "livelihoods_and_basic_needs_people_targeted",
                    models.IntegerField(blank=True, null=True, verbose_name="number of livelihhods and basic people targeted"),
                ),
                (
                    "livelihoods_and_basic_needs_requirements",
                    models.IntegerField(blank=True, null=True, verbose_name="number of livelihhods and basic needs requirements"),
                ),
                ("migration_female", models.IntegerField(blank=True, null=True, verbose_name="number of migration female")),
                ("migration_male", models.IntegerField(blank=True, null=True, verbose_name="number of migration male")),
                (
                    "migration_people_reached",
                    models.IntegerField(blank=True, null=True, verbose_name="number of migration people reached"),
                ),
                (
                    "migration_people_targeted",
                    models.IntegerField(blank=True, null=True, verbose_name="number of migration people targeted"),
                ),
                (
                    "migration_requirements",
                    models.IntegerField(blank=True, null=True, verbose_name="number of migration requirements"),
                ),
                (
                    "protection_gender_and_inclusion_female",
                    models.IntegerField(blank=True, null=True, verbose_name="number of protection gender and inclusion female"),
                ),
                (
                    "protection_gender_and_inclusion_male",
                    models.IntegerField(blank=True, null=True, verbose_name="number of protection gender and inclusion male"),
                ),
                (
                    "protection_gender_and_inclusion_people_reached",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="number of protection gender and inclusion people reached"
                    ),
                ),
                (
                    "protection_gender_and_inclusion_people_targeted",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="number of protection gender and inclusion people targeted"
                    ),
                ),
                (
                    "protection_gender_and_inclusion_requirements",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="number of protection gender and inclusion requirements"
                    ),
                ),
                ("shelter_female", models.IntegerField(blank=True, null=True, verbose_name="number of shelter female")),
                ("shelter_male", models.IntegerField(blank=True, null=True, verbose_name="number of shelter male")),
                (
                    "shelter_people_reached",
                    models.IntegerField(blank=True, null=True, verbose_name="number of shelter people reached"),
                ),
                (
                    "shelter_people_targeted",
                    models.IntegerField(blank=True, null=True, verbose_name="number of shelter people targeted"),
                ),
                (
                    "shelter_requirements",
                    models.IntegerField(blank=True, null=True, verbose_name="number of shelter people requirements"),
                ),
                (
                    "water_sanitation_and_hygiene_female",
                    models.IntegerField(blank=True, null=True, verbose_name="water sanitation and hygiene female"),
                ),
                (
                    "water_sanitation_and_hygiene_male",
                    models.IntegerField(blank=True, null=True, verbose_name="water sanitation and hygiene male"),
                ),
                (
                    "water_sanitation_and_hygiene_people_reached",
                    models.IntegerField(blank=True, null=True, verbose_name="water sanitation and hygiene people reached"),
                ),
                (
                    "water_sanitation_and_hygiene_people_targeted",
                    models.IntegerField(blank=True, null=True, verbose_name="water sanitation and hygiene people targeted"),
                ),
                (
                    "water_sanitation_and_hygiene_requirements",
                    models.IntegerField(blank=True, null=True, verbose_name="water sanitation and hygiene requirements"),
                ),
                ("education_female", models.IntegerField(blank=True, null=True, verbose_name="number of eduction female")),
                ("education_male", models.IntegerField(blank=True, null=True, verbose_name="number of eduction male")),
                (
                    "education_people_reached",
                    models.IntegerField(blank=True, null=True, verbose_name="number of eduction people reached"),
                ),
                (
                    "education_people_targeted",
                    models.IntegerField(blank=True, null=True, verbose_name="number of eduction people targeted"),
                ),
                (
                    "education_requirements",
                    models.IntegerField(blank=True, null=True, verbose_name="number of eduction requirements"),
                ),
            ],
            options={
                "verbose_name": "emergency operations dataset",
                "verbose_name_plural": "emergency operations datasets",
            },
        ),
        migrations.CreateModel(
            name="EmergencyOperationsEA",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_validated",
                    models.BooleanField(
                        default=False, help_text="Did anyone check the editable data?", verbose_name="is validated?"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="created_at")),
                ("modified_at", models.DateTimeField(auto_now=True, verbose_name="modified_at")),
                ("raw_file_name", models.TextField(blank=True, null=True)),
                ("raw_file_url", models.TextField(blank=True, null=True)),
                ("raw_appeal_ends", models.TextField(blank=True, null=True, verbose_name="appeal ends (raw)")),
                ("raw_appeal_launch_date", models.TextField(blank=True, null=True, verbose_name="appeal launch date (raw)")),
                ("raw_appeal_number", models.TextField(blank=True, null=True, verbose_name="appeal number (raw)")),
                (
                    "raw_current_operation_budget",
                    models.TextField(blank=True, null=True, verbose_name="current operation budget (raw)"),
                ),
                ("raw_dref_allocated", models.TextField(blank=True, null=True)),
                ("raw_glide_number", models.TextField(blank=True, null=True, verbose_name="glide number (raw)")),
                (
                    "raw_num_of_people_to_be_assisted",
                    models.TextField(blank=True, null=True, verbose_name="number of people to be assisted (raw)"),
                ),
                (
                    "raw_disaster_risk_reduction_female",
                    models.TextField(blank=True, null=True, verbose_name="number of disaster risk reduction female (raw)"),
                ),
                (
                    "raw_disaster_risk_reduction_male",
                    models.TextField(blank=True, null=True, verbose_name="number of disaster risk reduction male (raw)"),
                ),
                (
                    "raw_disaster_risk_reduction_people_reached",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of disaster risk reduction people reached (raw)"
                    ),
                ),
                (
                    "raw_disaster_risk_reduction_people_targeted",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of disaster risk reduction people targeted (raw)"
                    ),
                ),
                (
                    "raw_disaster_risk_reduction_requirements",
                    models.TextField(blank=True, null=True, verbose_name="number of disaster risk reduction requirements (raw)"),
                ),
                ("raw_health_female", models.TextField(blank=True, null=True, verbose_name="health female (raw)")),
                ("raw_health_male", models.TextField(blank=True, null=True, verbose_name="health male (raw)")),
                (
                    "raw_health_people_reached",
                    models.TextField(blank=True, null=True, verbose_name="health people reached (raw)"),
                ),
                (
                    "raw_health_people_targeted",
                    models.TextField(blank=True, null=True, verbose_name="health people targeted (raw)"),
                ),
                ("raw_health_requirements", models.TextField(blank=True, null=True, verbose_name="health requirements (raw)")),
                (
                    "raw_livelihoods_and_basic_needs_female",
                    models.TextField(blank=True, null=True, verbose_name="number of livelihhods and basic needs female (raw)"),
                ),
                (
                    "raw_livelihoods_and_basic_needs_male",
                    models.TextField(blank=True, null=True, verbose_name="number of livelihhods and basic needs male (raw)"),
                ),
                (
                    "raw_livelihoods_and_basic_needs_people_reached",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of livelihhods and basic needs people reached (raw)"
                    ),
                ),
                (
                    "raw_livelihoods_and_basic_needs_people_targeted",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of livelihhods and basic needs people targeted (raw)"
                    ),
                ),
                (
                    "raw_livelihoods_and_basic_needs_requirements",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of livelihhods and basic needs requirements (raw)"
                    ),
                ),
                (
                    "raw_migration_female",
                    models.TextField(blank=True, null=True, verbose_name="number of migration female (raw)"),
                ),
                ("raw_migration_male", models.TextField(blank=True, null=True, verbose_name="number of migration male (raw)")),
                (
                    "raw_migration_people_reached",
                    models.TextField(blank=True, null=True, verbose_name="number of migration people reached (raw)"),
                ),
                (
                    "raw_migration_people_targeted",
                    models.TextField(blank=True, null=True, verbose_name="number of migration people targeted (raw)"),
                ),
                (
                    "raw_migration_requirements",
                    models.TextField(blank=True, null=True, verbose_name="number of migration requirements (raw)"),
                ),
                (
                    "raw_protection_gender_and_inclusion_female",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of protection gender and inclusion female (raw)"
                    ),
                ),
                (
                    "raw_protection_gender_and_inclusion_male",
                    models.TextField(blank=True, null=True, verbose_name="number of protection gender and inclusion male (raw)"),
                ),
                (
                    "raw_protection_gender_and_inclusion_people_reached",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of protection gender and inclusion people reached (raw)"
                    ),
                ),
                (
                    "raw_protection_gender_and_inclusion_people_targeted",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of protection gender and inclusion people targeted (raw)"
                    ),
                ),
                (
                    "raw_protection_gender_and_inclusion_requirements",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of protection gender and inclusion requirements (raw)"
                    ),
                ),
                ("raw_shelter_female", models.TextField(blank=True, null=True, verbose_name="number of shelter female (raw)")),
                ("raw_shelter_male", models.TextField(blank=True, null=True, verbose_name="number of shelter male (raw)")),
                (
                    "raw_shelter_people_reached",
                    models.TextField(blank=True, null=True, verbose_name="number of shelter people reached (raw)"),
                ),
                (
                    "raw_shelter_people_targeted",
                    models.TextField(blank=True, null=True, verbose_name="number of shelter people targeted (raw)"),
                ),
                (
                    "raw_shelter_requirements",
                    models.TextField(blank=True, null=True, verbose_name="number of shelter requirements (raw)"),
                ),
                (
                    "raw_water_sanitation_and_hygiene_female",
                    models.TextField(blank=True, null=True, verbose_name="number of water sanitation and hygiene female (raw)"),
                ),
                (
                    "raw_water_sanitation_and_hygiene_male",
                    models.TextField(blank=True, null=True, verbose_name="number of water sanitation and hygiene male (raw)"),
                ),
                (
                    "raw_water_sanitation_and_hygiene_people_reached",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of water sanitation and hygiene people reached (raw)"
                    ),
                ),
                (
                    "raw_water_sanitation_and_hygiene_people_targeted",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of water sanitation and hygiene people targeted (raw)"
                    ),
                ),
                (
                    "raw_water_sanitation_and_hygiene_requirements",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of water sanitation and hygiene requirements (raw)"
                    ),
                ),
                ("file_name", models.CharField(blank=True, max_length=200, null=True)),
                ("appeal_ends", models.DateField(blank=True, null=True, verbose_name="appeal ends")),
                ("appeal_launch_date", models.DateField(blank=True, null=True, verbose_name="appeal launch date")),
                ("appeal_number", models.CharField(blank=True, max_length=20, null=True, verbose_name="appeal number")),
                ("current_operation_budget", models.IntegerField(blank=True, null=True, verbose_name="current operation budget")),
                ("dref_allocated", models.IntegerField(blank=True, null=True, verbose_name="DREF allocated")),
                ("glide_number", models.CharField(blank=True, max_length=18, null=True, verbose_name="glide number")),
                (
                    "num_of_people_to_be_assisted",
                    models.IntegerField(blank=True, null=True, verbose_name="number of people to be assisted"),
                ),
                (
                    "disaster_risk_reduction_female",
                    models.IntegerField(blank=True, null=True, verbose_name="number of disaster risk reduction female"),
                ),
                (
                    "disaster_risk_reduction_male",
                    models.IntegerField(blank=True, null=True, verbose_name="number of disaster risk reduction male"),
                ),
                (
                    "disaster_risk_reduction_people_reached",
                    models.IntegerField(blank=True, null=True, verbose_name="number of disaster risk reduction people reached"),
                ),
                (
                    "disaster_risk_reduction_people_targeted",
                    models.IntegerField(blank=True, null=True, verbose_name="number of disaster risk reduction people targeted"),
                ),
                (
                    "disaster_risk_reduction_requirements",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="number of disaster risk reduction people requirements"
                    ),
                ),
                ("health_female", models.IntegerField(blank=True, null=True, verbose_name="number of health female")),
                ("health_male", models.IntegerField(blank=True, null=True, verbose_name="number of health male")),
                (
                    "health_people_reached",
                    models.IntegerField(blank=True, null=True, verbose_name="number of health people reached"),
                ),
                (
                    "health_people_targeted",
                    models.IntegerField(blank=True, null=True, verbose_name="number of health people targeted"),
                ),
                ("health_requirements", models.IntegerField(blank=True, null=True, verbose_name="number of health requirements")),
                (
                    "livelihoods_and_basic_needs_female",
                    models.IntegerField(blank=True, null=True, verbose_name="number of livelihhods and basic needs female"),
                ),
                (
                    "livelihoods_and_basic_needs_male",
                    models.IntegerField(blank=True, null=True, verbose_name="number of livelihhods and basic needs male"),
                ),
                (
                    "livelihoods_and_basic_needs_people_reached",
                    models.IntegerField(blank=True, null=True, verbose_name="number of livelihhods and basic people reached"),
                ),
                (
                    "livelihoods_and_basic_needs_people_targeted",
                    models.IntegerField(blank=True, null=True, verbose_name="number of livelihhods and basic people targeted"),
                ),
                (
                    "livelihoods_and_basic_needs_requirements",
                    models.IntegerField(blank=True, null=True, verbose_name="number of livelihhods and basic needs requirements"),
                ),
                ("migration_female", models.IntegerField(blank=True, null=True, verbose_name="number of migration female")),
                ("migration_male", models.IntegerField(blank=True, null=True, verbose_name="number of migration male")),
                (
                    "migration_people_reached",
                    models.IntegerField(blank=True, null=True, verbose_name="number of migration people reached"),
                ),
                (
                    "migration_people_targeted",
                    models.IntegerField(blank=True, null=True, verbose_name="number of migration people targeted"),
                ),
                (
                    "migration_requirements",
                    models.IntegerField(blank=True, null=True, verbose_name="number of migration requirements"),
                ),
                (
                    "protection_gender_and_inclusion_female",
                    models.IntegerField(blank=True, null=True, verbose_name="number of protection gender and inclusion female"),
                ),
                (
                    "protection_gender_and_inclusion_male",
                    models.IntegerField(blank=True, null=True, verbose_name="number of protection gender and inclusion male"),
                ),
                (
                    "protection_gender_and_inclusion_people_reached",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="number of protection gender and inclusion people reached"
                    ),
                ),
                (
                    "protection_gender_and_inclusion_people_targeted",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="number of protection gender and inclusion people targeted"
                    ),
                ),
                (
                    "protection_gender_and_inclusion_requirements",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="number of protection gender and inclusion requirements"
                    ),
                ),
                ("shelter_female", models.IntegerField(blank=True, null=True, verbose_name="number of shelter female")),
                ("shelter_male", models.IntegerField(blank=True, null=True, verbose_name="number of shelter male")),
                (
                    "shelter_people_reached",
                    models.IntegerField(blank=True, null=True, verbose_name="number of shelter people reached"),
                ),
                (
                    "shelter_people_targeted",
                    models.IntegerField(blank=True, null=True, verbose_name="number of shelter people targeted"),
                ),
                (
                    "shelter_requirements",
                    models.IntegerField(blank=True, null=True, verbose_name="number of shelter people requirements"),
                ),
                (
                    "water_sanitation_and_hygiene_female",
                    models.IntegerField(blank=True, null=True, verbose_name="water sanitation and hygiene female"),
                ),
                (
                    "water_sanitation_and_hygiene_male",
                    models.IntegerField(blank=True, null=True, verbose_name="water sanitation and hygiene male"),
                ),
                (
                    "water_sanitation_and_hygiene_people_reached",
                    models.IntegerField(blank=True, null=True, verbose_name="water sanitation and hygiene people reached"),
                ),
                (
                    "water_sanitation_and_hygiene_people_targeted",
                    models.IntegerField(blank=True, null=True, verbose_name="water sanitation and hygiene people targeted"),
                ),
                (
                    "water_sanitation_and_hygiene_requirements",
                    models.IntegerField(blank=True, null=True, verbose_name="water sanitation and hygiene requirements"),
                ),
            ],
            options={
                "verbose_name": "emergency operations emergency appeal",
                "verbose_name_plural": "emergency operations emergency appeals",
            },
        ),
        migrations.CreateModel(
            name="EmergencyOperationsFR",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_validated",
                    models.BooleanField(
                        default=False, help_text="Did anyone check the editable data?", verbose_name="is validated?"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="created_at")),
                ("modified_at", models.DateTimeField(auto_now=True, verbose_name="modified_at")),
                ("raw_file_name", models.TextField(blank=True, null=True)),
                ("raw_file_url", models.TextField(blank=True, null=True)),
                ("raw_appeal_number", models.TextField(blank=True, null=True, verbose_name="appeal number (raw)")),
                ("raw_date_of_disaster", models.TextField(blank=True, null=True, verbose_name="date of disaster (raw)")),
                ("raw_date_of_issue", models.TextField(blank=True, null=True, verbose_name="date of issue (raw)")),
                ("raw_glide_number", models.TextField(blank=True, null=True, verbose_name="glide number (raw)")),
                (
                    "raw_num_of_other_partner_involved",
                    models.TextField(blank=True, null=True, verbose_name="number of other partner involved (raw)"),
                ),
                (
                    "raw_num_of_partner_ns_involved",
                    models.TextField(blank=True, null=True, verbose_name="number of NS partner involved (raw)"),
                ),
                (
                    "raw_num_of_people_affected",
                    models.TextField(blank=True, null=True, verbose_name="number of people affected (raw)"),
                ),
                (
                    "raw_num_of_people_to_be_assisted",
                    models.TextField(blank=True, null=True, verbose_name="number of people to be assisted (raw)"),
                ),
                ("raw_operation_end_date", models.TextField(blank=True, null=True, verbose_name="operation end date (raw)")),
                ("raw_operation_start_date", models.TextField(blank=True, null=True)),
                (
                    "raw_overall_operation_budget",
                    models.TextField(blank=True, null=True, verbose_name="overall operation budget (raw)"),
                ),
                (
                    "raw_disaster_risk_reduction_female",
                    models.TextField(blank=True, null=True, verbose_name="number of disaster risk reduction female (raw)"),
                ),
                (
                    "raw_disaster_risk_reduction_male",
                    models.TextField(blank=True, null=True, verbose_name="number of disaster risk reduction male (raw)"),
                ),
                (
                    "raw_disaster_risk_reduction_people_reached",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of disaster risk reduction people reached (raw)"
                    ),
                ),
                (
                    "raw_disaster_risk_reduction_requirements",
                    models.TextField(blank=True, null=True, verbose_name="number of disaster risk reduction requirements (raw)"),
                ),
                ("raw_health_female", models.TextField(blank=True, null=True, verbose_name="health female (raw)")),
                ("raw_health_male", models.TextField(blank=True, null=True, verbose_name="health male (raw)")),
                (
                    "raw_health_people_reached",
                    models.TextField(blank=True, null=True, verbose_name="health people reached (raw)"),
                ),
                ("raw_health_requirements", models.TextField(blank=True, null=True, verbose_name="health requirements (raw)")),
                (
                    "raw_livelihoods_and_basic_needs_female",
                    models.TextField(blank=True, null=True, verbose_name="number of livelihhods and basic needs female (raw)"),
                ),
                (
                    "raw_livelihoods_and_basic_needs_male",
                    models.TextField(blank=True, null=True, verbose_name="number of livelihhods and basic needs male (raw)"),
                ),
                (
                    "raw_livelihoods_and_basic_needs_people_reached",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of livelihhods and basic needs people reached (raw)"
                    ),
                ),
                (
                    "raw_livelihoods_and_basic_needs_requirements",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of livelihhods and basic needs requirements (raw)"
                    ),
                ),
                (
                    "raw_migration_female",
                    models.TextField(blank=True, null=True, verbose_name="number of migration female (raw)"),
                ),
                ("raw_migration_male", models.TextField(blank=True, null=True, verbose_name="number of migration male (raw)")),
                (
                    "raw_migration_people_reached",
                    models.TextField(blank=True, null=True, verbose_name="number of migration people reached (raw)"),
                ),
                (
                    "raw_migration_requirements",
                    models.TextField(blank=True, null=True, verbose_name="number of migration requirements (raw)"),
                ),
                (
                    "raw_protection_gender_and_inclusion_female",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of protection gender and inclusion female (raw)"
                    ),
                ),
                (
                    "raw_protection_gender_and_inclusion_male",
                    models.TextField(blank=True, null=True, verbose_name="number of protection gender and inclusion male (raw)"),
                ),
                (
                    "raw_protection_gender_and_inclusion_people_reached",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of protection gender and inclusion people reached (raw)"
                    ),
                ),
                (
                    "raw_protection_gender_and_inclusion_requirements",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of protection gender and inclusion requirements (raw)"
                    ),
                ),
                ("raw_shelter_female", models.TextField(blank=True, null=True, verbose_name="number of shelter female (raw)")),
                ("raw_shelter_male", models.TextField(blank=True, null=True, verbose_name="number of shelter male (raw)")),
                (
                    "raw_shelter_people_reached",
                    models.TextField(blank=True, null=True, verbose_name="number of shelter people reached (raw)"),
                ),
                (
                    "raw_shelter_requirements",
                    models.TextField(blank=True, null=True, verbose_name="number of shelter requirements (raw)"),
                ),
                (
                    "raw_water_sanitation_and_hygiene_female",
                    models.TextField(blank=True, null=True, verbose_name="number of water sanitation and hygiene female (raw)"),
                ),
                (
                    "raw_water_sanitation_and_hygiene_male",
                    models.TextField(blank=True, null=True, verbose_name="number of water sanitation and hygiene male (raw)"),
                ),
                (
                    "raw_water_sanitation_and_hygiene_people_reached",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of water sanitation and hygiene people reached (raw)"
                    ),
                ),
                (
                    "raw_water_sanitation_and_hygiene_requirements",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of water sanitation and hygiene requirements (raw)"
                    ),
                ),
                ("file_name", models.CharField(blank=True, max_length=200, null=True)),
                ("appeal_number", models.CharField(blank=True, max_length=20, null=True, verbose_name="appeal number")),
                ("date_of_disaster", models.DateField(blank=True, null=True, verbose_name="date of disaster")),
                ("date_of_issue", models.DateField(blank=True, null=True, verbose_name="date of issue")),
                ("glide_number", models.CharField(blank=True, max_length=18, null=True, verbose_name="glide number")),
                (
                    "num_of_other_partner_involved",
                    models.TextField(blank=True, null=True, verbose_name="number of other partner involved"),
                ),
                (
                    "num_of_partner_ns_involved",
                    models.TextField(blank=True, null=True, verbose_name="number of NS partner involved"),
                ),
                ("num_of_people_affected", models.IntegerField(blank=True, null=True, verbose_name="number of people affected")),
                (
                    "num_of_people_to_be_assisted",
                    models.IntegerField(blank=True, null=True, verbose_name="number of people to be assisted"),
                ),
                ("operation_end_date", models.DateField(blank=True, null=True, verbose_name="operation end date")),
                ("operation_start_date", models.DateField(blank=True, null=True, verbose_name="operation start date")),
                ("overall_operation_budget", models.IntegerField(blank=True, null=True, verbose_name="overall operation budget")),
                (
                    "disaster_risk_reduction_female",
                    models.IntegerField(blank=True, null=True, verbose_name="number of disaster risk reduction female"),
                ),
                (
                    "disaster_risk_reduction_male",
                    models.IntegerField(blank=True, null=True, verbose_name="number of disaster risk reduction male"),
                ),
                (
                    "disaster_risk_reduction_people_reached",
                    models.IntegerField(blank=True, null=True, verbose_name="number of disaster risk reduction people reached"),
                ),
                (
                    "disaster_risk_reduction_requirements",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="number of disaster risk reduction people requirements"
                    ),
                ),
                ("health_female", models.IntegerField(blank=True, null=True, verbose_name="number of health female")),
                ("health_male", models.IntegerField(blank=True, null=True, verbose_name="number of health male")),
                (
                    "health_people_reached",
                    models.IntegerField(blank=True, null=True, verbose_name="number of health people reached"),
                ),
                ("health_requirements", models.IntegerField(blank=True, null=True, verbose_name="number of health requirements")),
                (
                    "livelihoods_and_basic_needs_female",
                    models.IntegerField(blank=True, null=True, verbose_name="number of livelihhods and basic needs female"),
                ),
                (
                    "livelihoods_and_basic_needs_male",
                    models.IntegerField(blank=True, null=True, verbose_name="number of livelihhods and basic needs male"),
                ),
                (
                    "livelihoods_and_basic_needs_people_reached",
                    models.IntegerField(blank=True, null=True, verbose_name="number of livelihhods and basic people reached"),
                ),
                (
                    "livelihoods_and_basic_needs_requirements",
                    models.IntegerField(blank=True, null=True, verbose_name="number of livelihhods and basic needs requirements"),
                ),
                ("migration_female", models.IntegerField(blank=True, null=True, verbose_name="number of migration female")),
                ("migration_male", models.IntegerField(blank=True, null=True, verbose_name="number of migration male")),
                (
                    "migration_people_reached",
                    models.IntegerField(blank=True, null=True, verbose_name="number of migration people reached"),
                ),
                (
                    "migration_requirements",
                    models.IntegerField(blank=True, null=True, verbose_name="number of migration requirements"),
                ),
                (
                    "protection_gender_and_inclusion_female",
                    models.IntegerField(blank=True, null=True, verbose_name="number of protection gender and inclusion female"),
                ),
                (
                    "protection_gender_and_inclusion_male",
                    models.IntegerField(blank=True, null=True, verbose_name="number of protection gender and inclusion male"),
                ),
                (
                    "protection_gender_and_inclusion_people_reached",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="number of protection gender and inclusion people reached"
                    ),
                ),
                (
                    "protection_gender_and_inclusion_requirements",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="number of protection gender and inclusion requirements"
                    ),
                ),
                ("shelter_female", models.IntegerField(blank=True, null=True, verbose_name="number of shelter female")),
                ("shelter_male", models.IntegerField(blank=True, null=True, verbose_name="number of shelter male")),
                (
                    "shelter_people_reached",
                    models.IntegerField(blank=True, null=True, verbose_name="number of shelter people reached"),
                ),
                (
                    "shelter_requirements",
                    models.IntegerField(blank=True, null=True, verbose_name="number of shelter people requirements"),
                ),
                (
                    "water_sanitation_and_hygiene_female",
                    models.IntegerField(blank=True, null=True, verbose_name="water sanitation and hygiene female"),
                ),
                (
                    "water_sanitation_and_hygiene_male",
                    models.IntegerField(blank=True, null=True, verbose_name="water sanitation and hygiene male"),
                ),
                (
                    "water_sanitation_and_hygiene_people_reached",
                    models.IntegerField(blank=True, null=True, verbose_name="water sanitation and hygiene people reached"),
                ),
                (
                    "water_sanitation_and_hygiene_requirements",
                    models.IntegerField(blank=True, null=True, verbose_name="water sanitation and hygiene requirements"),
                ),
            ],
            options={
                "verbose_name": "emergency operations final report",
                "verbose_name_plural": "emergency operations final reports",
            },
        ),
        migrations.CreateModel(
            name="EmergencyOperationsPeopleReached",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_validated",
                    models.BooleanField(
                        default=False, help_text="Did anyone check the editable data?", verbose_name="is validated?"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="created_at")),
                ("modified_at", models.DateTimeField(auto_now=True, verbose_name="modified_at")),
                ("raw_file_name", models.TextField(blank=True, null=True)),
                ("raw_file_url", models.TextField(blank=True, null=True)),
                ("raw_appeal_number", models.TextField(blank=True, null=True, verbose_name="appeal number (raw)")),
                ("raw_date_of_issue", models.TextField(blank=True, null=True, verbose_name="date of issue (raw)")),
                ("raw_epoa_update_num", models.TextField(blank=True, null=True, verbose_name="EPOA update number (raw)")),
                ("raw_glide_number", models.TextField(blank=True, null=True, verbose_name="glide number (raw)")),
                ("raw_operation_start_date", models.TextField(blank=True, null=True)),
                ("raw_operation_timeframe", models.TextField(blank=True, null=True, verbose_name="operation timeframe (raw)")),
                (
                    "raw_time_frame_covered_by_update",
                    models.TextField(blank=True, null=True, verbose_name="time frame covered by update (raw)"),
                ),
                (
                    "raw_disaster_risk_reduction_female",
                    models.TextField(blank=True, null=True, verbose_name="number of disaster risk reduction female (raw)"),
                ),
                (
                    "raw_disaster_risk_reduction_male",
                    models.TextField(blank=True, null=True, verbose_name="number of disaster risk reduction male (raw)"),
                ),
                (
                    "raw_disaster_risk_reduction_people_reached",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of disaster risk reduction people reached (raw)"
                    ),
                ),
                (
                    "raw_disaster_risk_reduction_requirements",
                    models.TextField(blank=True, null=True, verbose_name="number of disaster risk reduction requirements (raw)"),
                ),
                ("raw_health_female", models.TextField(blank=True, null=True, verbose_name="health female (raw)")),
                ("raw_health_male", models.TextField(blank=True, null=True, verbose_name="health male (raw)")),
                (
                    "raw_health_people_reached",
                    models.TextField(blank=True, null=True, verbose_name="health people reached (raw)"),
                ),
                ("raw_health_requirements", models.TextField(blank=True, null=True, verbose_name="health requirements (raw)")),
                (
                    "raw_livelihoods_and_basic_needs_female",
                    models.TextField(blank=True, null=True, verbose_name="number of livelihhods and basic needs female (raw)"),
                ),
                (
                    "raw_livelihoods_and_basic_needs_male",
                    models.TextField(blank=True, null=True, verbose_name="number of livelihhods and basic needs male (raw)"),
                ),
                (
                    "raw_livelihoods_and_basic_needs_people_reached",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of livelihhods and basic needs people reached (raw)"
                    ),
                ),
                (
                    "raw_livelihoods_and_basic_needs_requirements",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of livelihhods and basic needs requirements (raw)"
                    ),
                ),
                (
                    "raw_migration_female",
                    models.TextField(blank=True, null=True, verbose_name="number of migration female (raw)"),
                ),
                ("raw_migration_male", models.TextField(blank=True, null=True, verbose_name="number of migration male (raw)")),
                (
                    "raw_migration_people_reached",
                    models.TextField(blank=True, null=True, verbose_name="number of migration people reached (raw)"),
                ),
                (
                    "raw_migration_requirements",
                    models.TextField(blank=True, null=True, verbose_name="number of migration requirements (raw)"),
                ),
                (
                    "raw_protection_gender_and_inclusion_female",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of protection gender and inclusion female (raw)"
                    ),
                ),
                (
                    "raw_protection_gender_and_inclusion_male",
                    models.TextField(blank=True, null=True, verbose_name="number of protection gender and inclusion male (raw)"),
                ),
                (
                    "raw_protection_gender_and_inclusion_people_reached",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of protection gender and inclusion people reached (raw)"
                    ),
                ),
                (
                    "raw_protection_gender_and_inclusion_requirements",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of protection gender and inclusion requirements (raw)"
                    ),
                ),
                ("raw_shelter_female", models.TextField(blank=True, null=True, verbose_name="number of shelter female (raw)")),
                ("raw_shelter_male", models.TextField(blank=True, null=True, verbose_name="number of shelter male (raw)")),
                (
                    "raw_shelter_people_reached",
                    models.TextField(blank=True, null=True, verbose_name="number of shelter people reached (raw)"),
                ),
                (
                    "raw_shelter_requirements",
                    models.TextField(blank=True, null=True, verbose_name="number of shelter requirements (raw)"),
                ),
                (
                    "raw_water_sanitation_and_hygiene_female",
                    models.TextField(blank=True, null=True, verbose_name="number of water sanitation and hygiene female (raw)"),
                ),
                (
                    "raw_water_sanitation_and_hygiene_male",
                    models.TextField(blank=True, null=True, verbose_name="number of water sanitation and hygiene male (raw)"),
                ),
                (
                    "raw_water_sanitation_and_hygiene_people_reached",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of water sanitation and hygiene people reached (raw)"
                    ),
                ),
                (
                    "raw_water_sanitation_and_hygiene_requirements",
                    models.TextField(
                        blank=True, null=True, verbose_name="number of water sanitation and hygiene requirements (raw)"
                    ),
                ),
                ("file_name", models.CharField(blank=True, max_length=200, null=True)),
                ("appeal_number", models.CharField(blank=True, max_length=20, null=True, verbose_name="appeal number")),
                ("date_of_issue", models.DateField(blank=True, null=True, verbose_name="date of issue")),
                ("epoa_update_num", models.IntegerField(blank=True, null=True, verbose_name="EPOA update number")),
                ("glide_number", models.CharField(blank=True, max_length=18, null=True, verbose_name="glide number")),
                ("operation_start_date", models.DateField(blank=True, null=True, verbose_name="operation start date")),
                (
                    "operation_timeframe",
                    models.CharField(blank=True, max_length=200, null=True, verbose_name="operation timeframe"),
                ),
                (
                    "time_frame_covered_by_update",
                    models.CharField(blank=True, max_length=200, null=True, verbose_name="time frame covered by update"),
                ),
                (
                    "disaster_risk_reduction_female",
                    models.IntegerField(blank=True, null=True, verbose_name="number of disaster risk reduction female"),
                ),
                (
                    "disaster_risk_reduction_male",
                    models.IntegerField(blank=True, null=True, verbose_name="number of disaster risk reduction male"),
                ),
                (
                    "disaster_risk_reduction_people_reached",
                    models.IntegerField(blank=True, null=True, verbose_name="number of disaster risk reduction people reached"),
                ),
                (
                    "disaster_risk_reduction_requirements",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="number of disaster risk reduction people requirements"
                    ),
                ),
                ("health_female", models.IntegerField(blank=True, null=True, verbose_name="number of health female")),
                ("health_male", models.IntegerField(blank=True, null=True, verbose_name="number of health male")),
                (
                    "health_people_reached",
                    models.IntegerField(blank=True, null=True, verbose_name="number of health people reached"),
                ),
                ("health_requirements", models.IntegerField(blank=True, null=True, verbose_name="number of health requirements")),
                (
                    "livelihoods_and_basic_needs_female",
                    models.IntegerField(blank=True, null=True, verbose_name="number of livelihhods and basic needs female"),
                ),
                (
                    "livelihoods_and_basic_needs_male",
                    models.IntegerField(blank=True, null=True, verbose_name="number of livelihhods and basic needs male"),
                ),
                (
                    "livelihoods_and_basic_needs_people_reached",
                    models.IntegerField(blank=True, null=True, verbose_name="number of livelihhods and basic people reached"),
                ),
                (
                    "livelihoods_and_basic_needs_requirements",
                    models.IntegerField(blank=True, null=True, verbose_name="number of livelihhods and basic needs requirements"),
                ),
                ("migration_female", models.IntegerField(blank=True, null=True, verbose_name="number of migration female")),
                ("migration_male", models.IntegerField(blank=True, null=True, verbose_name="number of migration male")),
                (
                    "migration_people_reached",
                    models.IntegerField(blank=True, null=True, verbose_name="number of migration people reached"),
                ),
                (
                    "migration_requirements",
                    models.IntegerField(blank=True, null=True, verbose_name="number of migration requirements"),
                ),
                (
                    "protection_gender_and_inclusion_female",
                    models.IntegerField(blank=True, null=True, verbose_name="number of protection gender and inclusion female"),
                ),
                (
                    "protection_gender_and_inclusion_male",
                    models.IntegerField(blank=True, null=True, verbose_name="number of protection gender and inclusion male"),
                ),
                (
                    "protection_gender_and_inclusion_people_reached",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="number of protection gender and inclusion people reached"
                    ),
                ),
                (
                    "protection_gender_and_inclusion_requirements",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="number of protection gender and inclusion requirements"
                    ),
                ),
                ("shelter_female", models.IntegerField(blank=True, null=True, verbose_name="number of shelter female")),
                ("shelter_male", models.IntegerField(blank=True, null=True, verbose_name="number of shelter male")),
                (
                    "shelter_people_reached",
                    models.IntegerField(blank=True, null=True, verbose_name="number of shelter people reached"),
                ),
                (
                    "shelter_requirements",
                    models.IntegerField(blank=True, null=True, verbose_name="number of shelter people requirements"),
                ),
                (
                    "water_sanitation_and_hygiene_female",
                    models.IntegerField(blank=True, null=True, verbose_name="water sanitation and hygiene female"),
                ),
                (
                    "water_sanitation_and_hygiene_male",
                    models.IntegerField(blank=True, null=True, verbose_name="water sanitation and hygiene male"),
                ),
                (
                    "water_sanitation_and_hygiene_people_reached",
                    models.IntegerField(blank=True, null=True, verbose_name="water sanitation and hygiene people reached"),
                ),
                (
                    "water_sanitation_and_hygiene_requirements",
                    models.IntegerField(blank=True, null=True, verbose_name="water sanitation and hygiene requirements"),
                ),
            ],
            options={
                "verbose_name": "emergency operations people reached",
                "verbose_name_plural": "emergency operations people reached",
            },
        ),
        migrations.CreateModel(
            name="CronJob",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(default="", max_length=100, verbose_name="name")),
                (
                    "status",
                    models.IntegerField(
                        choices=[(-2, "Acknowledged"), (-1, "Never run"), (0, "Successful"), (1, "Warned"), (2, "Erroneous")],
                        default=-1,
                        verbose_name="status",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="created at")),
                ("message", models.TextField(blank=True, null=True, verbose_name="message")),
                ("backend_side", models.BooleanField(default=True, verbose_name="backend side")),
                ("num_result", models.IntegerField(default=0, verbose_name="number of results")),
                ("storing_days", models.IntegerField(default=3, verbose_name="storing days")),
            ],
            options={
                "verbose_name": "cronjob log record",
                "verbose_name_plural": "cronjob log records",
            },
        ),
        migrations.CreateModel(
            name="AuthLog",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("action", models.CharField(max_length=64, verbose_name="action")),
                ("username", models.CharField(max_length=256, null=True, verbose_name="username")),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="created at")),
            ],
            options={
                "verbose_name": "auth log",
                "verbose_name_plural": "auth logs",
            },
        ),
        migrations.CreateModel(
            name="ReversionDifferenceLog",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="created at")),
                ("action", models.CharField(max_length=64, verbose_name="action")),
                ("username", models.CharField(max_length=256, null=True, verbose_name="username")),
                ("object_id", models.CharField(blank=True, max_length=191, verbose_name="object id")),
                ("object_type", models.CharField(blank=True, max_length=50, verbose_name="object type")),
                (
                    "changed_from",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True, null=True),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="changed from",
                    ),
                ),
                (
                    "changed_to",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True, null=True),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="changed to",
                    ),
                ),
                ("object_name", models.TextField(blank=True, null=True, verbose_name="object name")),
            ],
            options={
                "verbose_name": "reversion difference log",
                "verbose_name_plural": "reversion difference logs",
            },
        ),
        migrations.CreateModel(
            name="RegionSnippet",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("snippet", models.TextField(blank=True, null=True, verbose_name="snippet")),
                ("image", models.ImageField(blank=True, null=True, upload_to="regions/%Y/%m/%d/", verbose_name="image")),
                (
                    "visibility",
                    models.IntegerField(
                        choices=[(1, "RCRC Movement"), (2, "IFRC Secretariat"), (3, "Public"), (4, "IFRC and NS")],
                        default=3,
                        verbose_name="visibility",
                    ),
                ),
                (
                    "region",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="snippets",
                        to="api.region",
                        verbose_name="region",
                    ),
                ),
                (
                    "position",
                    models.IntegerField(
                        choices=[(1, "Top"), (2, "High"), (3, "Middle"), (4, "Low"), (5, "Bottom")],
                        default=3,
                        verbose_name="position",
                    ),
                ),
            ],
            options={
                "ordering": ("position", "id"),
                "verbose_name": "region snippet",
                "verbose_name_plural": "region snippets",
            },
        ),
        migrations.CreateModel(
            name="ActionsTaken",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "organization",
                    models.CharField(
                        choices=[("NTLS", "National Society"), ("PNS", "Foreign Society"), ("FDRN", "Federation")],
                        max_length=16,
                        verbose_name="organization",
                    ),
                ),
                ("summary", models.TextField(blank=True, verbose_name="summary")),
                ("actions", models.ManyToManyField(blank=True, to="api.action", verbose_name="actions")),
                (
                    "field_report",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="actions_taken",
                        to="api.fieldreport",
                        verbose_name="field report",
                    ),
                ),
            ],
            options={
                "verbose_name": "actions taken",
                "verbose_name_plural": "all actions taken",
            },
        ),
        migrations.CreateModel(
            name="Appeal",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("aid", models.CharField(max_length=20, verbose_name="appeal ID")),
                ("name", models.CharField(max_length=100, verbose_name="name")),
                (
                    "atype",
                    models.IntegerField(
                        choices=[(0, "DREF"), (1, "Emergency Appeal"), (2, "International Appeal"), (3, "Forecast Based Action")],
                        default=0,
                        verbose_name="appeal type",
                    ),
                ),
                (
                    "status",
                    models.IntegerField(
                        choices=[(0, "Active"), (1, "Closed"), (2, "Frozen"), (3, "Archived")], default=0, verbose_name="status"
                    ),
                ),
                ("code", models.CharField(max_length=20, null=True, unique=True, verbose_name="code")),
                ("sector", models.CharField(blank=True, max_length=100, verbose_name="sector")),
                ("num_beneficiaries", models.IntegerField(default=0, verbose_name="number of beneficiaries")),
                (
                    "amount_requested",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=12, verbose_name="amount requested"),
                ),
                (
                    "amount_funded",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=12, verbose_name="amount funded"),
                ),
                ("start_date", models.DateTimeField(null=True, verbose_name="start date")),
                ("end_date", models.DateTimeField(null=True, verbose_name="end date")),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="created at")),
                ("modified_at", models.DateTimeField(auto_now=True, verbose_name="modified at")),
                (
                    "country",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to="api.country", verbose_name="country"
                    ),
                ),
                (
                    "dtype",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.disastertype",
                        verbose_name="disaster type",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="appeals",
                        to="api.event",
                        verbose_name="event",
                    ),
                ),
                (
                    "region",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to="api.region", verbose_name="region"
                    ),
                ),
                ("needs_confirmation", models.BooleanField(default=False, verbose_name="needs confirmation?")),
                ("previous_update", models.DateTimeField(blank=True, null=True, verbose_name="previous update")),
                ("real_data_update", models.DateTimeField(blank=True, null=True, verbose_name="real data update")),
            ],
            options={
                "ordering": ("-start_date", "-end_date"),
                "verbose_name": "appeal",
                "verbose_name_plural": "appeals",
            },
        ),
        migrations.CreateModel(
            name="AppealDocument",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(verbose_name="created at")),
                ("name", models.CharField(max_length=100, verbose_name="name")),
                (
                    "document",
                    models.FileField(blank=True, null=True, upload_to=api.models.appeal_document_path, verbose_name="document"),
                ),
                ("document_url", models.URLField(blank=True, verbose_name="document url")),
                (
                    "appeal",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.appeal", verbose_name="appeal"),
                ),
            ],
            options={
                "verbose_name": "appeal document",
                "verbose_name_plural": "appeal documents",
            },
        ),
        migrations.CreateModel(
            name="CountryContact",
            fields=[
                (
                    "admincontact_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.admincontact",
                    ),
                ),
                (
                    "country",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contacts",
                        to="api.country",
                        verbose_name="country",
                    ),
                ),
            ],
            options={
                "verbose_name": "country contact",
                "verbose_name_plural": "country contacts",
            },
            bases=("api.admincontact",),
        ),
        migrations.CreateModel(
            name="CountryLink",
            fields=[
                (
                    "adminlink_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.adminlink",
                    ),
                ),
                (
                    "country",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="links",
                        to="api.country",
                        verbose_name="country",
                    ),
                ),
            ],
            options={
                "verbose_name": "country link",
                "verbose_name_plural": "country links",
            },
            bases=("api.adminlink",),
        ),
        migrations.CreateModel(
            name="EventContact",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("ctype", models.CharField(blank=True, max_length=100, verbose_name="type")),
                ("name", models.CharField(max_length=100, verbose_name="name")),
                ("title", models.CharField(max_length=300, verbose_name="title")),
                ("email", models.CharField(max_length=300, verbose_name="email")),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="contacts", to="api.event", verbose_name="event"
                    ),
                ),
                ("phone", models.CharField(blank=True, max_length=100, null=True, verbose_name="phone")),
            ],
            options={
                "verbose_name": "event contact",
                "verbose_name_plural": "event contacts",
            },
        ),
        migrations.CreateModel(
            name="FieldReportContact",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("ctype", models.CharField(blank=True, max_length=100, verbose_name="type")),
                ("name", models.CharField(max_length=100, verbose_name="name")),
                ("title", models.CharField(max_length=300, verbose_name="title")),
                ("email", models.CharField(max_length=300, verbose_name="email")),
                (
                    "field_report",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contacts",
                        to="api.fieldreport",
                        verbose_name="field report",
                    ),
                ),
                ("phone", models.CharField(blank=True, max_length=50, verbose_name="phone")),
            ],
            options={
                "verbose_name": "field report contanct",
                "verbose_name_plural": "field report contancts",
            },
        ),
        migrations.CreateModel(
            name="GDACSEvent",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("eventid", models.CharField(max_length=12, verbose_name="event id")),
                ("title", models.TextField(verbose_name="title")),
                ("description", models.TextField(verbose_name="description")),
                ("image", models.URLField(null=True, verbose_name="image")),
                ("report", models.URLField(null=True, verbose_name="report")),
                ("publication_date", models.DateTimeField(verbose_name="publication date")),
                ("year", models.IntegerField(verbose_name="year")),
                ("lat", models.FloatField(verbose_name="latitude")),
                ("lon", models.FloatField(verbose_name="longitude")),
                ("event_type", models.CharField(max_length=16, verbose_name="event type")),
                (
                    "alert_level",
                    models.IntegerField(
                        choices=[(0, "Yellow"), (1, "Orange"), (2, "Red")], default=0, verbose_name="alert level"
                    ),
                ),
                ("alert_score", models.CharField(max_length=16, null=True, verbose_name="alert score")),
                ("severity", models.TextField(verbose_name="severity")),
                ("severity_unit", models.CharField(max_length=16, verbose_name="severity unit")),
                ("severity_value", models.CharField(max_length=16, verbose_name="severity value")),
                ("population_unit", models.CharField(max_length=16, verbose_name="population unit")),
                ("population_value", models.CharField(max_length=16, verbose_name="population value")),
                ("vulnerability", models.FloatField(verbose_name="vulnerability")),
                ("country_text", models.TextField(verbose_name="country text")),
                ("countries", models.ManyToManyField(to="api.country", verbose_name="countries")),
            ],
            options={
                "verbose_name": "gdacs event",
                "verbose_name_plural": "gdacs events",
            },
        ),
        migrations.CreateModel(
            name="KeyFigure",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("number", models.CharField(help_text="key figure metric", max_length=100, verbose_name="number")),
                ("deck", models.CharField(help_text="key figure units", max_length=50, verbose_name="deck")),
                (
                    "source",
                    models.CharField(help_text="key figure website link, publication", max_length=256, verbose_name="source"),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="key_figures",
                        to="api.event",
                        verbose_name="event",
                    ),
                ),
            ],
            options={
                "verbose_name": "key figure",
                "verbose_name_plural": "key figures",
            },
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "user",
                    models.OneToOneField(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="profile",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
                ("org", models.CharField(blank=True, max_length=100, verbose_name="organization")),
                (
                    "org_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("NTLS", "National Society"),
                            ("DLGN", "Delegation"),
                            ("SCRT", "Secretariat"),
                            ("ICRC", "ICRC"),
                            ("OTHR", "Other"),
                        ],
                        max_length=4,
                        verbose_name="organization type",
                    ),
                ),
                ("city", models.CharField(blank=True, max_length=100, null=True, verbose_name="city")),
                ("department", models.CharField(blank=True, max_length=100, null=True, verbose_name="department")),
                ("position", models.CharField(blank=True, max_length=100, null=True, verbose_name="position")),
                ("phone_number", models.CharField(blank=True, max_length=100, null=True, verbose_name="phone number")),
                (
                    "country",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to="api.country", verbose_name="country"
                    ),
                ),
            ],
            options={
                "verbose_name": "user profile",
                "verbose_name_plural": "user profiles",
            },
        ),
        migrations.CreateModel(
            name="SituationReport",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="created at")),
                ("name", models.CharField(max_length=100, verbose_name="name")),
                (
                    "document",
                    models.FileField(blank=True, null=True, upload_to=api.models.sitrep_document_path, verbose_name="document"),
                ),
                ("document_url", models.URLField(blank=True, verbose_name="document url")),
                ("event", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.event", verbose_name="event")),
                (
                    "visibility",
                    models.IntegerField(
                        choices=[(1, "RCRC Movement"), (2, "IFRC Secretariat"), (3, "Public"), (4, "IFRC and NS")],
                        default=1,
                        verbose_name="visibility",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="situation_reports",
                        to="api.situationreporttype",
                        verbose_name="type",
                    ),
                ),
                (
                    "is_pinned",
                    models.BooleanField(default=False, help_text="pin this report at the top", verbose_name="is pinned?"),
                ),
            ],
            options={
                "verbose_name": "situation report",
                "verbose_name_plural": "situation reports",
            },
        ),
        migrations.CreateModel(
            name="Source",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("spec", models.TextField(blank=True, verbose_name="spec")),
                (
                    "field_report",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sources",
                        to="api.fieldreport",
                        verbose_name="field report",
                    ),
                ),
                (
                    "stype",
                    models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="api.sourcetype", verbose_name="type"),
                ),
            ],
            options={
                "verbose_name": "source",
                "verbose_name_plural": "sources",
            },
        ),
        migrations.CreateModel(
            name="CountryKeyFigure",
            fields=[
                (
                    "adminkeyfigure_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="api.adminkeyfigure",
                    ),
                ),
                (
                    "country",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="key_figures",
                        to="api.country",
                        verbose_name="country",
                    ),
                ),
            ],
            options={
                "verbose_name": "country key figure",
                "verbose_name_plural": "country key figures",
            },
            bases=("api.adminkeyfigure",),
        ),
        migrations.CreateModel(
            name="CountrySnippet",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("snippet", models.TextField(blank=True, null=True, verbose_name="snippet")),
                ("image", models.ImageField(blank=True, null=True, upload_to="countries/%Y/%m/%d/", verbose_name="image")),
                (
                    "visibility",
                    models.IntegerField(
                        choices=[(1, "RCRC Movement"), (2, "IFRC Secretariat"), (3, "Public"), (4, "IFRC and NS")],
                        default=3,
                        verbose_name="visibility",
                    ),
                ),
                (
                    "country",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="snippets",
                        to="api.country",
                        verbose_name="country",
                    ),
                ),
                (
                    "position",
                    models.IntegerField(
                        choices=[(1, "Top"), (2, "High"), (3, "Middle"), (4, "Low"), (5, "Bottom")],
                        default=3,
                        verbose_name="position",
                    ),
                ),
            ],
            options={
                "ordering": ("position", "id"),
                "verbose_name": "country snippet",
                "verbose_name_plural": "country snippets",
            },
        ),
        migrations.CreateModel(
            name="Snippet",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("snippet", models.TextField(blank=True, null=True, verbose_name="snippet")),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="snippets", to="api.event", verbose_name="event"
                    ),
                ),
                (
                    "image",
                    models.ImageField(blank=True, null=True, upload_to=api.models.snippet_image_path, verbose_name="image"),
                ),
                (
                    "visibility",
                    models.IntegerField(
                        choices=[(1, "RCRC Movement"), (2, "IFRC Secretariat"), (3, "Public"), (4, "IFRC and NS")],
                        default=3,
                        verbose_name="visibility",
                    ),
                ),
                (
                    "position",
                    models.IntegerField(
                        choices=[(1, "Top"), (2, "High"), (3, "Middle"), (4, "Low"), (5, "Bottom")],
                        default=3,
                        verbose_name="position",
                    ),
                ),
                ("tab", models.IntegerField(choices=[(1, "Tab 1"), (2, "Tab 2"), (3, "Tab 3")], default=1, verbose_name="tab")),
            ],
            options={
                "ordering": ("position", "id"),
                "verbose_name": "snippet",
                "verbose_name_plural": "snippets",
            },
        ),
        django.contrib.postgres.operations.CreateExtension(
            name="postgis",
        ),
        migrations.AddField(
            model_name="country",
            name="bbox",
            field=django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=4326),
        ),
        migrations.AddField(
            model_name="country",
            name="centroid",
            field=django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326),
        ),
        migrations.AddField(
            model_name="country",
            name="geom",
            field=django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326),
        ),
        migrations.AddField(
            model_name="district",
            name="bbox",
            field=django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=4326),
        ),
        migrations.AddField(
            model_name="district",
            name="centroid",
            field=django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326),
        ),
        migrations.AddField(
            model_name="district",
            name="geom",
            field=django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326),
        ),
        # migrations.RunPython(
        #     code=api.migrations.0077_auto_20200721_1051.delete_idn,
        # ),
        migrations.AlterField(
            model_name="district",
            name="country_iso",
            field=models.CharField(max_length=2, null=True, verbose_name="country ISO2"),
        ),
        migrations.AddField(
            model_name="country",
            name="independent",
            field=models.BooleanField(default=None, help_text="Is this an independent country?"),
        ),
        migrations.AddField(
            model_name="region",
            name="bbox",
            field=django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=4326),
        ),
        migrations.AddField(
            model_name="profile",
            name="last_frontend_login",
            field=models.DateTimeField(blank=True, null=True, verbose_name="last frontend login"),
        ),
        migrations.RemoveField(
            model_name="fieldreport",
            name="cases",
        ),
        migrations.RemoveField(
            model_name="fieldreport",
            name="confirmed_cases",
        ),
        migrations.RemoveField(
            model_name="fieldreport",
            name="health_min_cases",
        ),
        migrations.RemoveField(
            model_name="fieldreport",
            name="health_min_confirmed_cases",
        ),
        migrations.RemoveField(
            model_name="fieldreport",
            name="health_min_num_dead",
        ),
        migrations.RemoveField(
            model_name="fieldreport",
            name="health_min_probable_cases",
        ),
        migrations.RemoveField(
            model_name="fieldreport",
            name="health_min_suspected_cases",
        ),
        migrations.RemoveField(
            model_name="fieldreport",
            name="other_cases",
        ),
        migrations.RemoveField(
            model_name="fieldreport",
            name="other_confirmed_cases",
        ),
        migrations.RemoveField(
            model_name="fieldreport",
            name="other_probable_cases",
        ),
        migrations.RemoveField(
            model_name="fieldreport",
            name="other_suspected_cases",
        ),
        migrations.RemoveField(
            model_name="fieldreport",
            name="probable_cases",
        ),
        migrations.RemoveField(
            model_name="fieldreport",
            name="suspected_cases",
        ),
        migrations.RemoveField(
            model_name="fieldreport",
            name="who_cases",
        ),
        migrations.RemoveField(
            model_name="fieldreport",
            name="who_confirmed_cases",
        ),
        migrations.RemoveField(
            model_name="fieldreport",
            name="who_num_dead",
        ),
        migrations.RemoveField(
            model_name="fieldreport",
            name="who_probable_cases",
        ),
        migrations.RemoveField(
            model_name="fieldreport",
            name="who_suspected_cases",
        ),
        migrations.AddField(
            model_name="action",
            name="name_ar",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="action",
            name="name_en",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="action",
            name="name_es",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="action",
            name="name_fr",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="actionstaken",
            name="summary_ar",
            field=models.TextField(blank=True, null=True, verbose_name="summary"),
        ),
        migrations.AddField(
            model_name="actionstaken",
            name="summary_en",
            field=models.TextField(blank=True, null=True, verbose_name="summary"),
        ),
        migrations.AddField(
            model_name="actionstaken",
            name="summary_es",
            field=models.TextField(blank=True, null=True, verbose_name="summary"),
        ),
        migrations.AddField(
            model_name="actionstaken",
            name="summary_fr",
            field=models.TextField(blank=True, null=True, verbose_name="summary"),
        ),
        migrations.AddField(
            model_name="appeal",
            name="name_ar",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="appeal",
            name="name_en",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="appeal",
            name="name_es",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="appeal",
            name="name_fr",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="appealdocument",
            name="name_ar",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="appealdocument",
            name="name_en",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="appealdocument",
            name="name_es",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="appealdocument",
            name="name_fr",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="country",
            name="name_ar",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="country",
            name="name_en",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="country",
            name="name_es",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="country",
            name="name_fr",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="country",
            name="overview_ar",
            field=models.TextField(blank=True, null=True, verbose_name="overview"),
        ),
        migrations.AddField(
            model_name="country",
            name="overview_en",
            field=models.TextField(blank=True, null=True, verbose_name="overview"),
        ),
        migrations.AddField(
            model_name="country",
            name="overview_es",
            field=models.TextField(blank=True, null=True, verbose_name="overview"),
        ),
        migrations.AddField(
            model_name="country",
            name="overview_fr",
            field=models.TextField(blank=True, null=True, verbose_name="overview"),
        ),
        migrations.AddField(
            model_name="countrysnippet",
            name="snippet_ar",
            field=tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet"),
        ),
        migrations.AddField(
            model_name="countrysnippet",
            name="snippet_en",
            field=tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet"),
        ),
        migrations.AddField(
            model_name="countrysnippet",
            name="snippet_es",
            field=tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet"),
        ),
        migrations.AddField(
            model_name="countrysnippet",
            name="snippet_fr",
            field=tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet"),
        ),
        migrations.AddField(
            model_name="disastertype",
            name="name_ar",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="disastertype",
            name="name_en",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="disastertype",
            name="name_es",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="disastertype",
            name="name_fr",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="disastertype",
            name="summary_ar",
            field=models.TextField(null=True, verbose_name="summary"),
        ),
        migrations.AddField(
            model_name="disastertype",
            name="summary_en",
            field=models.TextField(null=True, verbose_name="summary"),
        ),
        migrations.AddField(
            model_name="disastertype",
            name="summary_es",
            field=models.TextField(null=True, verbose_name="summary"),
        ),
        migrations.AddField(
            model_name="disastertype",
            name="summary_fr",
            field=models.TextField(null=True, verbose_name="summary"),
        ),
        migrations.AddField(
            model_name="event",
            name="name_ar",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="event",
            name="name_en",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="event",
            name="name_es",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="event",
            name="name_fr",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="event",
            name="slug_ar",
            field=models.CharField(
                blank=True,
                default=None,
                editable=False,
                help_text="Optional string for a clean URL. For example, go.ifrc.org/emergencies/hurricane-katrina-2019. The string cannot start with a number and is forced to be lowercase. Recommend using hyphens over underscores. Special characters like # is not allowed.",
                max_length=50,
                null=True,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        re.compile("^[-a-zA-Z0-9_]+\\Z"),
                        "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.",
                        "invalid",
                    ),
                    api.utils.validate_slug_number,
                ],
                verbose_name="slug",
            ),
        ),
        migrations.AddField(
            model_name="event",
            name="slug_en",
            field=models.CharField(
                blank=True,
                default=None,
                editable=False,
                help_text="Optional string for a clean URL. For example, go.ifrc.org/emergencies/hurricane-katrina-2019. The string cannot start with a number and is forced to be lowercase. Recommend using hyphens over underscores. Special characters like # is not allowed.",
                max_length=50,
                null=True,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        re.compile("^[-a-zA-Z0-9_]+\\Z"),
                        "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.",
                        "invalid",
                    ),
                    api.utils.validate_slug_number,
                ],
                verbose_name="slug",
            ),
        ),
        migrations.AddField(
            model_name="event",
            name="slug_es",
            field=models.CharField(
                blank=True,
                default=None,
                editable=False,
                help_text="Optional string for a clean URL. For example, go.ifrc.org/emergencies/hurricane-katrina-2019. The string cannot start with a number and is forced to be lowercase. Recommend using hyphens over underscores. Special characters like # is not allowed.",
                max_length=50,
                null=True,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        re.compile("^[-a-zA-Z0-9_]+\\Z"),
                        "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.",
                        "invalid",
                    ),
                    api.utils.validate_slug_number,
                ],
                verbose_name="slug",
            ),
        ),
        migrations.AddField(
            model_name="event",
            name="slug_fr",
            field=models.CharField(
                blank=True,
                default=None,
                editable=False,
                help_text="Optional string for a clean URL. For example, go.ifrc.org/emergencies/hurricane-katrina-2019. The string cannot start with a number and is forced to be lowercase. Recommend using hyphens over underscores. Special characters like # is not allowed.",
                max_length=50,
                null=True,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        re.compile("^[-a-zA-Z0-9_]+\\Z"),
                        "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.",
                        "invalid",
                    ),
                    api.utils.validate_slug_number,
                ],
                verbose_name="slug",
            ),
        ),
        migrations.AddField(
            model_name="fieldreport",
            name="actions_others_ar",
            field=models.TextField(blank=True, null=True, verbose_name="actions taken (others)"),
        ),
        migrations.AddField(
            model_name="fieldreport",
            name="actions_others_en",
            field=models.TextField(blank=True, null=True, verbose_name="actions taken (others)"),
        ),
        migrations.AddField(
            model_name="fieldreport",
            name="actions_others_es",
            field=models.TextField(blank=True, null=True, verbose_name="actions taken (others)"),
        ),
        migrations.AddField(
            model_name="fieldreport",
            name="actions_others_fr",
            field=models.TextField(blank=True, null=True, verbose_name="actions taken (others)"),
        ),
        migrations.AddField(
            model_name="fieldreport",
            name="description_ar",
            field=tinymce.models.HTMLField(blank=True, default="", null=True, verbose_name="description"),
        ),
        migrations.AddField(
            model_name="fieldreport",
            name="description_en",
            field=tinymce.models.HTMLField(blank=True, default="", null=True, verbose_name="description"),
        ),
        migrations.AddField(
            model_name="fieldreport",
            name="description_es",
            field=tinymce.models.HTMLField(blank=True, default="", null=True, verbose_name="description"),
        ),
        migrations.AddField(
            model_name="fieldreport",
            name="description_fr",
            field=tinymce.models.HTMLField(blank=True, default="", null=True, verbose_name="description"),
        ),
        migrations.AddField(
            model_name="fieldreport",
            name="other_sources_ar",
            field=models.TextField(blank=True, default="", null=True, verbose_name="sources (other)"),
        ),
        migrations.AddField(
            model_name="fieldreport",
            name="other_sources_en",
            field=models.TextField(blank=True, default="", null=True, verbose_name="sources (other)"),
        ),
        migrations.AddField(
            model_name="fieldreport",
            name="other_sources_es",
            field=models.TextField(blank=True, default="", null=True, verbose_name="sources (other)"),
        ),
        migrations.AddField(
            model_name="fieldreport",
            name="other_sources_fr",
            field=models.TextField(blank=True, default="", null=True, verbose_name="sources (other)"),
        ),
        migrations.AddField(
            model_name="fieldreport",
            name="summary_ar",
            field=models.TextField(blank=True, null=True, verbose_name="summary"),
        ),
        migrations.AddField(
            model_name="fieldreport",
            name="summary_en",
            field=models.TextField(blank=True, null=True, verbose_name="summary"),
        ),
        migrations.AddField(
            model_name="fieldreport",
            name="summary_es",
            field=models.TextField(blank=True, null=True, verbose_name="summary"),
        ),
        migrations.AddField(
            model_name="fieldreport",
            name="summary_fr",
            field=models.TextField(blank=True, null=True, verbose_name="summary"),
        ),
        migrations.AddField(
            model_name="gdacsevent",
            name="country_text_ar",
            field=models.TextField(null=True, verbose_name="country text"),
        ),
        migrations.AddField(
            model_name="gdacsevent",
            name="country_text_en",
            field=models.TextField(null=True, verbose_name="country text"),
        ),
        migrations.AddField(
            model_name="gdacsevent",
            name="country_text_es",
            field=models.TextField(null=True, verbose_name="country text"),
        ),
        migrations.AddField(
            model_name="gdacsevent",
            name="country_text_fr",
            field=models.TextField(null=True, verbose_name="country text"),
        ),
        migrations.AddField(
            model_name="gdacsevent",
            name="description_ar",
            field=models.TextField(null=True, verbose_name="description"),
        ),
        migrations.AddField(
            model_name="gdacsevent",
            name="description_en",
            field=models.TextField(null=True, verbose_name="description"),
        ),
        migrations.AddField(
            model_name="gdacsevent",
            name="description_es",
            field=models.TextField(null=True, verbose_name="description"),
        ),
        migrations.AddField(
            model_name="gdacsevent",
            name="description_fr",
            field=models.TextField(null=True, verbose_name="description"),
        ),
        migrations.AddField(
            model_name="gdacsevent",
            name="title_ar",
            field=models.TextField(null=True, verbose_name="title"),
        ),
        migrations.AddField(
            model_name="gdacsevent",
            name="title_en",
            field=models.TextField(null=True, verbose_name="title"),
        ),
        migrations.AddField(
            model_name="gdacsevent",
            name="title_es",
            field=models.TextField(null=True, verbose_name="title"),
        ),
        migrations.AddField(
            model_name="gdacsevent",
            name="title_fr",
            field=models.TextField(null=True, verbose_name="title"),
        ),
        migrations.AddField(
            model_name="regionsnippet",
            name="snippet_ar",
            field=tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet"),
        ),
        migrations.AddField(
            model_name="regionsnippet",
            name="snippet_en",
            field=tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet"),
        ),
        migrations.AddField(
            model_name="regionsnippet",
            name="snippet_es",
            field=tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet"),
        ),
        migrations.AddField(
            model_name="regionsnippet",
            name="snippet_fr",
            field=tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet"),
        ),
        migrations.AddField(
            model_name="situationreport",
            name="name_ar",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="situationreport",
            name="name_en",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="situationreport",
            name="name_es",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="situationreport",
            name="name_fr",
            field=models.CharField(max_length=100, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="snippet",
            name="snippet_ar",
            field=tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet"),
        ),
        migrations.AddField(
            model_name="snippet",
            name="snippet_en",
            field=tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet"),
        ),
        migrations.AddField(
            model_name="snippet",
            name="snippet_es",
            field=tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet"),
        ),
        migrations.AddField(
            model_name="snippet",
            name="snippet_fr",
            field=tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet"),
        ),
        migrations.AlterField(
            model_name="countrysnippet",
            name="snippet",
            field=tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet"),
        ),
        migrations.AlterField(
            model_name="regionsnippet",
            name="snippet",
            field=tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet"),
        ),
        migrations.AlterField(
            model_name="snippet",
            name="snippet",
            field=tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet"),
        ),
        migrations.AlterModelOptions(
            name="fieldreportcontact",
            options={"verbose_name": "field report contacts", "verbose_name_plural": "field report contacts"},
        ),
        migrations.AddField(
            model_name="country",
            name="society_name_ar",
            field=models.TextField(blank=True, null=True, verbose_name="society name"),
        ),
        migrations.AddField(
            model_name="country",
            name="society_name_en",
            field=models.TextField(blank=True, null=True, verbose_name="society name"),
        ),
        migrations.AddField(
            model_name="country",
            name="society_name_es",
            field=models.TextField(blank=True, null=True, verbose_name="society name"),
        ),
        migrations.AddField(
            model_name="country",
            name="society_name_fr",
            field=models.TextField(blank=True, null=True, verbose_name="society name"),
        ),
        migrations.AddField(
            model_name="region",
            name="label",
            field=models.CharField(blank=True, max_length=150, verbose_name="name of the region"),
        ),
        # migrations.RunPython(
        #     code=api.migrations.0084_region_label.add_region_labels,
        # ),
        migrations.AddField(
            model_name="country",
            name="is_deprecated",
            field=models.BooleanField(default=False, help_text="Is this an active, valid country?"),
        ),
        migrations.AddField(
            model_name="district",
            name="is_deprecated",
            field=models.BooleanField(default=False, help_text="Is this an active, valid district?"),
        ),
        migrations.AlterField(
            model_name="appealdocument",
            name="document",
            field=models.FileField(blank=True, null=True, upload_to=api.models.appeal_document_path, verbose_name="document"),
        ),
        migrations.AlterField(
            model_name="country",
            name="logo",
            field=models.FileField(
                blank=True,
                null=True,
                upload_to=api.models.logo_document_path,
                validators=[django.core.validators.FileExtensionValidator(allowed_extensions=["png", "jpg", "gif"])],
                verbose_name="logo",
            ),
        ),
        migrations.AlterField(
            model_name="countrysnippet",
            name="image",
            field=models.ImageField(blank=True, null=True, upload_to="countries/%Y/%m/%d/", verbose_name="image"),
        ),
        migrations.AlterField(
            model_name="regionsnippet",
            name="image",
            field=models.ImageField(blank=True, null=True, upload_to="regions/%Y/%m/%d/", verbose_name="image"),
        ),
        migrations.AlterField(
            model_name="situationreport",
            name="document",
            field=models.FileField(blank=True, null=True, upload_to=api.models.sitrep_document_path, verbose_name="document"),
        ),
        migrations.AlterField(
            model_name="snippet",
            name="image",
            field=models.ImageField(blank=True, null=True, upload_to=api.models.snippet_image_path, verbose_name="image"),
        ),
        migrations.AddField(
            model_name="situationreporttype",
            name="type_ar",
            field=models.CharField(max_length=150, null=True, verbose_name="type"),
        ),
        migrations.AddField(
            model_name="situationreporttype",
            name="type_en",
            field=models.CharField(max_length=150, null=True, verbose_name="type"),
        ),
        migrations.AddField(
            model_name="situationreporttype",
            name="type_es",
            field=models.CharField(max_length=150, null=True, verbose_name="type"),
        ),
        migrations.AddField(
            model_name="situationreporttype",
            name="type_fr",
            field=models.CharField(max_length=150, null=True, verbose_name="type"),
        ),
        migrations.AlterField(
            model_name="action",
            name="name",
            field=models.CharField(max_length=400, verbose_name="name"),
        ),
        migrations.AlterField(
            model_name="action",
            name="name_ar",
            field=models.CharField(max_length=400, null=True, verbose_name="name"),
        ),
        migrations.AlterField(
            model_name="action",
            name="name_en",
            field=models.CharField(max_length=400, null=True, verbose_name="name"),
        ),
        migrations.AlterField(
            model_name="action",
            name="name_es",
            field=models.CharField(max_length=400, null=True, verbose_name="name"),
        ),
        migrations.AlterField(
            model_name="action",
            name="name_fr",
            field=models.CharField(max_length=400, null=True, verbose_name="name"),
        ),
        migrations.AlterField(
            model_name="situationreporttype",
            name="type",
            field=models.CharField(max_length=150, verbose_name="type"),
        ),
        migrations.AddField(
            model_name="region",
            name="label_ar",
            field=models.CharField(blank=True, max_length=250, null=True, verbose_name="name of the region"),
        ),
        migrations.AddField(
            model_name="region",
            name="label_en",
            field=models.CharField(blank=True, max_length=250, null=True, verbose_name="name of the region"),
        ),
        migrations.AddField(
            model_name="region",
            name="label_es",
            field=models.CharField(blank=True, max_length=250, null=True, verbose_name="name of the region"),
        ),
        migrations.AddField(
            model_name="region",
            name="label_fr",
            field=models.CharField(blank=True, max_length=250, null=True, verbose_name="name of the region"),
        ),
        migrations.AlterField(
            model_name="region",
            name="label",
            field=models.CharField(blank=True, max_length=250, verbose_name="name of the region"),
        ),
        migrations.AddField(
            model_name="country",
            name="additional_tab_name",
            field=models.CharField(blank=True, max_length=100, verbose_name="Label for Additional Tab"),
        ),
        migrations.AddField(
            model_name="region",
            name="additional_tab_name",
            field=models.CharField(blank=True, max_length=100, verbose_name="Label for Additional Tab"),
        ),
        migrations.AlterField(
            model_name="event",
            name="num_displaced",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of displaced"),
        ),
        migrations.AddField(
            model_name="regionlink",
            name="show_in_go",
            field=models.BooleanField(default=False, help_text="Show link contents within GO"),
        ),
        migrations.AddField(
            model_name="country",
            name="nsi_annual_fdrs_reporting",
            field=models.BooleanField(verbose_name="Annual Reporting to FDRS"),
        ),
        migrations.AddField(
            model_name="country",
            name="nsi_branches",
            field=models.IntegerField(blank=True, null=True, verbose_name="Branches"),
        ),
        migrations.AddField(
            model_name="country",
            name="nsi_cmc_dashboard_compliance",
            field=models.BooleanField(verbose_name="Complying with CMC Dashboard"),
        ),
        migrations.AddField(
            model_name="country",
            name="nsi_domestically_generated_income",
            field=models.BooleanField(verbose_name=">50% Domestically Generated Income"),
        ),
        migrations.AddField(
            model_name="country",
            name="nsi_expenditures",
            field=models.IntegerField(blank=True, null=True, verbose_name="Expenditures (CHF)"),
        ),
        migrations.AddField(
            model_name="country",
            name="nsi_gov_financial_support",
            field=models.BooleanField(verbose_name="Gov Financial Support"),
        ),
        migrations.AddField(
            model_name="country",
            name="nsi_income",
            field=models.IntegerField(blank=True, null=True, verbose_name="Income (CHF)"),
        ),
        migrations.AddField(
            model_name="country",
            name="nsi_policy_implementation",
            field=models.BooleanField(verbose_name="Your Policy / Programme Implementation"),
        ),
        migrations.AddField(
            model_name="country",
            name="nsi_risk_management_framework",
            field=models.BooleanField(verbose_name="Risk Management Framework"),
        ),
        migrations.AddField(
            model_name="country",
            name="nsi_staff",
            field=models.IntegerField(blank=True, null=True, verbose_name="Staff"),
        ),
        migrations.AddField(
            model_name="country",
            name="nsi_trained_in_first_aid",
            field=models.IntegerField(blank=True, null=True, verbose_name="Trained in First Aid"),
        ),
        migrations.AddField(
            model_name="country",
            name="nsi_volunteers",
            field=models.IntegerField(blank=True, null=True, verbose_name="Volunteers"),
        ),
        migrations.AddField(
            model_name="country",
            name="nsi_youth",
            field=models.IntegerField(blank=True, null=True, verbose_name="Youth - 6-19 Yrs"),
        ),
        migrations.AlterField(
            model_name="event",
            name="num_displaced",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of displaced"),
        ),
        migrations.CreateModel(
            name="RegionEmergencySnippet",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(blank=True, max_length=255)),
                ("snippet", tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet")),
                ("snippet_en", tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet")),
                ("snippet_es", tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet")),
                ("snippet_fr", tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet")),
                ("snippet_ar", tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet")),
                (
                    "position",
                    models.IntegerField(
                        choices=[(1, "Top"), (2, "High"), (3, "Middle"), (4, "Low"), (5, "Bottom")],
                        default=3,
                        verbose_name="position",
                    ),
                ),
                (
                    "region",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="emergency_snippets",
                        to="api.region",
                        verbose_name="region",
                    ),
                ),
                ("title_ar", models.CharField(blank=True, max_length=255, null=True)),
                ("title_en", models.CharField(blank=True, max_length=255, null=True)),
                ("title_es", models.CharField(blank=True, max_length=255, null=True)),
                ("title_fr", models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                "verbose_name": "region emergencies snippet",
                "verbose_name_plural": "region emergencies snippets",
                "ordering": ("position", "id"),
            },
        ),
        migrations.CreateModel(
            name="RegionPreparednessSnippet",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(blank=True, max_length=255)),
                ("snippet", tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet")),
                ("snippet_en", tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet")),
                ("snippet_es", tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet")),
                ("snippet_fr", tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet")),
                ("snippet_ar", tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet")),
                (
                    "position",
                    models.IntegerField(
                        choices=[(1, "Top"), (2, "High"), (3, "Middle"), (4, "Low"), (5, "Bottom")],
                        default=3,
                        verbose_name="position",
                    ),
                ),
                (
                    "region",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="preparedness_snippets",
                        to="api.region",
                        verbose_name="region",
                    ),
                ),
                ("title_ar", models.CharField(blank=True, max_length=255, null=True)),
                ("title_en", models.CharField(blank=True, max_length=255, null=True)),
                ("title_es", models.CharField(blank=True, max_length=255, null=True)),
                ("title_fr", models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                "verbose_name": "region preparedness snippet",
                "verbose_name_plural": "region preparedness snippets",
                "ordering": ("position", "id"),
            },
        ),
        migrations.CreateModel(
            name="RegionProfileSnippet",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(blank=True, max_length=255)),
                ("snippet", tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet")),
                ("snippet_en", tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet")),
                ("snippet_es", tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet")),
                ("snippet_fr", tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet")),
                ("snippet_ar", tinymce.models.HTMLField(blank=True, null=True, verbose_name="snippet")),
                (
                    "position",
                    models.IntegerField(
                        choices=[(1, "Top"), (2, "High"), (3, "Middle"), (4, "Low"), (5, "Bottom")],
                        default=3,
                        verbose_name="position",
                    ),
                ),
                (
                    "region",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile_snippets",
                        to="api.region",
                        verbose_name="region",
                    ),
                ),
                ("title_ar", models.CharField(blank=True, max_length=255, null=True)),
                ("title_en", models.CharField(blank=True, max_length=255, null=True)),
                ("title_es", models.CharField(blank=True, max_length=255, null=True)),
                ("title_fr", models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                "verbose_name": "region profile snippet",
                "verbose_name_plural": "region profile snippets",
                "ordering": ("position", "id"),
            },
        ),
        migrations.AddField(
            model_name="region",
            name="additional_tab_name_ar",
            field=models.CharField(blank=True, max_length=100, null=True, verbose_name="Label for Additional Tab"),
        ),
        migrations.AddField(
            model_name="region",
            name="additional_tab_name_en",
            field=models.CharField(blank=True, max_length=100, null=True, verbose_name="Label for Additional Tab"),
        ),
        migrations.AddField(
            model_name="region",
            name="additional_tab_name_es",
            field=models.CharField(blank=True, max_length=100, null=True, verbose_name="Label for Additional Tab"),
        ),
        migrations.AddField(
            model_name="region",
            name="additional_tab_name_fr",
            field=models.CharField(blank=True, max_length=100, null=True, verbose_name="Label for Additional Tab"),
        ),
        migrations.AddField(
            model_name="country",
            name="wash_kit10",
            field=models.IntegerField(blank=True, null=True, verbose_name="WASH Kit10"),
        ),
        migrations.AddField(
            model_name="country",
            name="wash_kit2",
            field=models.IntegerField(blank=True, null=True, verbose_name="WASH Kit2"),
        ),
        migrations.AddField(
            model_name="country",
            name="wash_kit5",
            field=models.IntegerField(blank=True, null=True, verbose_name="WASH Kit5"),
        ),
        migrations.AddField(
            model_name="country",
            name="wash_ndrt_trained",
            field=models.IntegerField(blank=True, null=True, verbose_name="NDRT Trained"),
        ),
        migrations.AddField(
            model_name="country",
            name="wash_rdrt_trained",
            field=models.IntegerField(blank=True, null=True, verbose_name="RDRT Trained"),
        ),
        migrations.AddField(
            model_name="country",
            name="wash_staff_at_branch",
            field=models.IntegerField(blank=True, null=True, verbose_name="WASH Staff at Branch"),
        ),
        migrations.AddField(
            model_name="country",
            name="wash_staff_at_hq",
            field=models.IntegerField(blank=True, null=True, verbose_name="WASH Staff at HQ"),
        ),
        migrations.AddField(
            model_name="country",
            name="wash_total_staff",
            field=models.IntegerField(blank=True, null=True, verbose_name="Total WASH Staff"),
        ),
        migrations.AddField(
            model_name="country",
            name="additional_tab_name_ar",
            field=models.CharField(blank=True, max_length=100, null=True, verbose_name="Label for Additional Tab"),
        ),
        migrations.AddField(
            model_name="country",
            name="additional_tab_name_en",
            field=models.CharField(blank=True, max_length=100, null=True, verbose_name="Label for Additional Tab"),
        ),
        migrations.AddField(
            model_name="country",
            name="additional_tab_name_es",
            field=models.CharField(blank=True, max_length=100, null=True, verbose_name="Label for Additional Tab"),
        ),
        migrations.AddField(
            model_name="country",
            name="additional_tab_name_fr",
            field=models.CharField(blank=True, max_length=100, null=True, verbose_name="Label for Additional Tab"),
        ),
        migrations.AddField(
            model_name="country",
            name="fdrs",
            field=models.CharField(blank=True, max_length=6, null=True, verbose_name="FDRS"),
        ),
        # migrations.RunPython(
        #     code=api.migrations.0101_uppercase_iso.uppercase_iso,
        # ),
        migrations.AlterField(
            model_name="country",
            name="iso",
            field=models.CharField(
                max_length=2,
                null=True,
                validators=[django.core.validators.RegexValidator("^[A-Z]*$", "ISO must be uppercase")],
                verbose_name="ISO",
            ),
        ),
        migrations.AlterField(
            model_name="country",
            name="iso3",
            field=models.CharField(
                max_length=3,
                null=True,
                validators=[django.core.validators.RegexValidator("^[A-Z]*$", "ISO must be uppercase")],
                verbose_name="ISO3",
            ),
        ),
        migrations.RemoveField(
            model_name="district",
            name="country_iso",
        ),
        migrations.CreateModel(
            name="CountryGeoms",
            fields=[
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
                (
                    "country",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="api.country",
                        verbose_name="country",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DistrictGeoms",
            fields=[
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
                (
                    "district",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="api.district",
                        verbose_name="district",
                    ),
                ),
            ],
        ),
        migrations.RemoveField(
            model_name="country",
            name="geom",
        ),
        migrations.RemoveField(
            model_name="district",
            name="geom",
        ),
        migrations.AlterField(
            model_name="country",
            name="iso",
            field=models.CharField(
                blank=True,
                max_length=2,
                null=True,
                validators=[django.core.validators.RegexValidator("^[A-Z]*$", "ISO must be uppercase")],
                verbose_name="ISO",
            ),
        ),
        migrations.AlterField(
            model_name="country",
            name="iso3",
            field=models.CharField(
                blank=True,
                max_length=3,
                null=True,
                validators=[django.core.validators.RegexValidator("^[A-Z]*$", "ISO must be uppercase")],
                verbose_name="ISO3",
            ),
        ),
        migrations.AddField(
            model_name="event",
            name="hide_field_report_map",
            field=models.BooleanField(default=False, verbose_name="hide field report map"),
        ),
        migrations.AlterField(
            model_name="event",
            name="hide_attached_field_reports",
            field=models.BooleanField(default=False, verbose_name="hide field report numeric details"),
        ),
        migrations.AddField(
            model_name="fieldreport",
            name="epi_cases_since_last_fr",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of new cases since the last field report"),
        ),
        migrations.AddField(
            model_name="fieldreport",
            name="epi_deaths_since_last_fr",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of new deaths since last field report"),
        ),
        migrations.AddField(
            model_name="action",
            name="tooltip_text",
            field=models.TextField(blank="true", null=True, verbose_name="tooltip text"),
        ),
        migrations.AddField(
            model_name="fieldreport",
            name="epi_notes_since_last_fr",
            field=models.TextField(blank=True, null=True, verbose_name="notes"),
        ),
        migrations.AddField(
            model_name="fieldreport",
            name="notes_socioeco",
            field=models.TextField(blank=True, null=True, verbose_name="Description (Socioeconomic Interventions)"),
        ),
        migrations.AddField(
            model_name="fieldreport",
            name="notes_health",
            field=models.TextField(blank=True, null=True, verbose_name="Description (Health)"),
        ),
        migrations.AddField(
            model_name="fieldreport",
            name="notes_ns",
            field=models.TextField(blank=True, null=True, verbose_name="Description (NS Institutional Strengthening)"),
        ),
        migrations.CreateModel(
            name="ExternalPartner",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=200, verbose_name="name")),
                ("name_ar", models.CharField(max_length=200, null=True, verbose_name="name")),
                ("name_en", models.CharField(max_length=200, null=True, verbose_name="name")),
                ("name_es", models.CharField(max_length=200, null=True, verbose_name="name")),
                ("name_fr", models.CharField(max_length=200, null=True, verbose_name="name")),
            ],
            options={
                "verbose_name": "external partner",
                "verbose_name_plural": "external partners",
            },
        ),
        migrations.CreateModel(
            name="SupportedActivity",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=200, verbose_name="name")),
                ("name_ar", models.CharField(max_length=200, null=True, verbose_name="name")),
                ("name_en", models.CharField(max_length=200, null=True, verbose_name="name")),
                ("name_es", models.CharField(max_length=200, null=True, verbose_name="name")),
                ("name_fr", models.CharField(max_length=200, null=True, verbose_name="name")),
            ],
            options={
                "verbose_name": "supported activity",
                "verbose_name_plural": "supported activities",
            },
        ),
        migrations.AddField(
            model_name="fieldreport",
            name="external_partners",
            field=models.ManyToManyField(blank=True, to="api.externalpartner", verbose_name="external partners"),
        ),
        migrations.AddField(
            model_name="fieldreport",
            name="supported_activities",
            field=models.ManyToManyField(blank=True, to="api.supportedactivity", verbose_name="supported activities"),
        ),
        migrations.AddField(
            model_name="country",
            name="disputed",
            field=models.BooleanField(default=False, help_text="Is this country disputed?"),
        ),
        migrations.AddField(
            model_name="country",
            name="sovereign_state",
            field=models.ForeignKey(
                blank=True,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="api.country",
                verbose_name="Country ID of the Sovereign State",
            ),
        ),
        migrations.AddField(
            model_name="action",
            name="tooltip_text_ar",
            field=models.TextField(blank="true", null=True, verbose_name="tooltip text"),
        ),
        migrations.AddField(
            model_name="action",
            name="tooltip_text_en",
            field=models.TextField(blank="true", null=True, verbose_name="tooltip text"),
        ),
        migrations.AddField(
            model_name="action",
            name="tooltip_text_es",
            field=models.TextField(blank="true", null=True, verbose_name="tooltip text"),
        ),
        migrations.AddField(
            model_name="action",
            name="tooltip_text_fr",
            field=models.TextField(blank="true", null=True, verbose_name="tooltip text"),
        ),
        migrations.AddField(
            model_name="country",
            name="in_search",
            field=models.BooleanField(default=True, verbose_name="Include in Search"),
        ),
        migrations.CreateModel(
            name="MainContact",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("extent", models.CharField(max_length=300, verbose_name="extent")),
                ("extent_en", models.CharField(max_length=300, null=True, verbose_name="extent")),
                ("extent_es", models.CharField(max_length=300, null=True, verbose_name="extent")),
                ("extent_fr", models.CharField(max_length=300, null=True, verbose_name="extent")),
                ("extent_ar", models.CharField(max_length=300, null=True, verbose_name="extent")),
                ("name", models.CharField(max_length=300, verbose_name="name")),
                ("email", models.CharField(max_length=300, verbose_name="email")),
            ],
            options={
                "verbose_name": "main contact",
                "verbose_name_plural": "main contacts",
            },
        ),
        migrations.RemoveField(
            model_name="district",
            name="country_name",
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="ns_request_assistance",
            field=models.BooleanField(verbose_name="NS request assistance"),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="request_assistance",
            field=models.BooleanField(verbose_name="request assistance"),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="ns_request_assistance",
            field=models.BooleanField(default=None, verbose_name="NS request assistance"),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="request_assistance",
            field=models.BooleanField(default=None, verbose_name="request assistance"),
        ),
        migrations.CreateModel(
            name="ERPGUID",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "api_guid",
                    models.CharField(
                        help_text="Can be used to do a GET request to check on the microservice API side.", max_length=200
                    ),
                ),
                (
                    "field_report",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.fieldreport", verbose_name="field report"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GECCode",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("code", models.CharField(max_length=3, verbose_name="3 letter GEC code")),
                (
                    "country",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.country", verbose_name="country"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AppealFilter",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100, verbose_name="name")),
                ("value", models.CharField(max_length=1000, verbose_name="value")),
            ],
            options={
                "verbose_name": "appeal filter",
                "verbose_name_plural": "appeal filters",
            },
        ),
        migrations.CreateModel(
            name="AppealHistory",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("num_beneficiaries", models.IntegerField(default=0, verbose_name="number of beneficiaries")),
                (
                    "amount_requested",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=12, verbose_name="amount requested"),
                ),
                (
                    "amount_funded",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=12, verbose_name="amount funded"),
                ),
                ("valid_from", models.DateTimeField(null=True, verbose_name="valid_from")),
                ("valid_to", models.DateTimeField(null=True, verbose_name="valid_to")),
                ("aid", models.CharField(max_length=20, verbose_name="appeal ID")),
                ("start_date", models.DateTimeField(null=True, verbose_name="start date")),
                ("end_date", models.DateTimeField(null=True, verbose_name="end date")),
                (
                    "atype",
                    models.IntegerField(
                        choices=[(0, "DREF"), (1, "Emergency Appeal"), (2, "International Appeal"), (3, "Forecast Based Action")],
                        default=0,
                        verbose_name="appeal type",
                    ),
                ),
                (
                    "appeal",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to="api.appeal", verbose_name="appeal"
                    ),
                ),
                (
                    "country",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to="api.country", verbose_name="country"
                    ),
                ),
                (
                    "region",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to="api.region", verbose_name="region"
                    ),
                ),
            ],
            options={
                "verbose_name": "appealhistory",
                "verbose_name_plural": "appealhistories",
                "ordering": ("-start_date", "-end_date"),
            },
        ),
        migrations.RunSQL(
            sql=[
                "INSERT INTO api_appealhistory(appeal_id,valid_from, valid_to, num_beneficiaries, amount_requested, amount_funded, aid, start_date, end_date,atype, country_id, region_id) select id,'1900-01-01', '2200-01-01', num_beneficiaries, amount_requested, amount_funded, aid, start_date, end_date,atype, country_id, region_id from api_appeal"
            ],
            reverse_sql=["DELETE FROM api_appealhistory where valid_to = '2200-01-01'"],
        ),
        migrations.AddField(
            model_name="appealhistory",
            name="dtype",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, to="api.disastertype", verbose_name="disaster type"
            ),
        ),
        migrations.AddField(
            model_name="appealhistory",
            name="needs_confirmation",
            field=models.BooleanField(default=False, verbose_name="needs confirmation?"),
        ),
        migrations.AddField(
            model_name="appealhistory",
            name="status",
            field=models.IntegerField(
                choices=[(0, "Active"), (1, "Closed"), (2, "Frozen"), (3, "Archived")], default=0, verbose_name="status"
            ),
        ),
        migrations.AddField(
            model_name="appealhistory",
            name="code",
            field=models.CharField(max_length=20, null=True, verbose_name="code"),
        ),
        migrations.RunSQL(
            sql=[
                "UPDATE api_appealhistory SET dtype_id = api_appeal.dtype_id, status = api_appeal.status, needs_confirmation = api_appeal.needs_confirmation, code = api_appeal.code from api_appeal WHERE api_appeal.aid = api_appealhistory.aid"
            ],
            reverse_sql=["DELETE FROM api_appealhistory where valid_to = '2200-01-01'"],
        ),
        migrations.CreateModel(
            name="EventLink",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=200, verbose_name="title")),
                ("title_en", models.CharField(max_length=200, null=True, verbose_name="title")),
                ("title_es", models.CharField(max_length=200, null=True, verbose_name="title")),
                ("title_fr", models.CharField(max_length=200, null=True, verbose_name="title")),
                ("title_ar", models.CharField(max_length=200, null=True, verbose_name="title")),
                ("description", models.TextField(verbose_name="description")),
                ("description_en", models.TextField(null=True, verbose_name="description")),
                ("description_es", models.TextField(null=True, verbose_name="description")),
                ("description_fr", models.TextField(null=True, verbose_name="description")),
                ("description_ar", models.TextField(null=True, verbose_name="description")),
                ("url", models.URLField(verbose_name="url")),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="links",
                        related_query_name="link",
                        to="api.event",
                        verbose_name="event",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventFeaturedDocument",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=200, verbose_name="title")),
                ("title_en", models.CharField(max_length=200, null=True, verbose_name="title")),
                ("title_es", models.CharField(max_length=200, null=True, verbose_name="title")),
                ("title_fr", models.CharField(max_length=200, null=True, verbose_name="title")),
                ("title_ar", models.CharField(max_length=200, null=True, verbose_name="title")),
                ("description", models.TextField(verbose_name="description")),
                ("description_en", models.TextField(null=True, verbose_name="description")),
                ("description_es", models.TextField(null=True, verbose_name="description")),
                ("description_fr", models.TextField(null=True, verbose_name="description")),
                ("description_ar", models.TextField(null=True, verbose_name="description")),
                (
                    "thumbnail",
                    models.ImageField(
                        help_text="Image should be portrait (3:4 aspect ratio) and scaled down to as close to 96x128 as the image size",
                        upload_to="event-featured-documents/thumbnail/",
                        verbose_name="thumbnail",
                    ),
                ),
                ("file", models.FileField(upload_to="event-featured-documents/file/", verbose_name="file")),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="featured_documents",
                        related_query_name="featured_document",
                        to="api.event",
                        verbose_name="event",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserCountry",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "country",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="api.country", verbose_name="country"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="userName",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Country",
                "verbose_name_plural": "User Countries",
            },
        ),
        migrations.AddField(
            model_name="event",
            name="visibility",
            field=models.IntegerField(
                choices=[(1, "RCRC Movement"), (2, "IFRC Secretariat"), (3, "Public"), (4, "IFRC and NS")],
                default=1,
                verbose_name="visibility",
            ),
        ),
        migrations.AlterModelOptions(
            name="keyfigure",
            options={"ordering": ("id",), "verbose_name": "key figure", "verbose_name_plural": "key figures"},
        ),
        migrations.CreateModel(
            name="UserRegion",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "region",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="api.region", verbose_name="region"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="userRegionName",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "Regional Admin",
                "verbose_name_plural": "Regional Admins",
            },
        ),
        migrations.AddField(
            model_name="appeal",
            name="triggering_amount",
            field=models.DecimalField(
                decimal_places=2, default=0.0, editable=False, max_digits=12, verbose_name="triggering amount"
            ),
        ),
        migrations.AddField(
            model_name="appealhistory",
            name="triggering_amount",
            field=models.DecimalField(
                decimal_places=2, default=0.0, editable=False, max_digits=12, verbose_name="triggering amount"
            ),
        ),
        migrations.AlterField(
            model_name="appealhistory",
            name="code",
            field=models.CharField(max_length=20, null=True, verbose_name="code"),
        ),
        migrations.AlterField(
            model_name="appealhistory",
            name="code",
            field=models.CharField(max_length=20, null=True, verbose_name="code"),
        ),
        migrations.AlterField(
            model_name="action",
            name="organizations",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(
                    choices=[
                        ("NTLS", "National Society"),
                        ("PNS", "Foreign Society"),
                        ("FDRN", "Federation"),
                        ("GOV", "Government"),
                    ],
                    max_length=4,
                ),
                blank=True,
                default=list,
                size=None,
                verbose_name="organizations",
            ),
        ),
        migrations.AlterField(
            model_name="actionstaken",
            name="organization",
            field=models.CharField(
                choices=[("NTLS", "National Society"), ("PNS", "Foreign Society"), ("FDRN", "Federation"), ("GOV", "Government")],
                max_length=16,
                verbose_name="organization",
            ),
        ),
        migrations.AlterField(
            model_name="event",
            name="slug",
            field=models.CharField(
                blank=True,
                default=None,
                help_text="Optional string for a clean URL. For example, go.ifrc.org/emergencies/hurricane-katrina-2019. The string cannot start with a number and is forced to be lowercase. Recommend using hyphens over underscores. Special characters like # is not allowed.",
                max_length=50,
                null=True,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        re.compile("^[-a-zA-Z0-9_]+\\Z"),
                        "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.",
                        "invalid",
                    ),
                    api.utils.validate_slug_number,
                ],
                verbose_name="slug",
            ),
        ),
        migrations.AlterField(
            model_name="event",
            name="slug_ar",
            field=models.CharField(
                blank=True,
                default=None,
                help_text="Optional string for a clean URL. For example, go.ifrc.org/emergencies/hurricane-katrina-2019. The string cannot start with a number and is forced to be lowercase. Recommend using hyphens over underscores. Special characters like # is not allowed.",
                max_length=50,
                null=True,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        re.compile("^[-a-zA-Z0-9_]+\\Z"),
                        "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.",
                        "invalid",
                    ),
                    api.utils.validate_slug_number,
                ],
                verbose_name="slug",
            ),
        ),
        migrations.AlterField(
            model_name="event",
            name="slug_en",
            field=models.CharField(
                blank=True,
                default=None,
                help_text="Optional string for a clean URL. For example, go.ifrc.org/emergencies/hurricane-katrina-2019. The string cannot start with a number and is forced to be lowercase. Recommend using hyphens over underscores. Special characters like # is not allowed.",
                max_length=50,
                null=True,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        re.compile("^[-a-zA-Z0-9_]+\\Z"),
                        "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.",
                        "invalid",
                    ),
                    api.utils.validate_slug_number,
                ],
                verbose_name="slug",
            ),
        ),
        migrations.AlterField(
            model_name="event",
            name="slug_es",
            field=models.CharField(
                blank=True,
                default=None,
                help_text="Optional string for a clean URL. For example, go.ifrc.org/emergencies/hurricane-katrina-2019. The string cannot start with a number and is forced to be lowercase. Recommend using hyphens over underscores. Special characters like # is not allowed.",
                max_length=50,
                null=True,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        re.compile("^[-a-zA-Z0-9_]+\\Z"),
                        "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.",
                        "invalid",
                    ),
                    api.utils.validate_slug_number,
                ],
                verbose_name="slug",
            ),
        ),
        migrations.AlterField(
            model_name="event",
            name="slug_fr",
            field=models.CharField(
                blank=True,
                default=None,
                help_text="Optional string for a clean URL. For example, go.ifrc.org/emergencies/hurricane-katrina-2019. The string cannot start with a number and is forced to be lowercase. Recommend using hyphens over underscores. Special characters like # is not allowed.",
                max_length=50,
                null=True,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        re.compile("^[-a-zA-Z0-9_]+\\Z"),
                        "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.",
                        "invalid",
                    ),
                    api.utils.validate_slug_number,
                ],
                verbose_name="slug",
            ),
        ),
        migrations.AlterField(
            model_name="event",
            name="slug",
            field=models.CharField(
                blank=True,
                default=None,
                help_text="Optional string for a clean URL. For example, go.ifrc.org/emergency/hurricane-katrina-2019. The string cannot start with a number and is forced to be lowercase. Recommend using hyphens over underscores. Special characters like # is not allowed.",
                max_length=50,
                null=True,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        re.compile("^[-a-zA-Z0-9_]+\\Z"),
                        "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.",
                        "invalid",
                    ),
                    api.utils.validate_slug_number,
                ],
                verbose_name="slug",
            ),
        ),
        migrations.AlterField(
            model_name="event",
            name="slug_ar",
            field=models.CharField(
                blank=True,
                default=None,
                help_text="Optional string for a clean URL. For example, go.ifrc.org/emergency/hurricane-katrina-2019. The string cannot start with a number and is forced to be lowercase. Recommend using hyphens over underscores. Special characters like # is not allowed.",
                max_length=50,
                null=True,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        re.compile("^[-a-zA-Z0-9_]+\\Z"),
                        "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.",
                        "invalid",
                    ),
                    api.utils.validate_slug_number,
                ],
                verbose_name="slug",
            ),
        ),
        migrations.AlterField(
            model_name="event",
            name="slug_en",
            field=models.CharField(
                blank=True,
                default=None,
                help_text="Optional string for a clean URL. For example, go.ifrc.org/emergency/hurricane-katrina-2019. The string cannot start with a number and is forced to be lowercase. Recommend using hyphens over underscores. Special characters like # is not allowed.",
                max_length=50,
                null=True,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        re.compile("^[-a-zA-Z0-9_]+\\Z"),
                        "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.",
                        "invalid",
                    ),
                    api.utils.validate_slug_number,
                ],
                verbose_name="slug",
            ),
        ),
        migrations.AlterField(
            model_name="event",
            name="slug_es",
            field=models.CharField(
                blank=True,
                default=None,
                help_text="Optional string for a clean URL. For example, go.ifrc.org/emergency/hurricane-katrina-2019. The string cannot start with a number and is forced to be lowercase. Recommend using hyphens over underscores. Special characters like # is not allowed.",
                max_length=50,
                null=True,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        re.compile("^[-a-zA-Z0-9_]+\\Z"),
                        "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.",
                        "invalid",
                    ),
                    api.utils.validate_slug_number,
                ],
                verbose_name="slug",
            ),
        ),
        migrations.AlterField(
            model_name="event",
            name="slug_fr",
            field=models.CharField(
                blank=True,
                default=None,
                help_text="Optional string for a clean URL. For example, go.ifrc.org/emergency/hurricane-katrina-2019. The string cannot start with a number and is forced to be lowercase. Recommend using hyphens over underscores. Special characters like # is not allowed.",
                max_length=50,
                null=True,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        re.compile("^[-a-zA-Z0-9_]+\\Z"),
                        "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.",
                        "invalid",
                    ),
                    api.utils.validate_slug_number,
                ],
                verbose_name="slug",
            ),
        ),
        migrations.CreateModel(
            name="GeneralDocument",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(blank=True, verbose_name="created at")),
                ("name", models.CharField(max_length=100, verbose_name="name")),
                (
                    "document",
                    models.FileField(blank=True, null=True, upload_to=api.models.general_document_path, verbose_name="document"),
                ),
                ("document_url", models.URLField(blank=True, verbose_name="document url")),
                ("name_ar", models.CharField(max_length=100, null=True, verbose_name="name")),
                ("name_en", models.CharField(max_length=100, null=True, verbose_name="name")),
                ("name_es", models.CharField(max_length=100, null=True, verbose_name="name")),
                ("name_fr", models.CharField(max_length=100, null=True, verbose_name="name")),
            ],
            options={
                "verbose_name": "general document",
                "verbose_name_plural": "general documents",
            },
        ),
        migrations.AlterField(
            model_name="event",
            name="name",
            field=models.CharField(max_length=256, verbose_name="name"),
        ),
        migrations.AlterField(
            model_name="event",
            name="name_ar",
            field=models.CharField(max_length=256, null=True, verbose_name="name"),
        ),
        migrations.AlterField(
            model_name="event",
            name="name_en",
            field=models.CharField(max_length=256, null=True, verbose_name="name"),
        ),
        migrations.AlterField(
            model_name="event",
            name="name_es",
            field=models.CharField(max_length=256, null=True, verbose_name="name"),
        ),
        migrations.AlterField(
            model_name="event",
            name="name_fr",
            field=models.CharField(max_length=256, null=True, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="country",
            name="average_household_size",
            field=models.DecimalField(
                blank=True, decimal_places=2, max_digits=5, null=True, verbose_name="Average Household Size"
            ),
        ),
        migrations.AddField(
            model_name="event",
            name="countries_for_preview",
            field=models.ManyToManyField(
                blank=True, related_name="countries_for_preview", to="api.country", verbose_name="countries for preview"
            ),
        ),
        migrations.AddField(
            model_name="event",
            name="emergency_response_contact_email",
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name="emergency response contact email"),
        ),
        migrations.CreateModel(
            name="Admin2",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100, verbose_name="name")),
                ("code", models.CharField(max_length=64, unique=True, verbose_name="code")),
                ("centroid", django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ("bbox", django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=4326)),
                (
                    "admin1",
                    models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="api.district", verbose_name="Admin 1"),
                ),
                ("alternate_name", models.CharField(blank=True, max_length=100, null=True, verbose_name="Alternate Name")),
                (
                    "alternate_name_code",
                    models.CharField(blank=True, max_length=10, null=True, verbose_name="Alternate Name Language Code"),
                ),
                ("local_name", models.CharField(blank=True, max_length=100, null=True, verbose_name="Local Name")),
                (
                    "local_name_code",
                    models.CharField(blank=True, max_length=10, null=True, verbose_name="Local Name Language Code"),
                ),
            ],
            options={
                "verbose_name": "admin2",
                "verbose_name_plural": "admin2s",
                "ordering": ("code",),
            },
        ),
        migrations.CreateModel(
            name="CountryOfFieldReportToReview",
            fields=[
                (
                    "country",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="api.country",
                        verbose_name="country",
                    ),
                ),
            ],
            options={
                "verbose_name": "Country of Field Report to review",
                "verbose_name_plural": "Countries of Field Report to review",
            },
        ),
        migrations.AlterField(
            model_name="action",
            name="organizations",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(
                    choices=[("NTLS", "National Society"), ("PNS", "RCRC"), ("FDRN", "Federation"), ("GOV", "Government")],
                    max_length=4,
                ),
                blank=True,
                default=list,
                size=None,
                verbose_name="organizations",
            ),
        ),
        migrations.AlterField(
            model_name="actionstaken",
            name="organization",
            field=models.CharField(
                choices=[("NTLS", "National Society"), ("PNS", "RCRC"), ("FDRN", "Federation"), ("GOV", "Government")],
                max_length=16,
                verbose_name="organization",
            ),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="status",
            field=models.IntegerField(
                choices=[(0, "Unknown"), (2, "Two"), (3, "Three"), (8, "Early Warning"), (9, "Event-related"), (10, "Ten")],
                default=0,
                verbose_name="type",
            ),
        ),
        migrations.AlterField(
            model_name="country",
            name="independent",
            field=models.BooleanField(default=None, help_text="Is this an independent country?", null=True),
        ),
        migrations.AlterField(
            model_name="country",
            name="nsi_annual_fdrs_reporting",
            field=models.BooleanField(blank=True, null=True, verbose_name="Annual Reporting to FDRS"),
        ),
        migrations.AlterField(
            model_name="country",
            name="nsi_cmc_dashboard_compliance",
            field=models.BooleanField(blank=True, null=True, verbose_name="Complying with CMC Dashboard"),
        ),
        migrations.AlterField(
            model_name="country",
            name="nsi_domestically_generated_income",
            field=models.BooleanField(blank=True, null=True, verbose_name=">50% Domestically Generated Income"),
        ),
        migrations.AlterField(
            model_name="country",
            name="nsi_gov_financial_support",
            field=models.BooleanField(blank=True, null=True, verbose_name="Gov Financial Support"),
        ),
        migrations.AlterField(
            model_name="country",
            name="nsi_policy_implementation",
            field=models.BooleanField(blank=True, null=True, verbose_name="Your Policy / Programme Implementation"),
        ),
        migrations.AlterField(
            model_name="country",
            name="nsi_risk_management_framework",
            field=models.BooleanField(blank=True, null=True, verbose_name="Risk Management Framework"),
        ),
        migrations.AlterField(
            model_name="event",
            name="slug",
            field=models.CharField(
                blank=True,
                default=None,
                help_text="Optional string for a clean URL. For example, go.ifrc.org/emergency/hurricane-katrina-2019. The string cannot start with a number and is forced to be lowercase. Recommend using hyphens over underscores. Special characters like # is not allowed.",
                max_length=50,
                null=True,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        re.compile("^[-a-zA-Z0-9_]+\\Z"),
                        "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                        "invalid",
                    ),
                    api.utils.validate_slug_number,
                ],
                verbose_name="slug",
            ),
        ),
        migrations.AlterField(
            model_name="event",
            name="slug_ar",
            field=models.CharField(
                blank=True,
                default=None,
                help_text="Optional string for a clean URL. For example, go.ifrc.org/emergency/hurricane-katrina-2019. The string cannot start with a number and is forced to be lowercase. Recommend using hyphens over underscores. Special characters like # is not allowed.",
                max_length=50,
                null=True,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        re.compile("^[-a-zA-Z0-9_]+\\Z"),
                        "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                        "invalid",
                    ),
                    api.utils.validate_slug_number,
                ],
                verbose_name="slug",
            ),
        ),
        migrations.AlterField(
            model_name="event",
            name="slug_en",
            field=models.CharField(
                blank=True,
                default=None,
                help_text="Optional string for a clean URL. For example, go.ifrc.org/emergency/hurricane-katrina-2019. The string cannot start with a number and is forced to be lowercase. Recommend using hyphens over underscores. Special characters like # is not allowed.",
                max_length=50,
                null=True,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        re.compile("^[-a-zA-Z0-9_]+\\Z"),
                        "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                        "invalid",
                    ),
                    api.utils.validate_slug_number,
                ],
                verbose_name="slug",
            ),
        ),
        migrations.AlterField(
            model_name="event",
            name="slug_es",
            field=models.CharField(
                blank=True,
                default=None,
                help_text="Optional string for a clean URL. For example, go.ifrc.org/emergency/hurricane-katrina-2019. The string cannot start with a number and is forced to be lowercase. Recommend using hyphens over underscores. Special characters like # is not allowed.",
                max_length=50,
                null=True,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        re.compile("^[-a-zA-Z0-9_]+\\Z"),
                        "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                        "invalid",
                    ),
                    api.utils.validate_slug_number,
                ],
                verbose_name="slug",
            ),
        ),
        migrations.AlterField(
            model_name="event",
            name="slug_fr",
            field=models.CharField(
                blank=True,
                default=None,
                help_text="Optional string for a clean URL. For example, go.ifrc.org/emergency/hurricane-katrina-2019. The string cannot start with a number and is forced to be lowercase. Recommend using hyphens over underscores. Special characters like # is not allowed.",
                max_length=50,
                null=True,
                unique=True,
                validators=[
                    django.core.validators.RegexValidator(
                        re.compile("^[-a-zA-Z0-9_]+\\Z"),
                        "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                        "invalid",
                    ),
                    api.utils.validate_slug_number,
                ],
                verbose_name="slug",
            ),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="epi_figures_source",
            field=models.IntegerField(
                blank=True,
                choices=[(0, "Ministry of health"), (1, "WHO"), (2, "OTHER")],
                null=True,
                verbose_name="figures source (epidemic)",
            ),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="ns_request_assistance",
            field=models.BooleanField(blank=True, default=None, null=True, verbose_name="NS request assistance"),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="request_assistance",
            field=models.BooleanField(blank=True, default=None, null=True, verbose_name="request assistance"),
        ),
        migrations.AlterField(
            model_name="profile",
            name="org_type",
            field=models.CharField(
                blank=True,
                choices=[
                    ("NTLS", "National Society"),
                    ("DLGN", "Delegation"),
                    ("SCRT", "Secretariat"),
                    ("ICRC", "ICRC"),
                    ("OTHR", "Other"),
                ],
                default="OTHR",
                max_length=4,
                verbose_name="organization type",
            ),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="health_min_num_assisted",
            field=models.IntegerField(
                blank=True, help_text="not used any more", null=True, verbose_name="number of assisted (ministry of health)"
            ),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="who_num_assisted",
            field=models.IntegerField(
                blank=True, help_text="not used any more", null=True, verbose_name="number of assisted (who)"
            ),
        ),
        migrations.AddField(
            model_name="appealfilter",
            name="notes",
            field=models.TextField(blank=True, null=True, verbose_name="notes"),
        ),
        migrations.AddField(
            model_name="event",
            name="image",
            field=models.ImageField(blank=True, null=True, upload_to=api.models.snippet_image_path, verbose_name="image"),
        ),
        migrations.AddField(
            model_name="event",
            name="summary_ar",
            field=tinymce.models.HTMLField(blank=True, default="", null=True, verbose_name="summary"),
        ),
        migrations.AddField(
            model_name="event",
            name="summary_en",
            field=tinymce.models.HTMLField(blank=True, default="", null=True, verbose_name="summary"),
        ),
        migrations.AddField(
            model_name="event",
            name="summary_es",
            field=tinymce.models.HTMLField(blank=True, default="", null=True, verbose_name="summary"),
        ),
        migrations.AddField(
            model_name="event",
            name="summary_fr",
            field=tinymce.models.HTMLField(blank=True, default="", null=True, verbose_name="summary"),
        ),
        migrations.CreateModel(
            name="Admin2Geoms",
            fields=[
                ("geom", django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                (
                    "admin2",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="api.admin2",
                        verbose_name="admin2",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="fieldreport",
            name="recent_affected",
            field=models.IntegerField(
                choices=[
                    (0, "Unknown"),
                    (1, "Red Cross / Red Crescent"),
                    (2, "Government"),
                    (3, "Other"),
                    (4, "Red Cross / Red Crescent, potentially"),
                    (5, "Government, potentially"),
                    (6, "Other, potentially"),
                ],
                default=0,
                verbose_name="recent source of affected people",
            ),
        ),
        migrations.RunSQL(
            sql=[
                "update api_fieldreport set recent_affected=6 where other_num_potentially_affected>0",
                "update api_fieldreport set recent_affected=5 where gov_num_potentially_affected>0",
                "update api_fieldreport set recent_affected=4 where num_potentially_affected>0",
                "update api_fieldreport set recent_affected=3 where other_num_affected>0",
                "update api_fieldreport set recent_affected=2 where gov_num_affected>0",
                "update api_fieldreport set recent_affected=1 where num_affected>0",
            ],
            reverse_sql=["update api_fieldreport set recent_affected=0"],
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="recent_affected",
            field=models.IntegerField(
                choices=[
                    (0, "Unknown"),
                    (1, "Red Cross / Red Crescent"),
                    (2, "Government"),
                    (3, "Other"),
                    (4, "Red Cross / Red Crescent, potentially"),
                    (5, "Government, potentially"),
                    (6, "Other, potentially"),
                ],
                default=0,
                help_text='<a target="_blank" href="/api/v2/recentaffected">Key/value pairs</a>',
                verbose_name="recent source of affected people",
            ),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="status",
            field=models.IntegerField(
                choices=[(0, "Unknown"), (2, "Two"), (3, "Three"), (8, "Early Warning"), (9, "Event-related"), (10, "Ten")],
                default=0,
                help_text='<a target="_blank" href="/api/v2/fieldreportstatus">Key/value pairs</a>',
                verbose_name="type",
            ),
        ),
        migrations.AlterModelOptions(
            name="event",
            options={
                "ordering": ("-disaster_start_date", "id"),
                "verbose_name": "emergency",
                "verbose_name_plural": "emergencies",
            },
        ),
        migrations.AddField(
            model_name="admin2",
            name="created_at",
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name="Created at"),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="admin2",
            name="is_deprecated",
            field=models.BooleanField(default=False, help_text="Is this a deprecated area?"),
        ),
        migrations.CreateModel(
            name="AppealDocumentType",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100, verbose_name="name")),
                ("public_site_or_fednet", models.BooleanField(default=False, verbose_name="Sourced by FedNet?")),
            ],
            options={
                "verbose_name": "appeal document type",
                "verbose_name_plural": "appeal document types",
                "ordering": ("name",),
            },
        ),
        migrations.RunSQL(
            sql=["update api_country set iso3=null where iso3='';"],
            reverse_sql=["update api_country set iso3=null where iso3='';"],
        ),
        migrations.AddField(
            model_name="appealdocument",
            name="description",
            field=models.CharField(blank=True, max_length=200, null=True, verbose_name="description"),
        ),
        migrations.AddField(
            model_name="appealdocument",
            name="type",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, to="api.appealdocumenttype", verbose_name="type"
            ),
        ),
        migrations.AlterField(
            model_name="country",
            name="iso3",
            field=models.CharField(
                blank=True,
                max_length=3,
                null=True,
                unique=True,
                validators=[django.core.validators.RegexValidator("^[A-Z]*$", "ISO must be uppercase")],
                verbose_name="ISO3",
            ),
        ),
        migrations.AddField(
            model_name="appealdocument",
            name="iso3",
            field=models.ForeignKey(
                db_column="iso3",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="api.country",
                to_field="iso3",
                verbose_name="location",
            ),
        ),
        migrations.RunSQL(
            sql=["update api_country set iso=null where iso='';"],
            reverse_sql=["update api_country set iso=null where iso='';"],
        ),
        migrations.AlterField(
            model_name="country",
            name="iso",
            field=models.CharField(
                blank=True,
                max_length=2,
                null=True,
                unique=True,
                validators=[django.core.validators.RegexValidator("^[A-Z]*$", "ISO must be uppercase")],
                verbose_name="ISO",
            ),
        ),
        migrations.RemoveField(
            model_name="appealdocument",
            name="iso3",
        ),
        migrations.AddField(
            model_name="appealdocument",
            name="iso",
            field=models.ForeignKey(
                db_column="iso",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="api.country",
                to_field="iso",
                verbose_name="location",
            ),
        ),
        migrations.AddField(
            model_name="action",
            name="translation_module_original_language",
            field=models.CharField(
                choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                default="en",
                help_text="Language used to create this entity",
                max_length=2,
                verbose_name="Entity Original language",
            ),
        ),
        migrations.AddField(
            model_name="action",
            name="translation_module_skip_auto_translation",
            field=models.BooleanField(
                default=False, help_text="Skip auto translation operation for this entity?", verbose_name="Skip auto translation"
            ),
        ),
        migrations.AddField(
            model_name="actionstaken",
            name="translation_module_original_language",
            field=models.CharField(
                choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                default="en",
                help_text="Language used to create this entity",
                max_length=2,
                verbose_name="Entity Original language",
            ),
        ),
        migrations.AddField(
            model_name="actionstaken",
            name="translation_module_skip_auto_translation",
            field=models.BooleanField(
                default=False, help_text="Skip auto translation operation for this entity?", verbose_name="Skip auto translation"
            ),
        ),
        migrations.AddField(
            model_name="appeal",
            name="translation_module_original_language",
            field=models.CharField(
                choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                default="en",
                help_text="Language used to create this entity",
                max_length=2,
                verbose_name="Entity Original language",
            ),
        ),
        migrations.AddField(
            model_name="appeal",
            name="translation_module_skip_auto_translation",
            field=models.BooleanField(
                default=False, help_text="Skip auto translation operation for this entity?", verbose_name="Skip auto translation"
            ),
        ),
        migrations.AddField(
            model_name="appealdocument",
            name="translation_module_original_language",
            field=models.CharField(
                choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                default="en",
                help_text="Language used to create this entity",
                max_length=2,
                verbose_name="Entity Original language",
            ),
        ),
        migrations.AddField(
            model_name="appealdocument",
            name="translation_module_skip_auto_translation",
            field=models.BooleanField(
                default=False, help_text="Skip auto translation operation for this entity?", verbose_name="Skip auto translation"
            ),
        ),
        migrations.AddField(
            model_name="country",
            name="translation_module_original_language",
            field=models.CharField(
                choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                default="en",
                help_text="Language used to create this entity",
                max_length=2,
                verbose_name="Entity Original language",
            ),
        ),
        migrations.AddField(
            model_name="country",
            name="translation_module_skip_auto_translation",
            field=models.BooleanField(
                default=False, help_text="Skip auto translation operation for this entity?", verbose_name="Skip auto translation"
            ),
        ),
        migrations.AddField(
            model_name="countrysnippet",
            name="translation_module_original_language",
            field=models.CharField(
                choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                default="en",
                help_text="Language used to create this entity",
                max_length=2,
                verbose_name="Entity Original language",
            ),
        ),
        migrations.AddField(
            model_name="countrysnippet",
            name="translation_module_skip_auto_translation",
            field=models.BooleanField(
                default=False, help_text="Skip auto translation operation for this entity?", verbose_name="Skip auto translation"
            ),
        ),
        migrations.AddField(
            model_name="disastertype",
            name="translation_module_original_language",
            field=models.CharField(
                choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                default="en",
                help_text="Language used to create this entity",
                max_length=2,
                verbose_name="Entity Original language",
            ),
        ),
        migrations.AddField(
            model_name="disastertype",
            name="translation_module_skip_auto_translation",
            field=models.BooleanField(
                default=False, help_text="Skip auto translation operation for this entity?", verbose_name="Skip auto translation"
            ),
        ),
        migrations.AddField(
            model_name="event",
            name="translation_module_original_language",
            field=models.CharField(
                choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                default="en",
                help_text="Language used to create this entity",
                max_length=2,
                verbose_name="Entity Original language",
            ),
        ),
        migrations.AddField(
            model_name="event",
            name="translation_module_skip_auto_translation",
            field=models.BooleanField(
                default=False, help_text="Skip auto translation operation for this entity?", verbose_name="Skip auto translation"
            ),
        ),
        migrations.AddField(
            model_name="eventfeatureddocument",
            name="translation_module_original_language",
            field=models.CharField(
                choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                default="en",
                help_text="Language used to create this entity",
                max_length=2,
                verbose_name="Entity Original language",
            ),
        ),
        migrations.AddField(
            model_name="eventfeatureddocument",
            name="translation_module_skip_auto_translation",
            field=models.BooleanField(
                default=False, help_text="Skip auto translation operation for this entity?", verbose_name="Skip auto translation"
            ),
        ),
        migrations.AddField(
            model_name="eventlink",
            name="translation_module_original_language",
            field=models.CharField(
                choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                default="en",
                help_text="Language used to create this entity",
                max_length=2,
                verbose_name="Entity Original language",
            ),
        ),
        migrations.AddField(
            model_name="eventlink",
            name="translation_module_skip_auto_translation",
            field=models.BooleanField(
                default=False, help_text="Skip auto translation operation for this entity?", verbose_name="Skip auto translation"
            ),
        ),
        migrations.AddField(
            model_name="externalpartner",
            name="translation_module_original_language",
            field=models.CharField(
                choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                default="en",
                help_text="Language used to create this entity",
                max_length=2,
                verbose_name="Entity Original language",
            ),
        ),
        migrations.AddField(
            model_name="externalpartner",
            name="translation_module_skip_auto_translation",
            field=models.BooleanField(
                default=False, help_text="Skip auto translation operation for this entity?", verbose_name="Skip auto translation"
            ),
        ),
        migrations.AddField(
            model_name="fieldreport",
            name="translation_module_original_language",
            field=models.CharField(
                choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                default="en",
                help_text="Language used to create this entity",
                max_length=2,
                verbose_name="Entity Original language",
            ),
        ),
        migrations.AddField(
            model_name="fieldreport",
            name="translation_module_skip_auto_translation",
            field=models.BooleanField(
                default=False, help_text="Skip auto translation operation for this entity?", verbose_name="Skip auto translation"
            ),
        ),
        migrations.AddField(
            model_name="gdacsevent",
            name="translation_module_original_language",
            field=models.CharField(
                choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                default="en",
                help_text="Language used to create this entity",
                max_length=2,
                verbose_name="Entity Original language",
            ),
        ),
        migrations.AddField(
            model_name="gdacsevent",
            name="translation_module_skip_auto_translation",
            field=models.BooleanField(
                default=False, help_text="Skip auto translation operation for this entity?", verbose_name="Skip auto translation"
            ),
        ),
        migrations.AddField(
            model_name="generaldocument",
            name="translation_module_original_language",
            field=models.CharField(
                choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                default="en",
                help_text="Language used to create this entity",
                max_length=2,
                verbose_name="Entity Original language",
            ),
        ),
        migrations.AddField(
            model_name="generaldocument",
            name="translation_module_skip_auto_translation",
            field=models.BooleanField(
                default=False, help_text="Skip auto translation operation for this entity?", verbose_name="Skip auto translation"
            ),
        ),
        migrations.AddField(
            model_name="maincontact",
            name="translation_module_original_language",
            field=models.CharField(
                choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                default="en",
                help_text="Language used to create this entity",
                max_length=2,
                verbose_name="Entity Original language",
            ),
        ),
        migrations.AddField(
            model_name="maincontact",
            name="translation_module_skip_auto_translation",
            field=models.BooleanField(
                default=False, help_text="Skip auto translation operation for this entity?", verbose_name="Skip auto translation"
            ),
        ),
        migrations.AddField(
            model_name="region",
            name="translation_module_original_language",
            field=models.CharField(
                choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                default="en",
                help_text="Language used to create this entity",
                max_length=2,
                verbose_name="Entity Original language",
            ),
        ),
        migrations.AddField(
            model_name="region",
            name="translation_module_skip_auto_translation",
            field=models.BooleanField(
                default=False, help_text="Skip auto translation operation for this entity?", verbose_name="Skip auto translation"
            ),
        ),
        migrations.AddField(
            model_name="regionemergencysnippet",
            name="translation_module_original_language",
            field=models.CharField(
                choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                default="en",
                help_text="Language used to create this entity",
                max_length=2,
                verbose_name="Entity Original language",
            ),
        ),
        migrations.AddField(
            model_name="regionemergencysnippet",
            name="translation_module_skip_auto_translation",
            field=models.BooleanField(
                default=False, help_text="Skip auto translation operation for this entity?", verbose_name="Skip auto translation"
            ),
        ),
        migrations.AddField(
            model_name="regionpreparednesssnippet",
            name="translation_module_original_language",
            field=models.CharField(
                choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                default="en",
                help_text="Language used to create this entity",
                max_length=2,
                verbose_name="Entity Original language",
            ),
        ),
        migrations.AddField(
            model_name="regionpreparednesssnippet",
            name="translation_module_skip_auto_translation",
            field=models.BooleanField(
                default=False, help_text="Skip auto translation operation for this entity?", verbose_name="Skip auto translation"
            ),
        ),
        migrations.AddField(
            model_name="regionprofilesnippet",
            name="translation_module_original_language",
            field=models.CharField(
                choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                default="en",
                help_text="Language used to create this entity",
                max_length=2,
                verbose_name="Entity Original language",
            ),
        ),
        migrations.AddField(
            model_name="regionprofilesnippet",
            name="translation_module_skip_auto_translation",
            field=models.BooleanField(
                default=False, help_text="Skip auto translation operation for this entity?", verbose_name="Skip auto translation"
            ),
        ),
        migrations.AddField(
            model_name="regionsnippet",
            name="translation_module_original_language",
            field=models.CharField(
                choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                default="en",
                help_text="Language used to create this entity",
                max_length=2,
                verbose_name="Entity Original language",
            ),
        ),
        migrations.AddField(
            model_name="regionsnippet",
            name="translation_module_skip_auto_translation",
            field=models.BooleanField(
                default=False, help_text="Skip auto translation operation for this entity?", verbose_name="Skip auto translation"
            ),
        ),
        migrations.AddField(
            model_name="situationreport",
            name="translation_module_original_language",
            field=models.CharField(
                choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                default="en",
                help_text="Language used to create this entity",
                max_length=2,
                verbose_name="Entity Original language",
            ),
        ),
        migrations.AddField(
            model_name="situationreport",
            name="translation_module_skip_auto_translation",
            field=models.BooleanField(
                default=False, help_text="Skip auto translation operation for this entity?", verbose_name="Skip auto translation"
            ),
        ),
        migrations.AddField(
            model_name="situationreporttype",
            name="translation_module_original_language",
            field=models.CharField(
                choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                default="en",
                help_text="Language used to create this entity",
                max_length=2,
                verbose_name="Entity Original language",
            ),
        ),
        migrations.AddField(
            model_name="situationreporttype",
            name="translation_module_skip_auto_translation",
            field=models.BooleanField(
                default=False, help_text="Skip auto translation operation for this entity?", verbose_name="Skip auto translation"
            ),
        ),
        migrations.AddField(
            model_name="snippet",
            name="translation_module_original_language",
            field=models.CharField(
                choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                default="en",
                help_text="Language used to create this entity",
                max_length=2,
                verbose_name="Entity Original language",
            ),
        ),
        migrations.AddField(
            model_name="snippet",
            name="translation_module_skip_auto_translation",
            field=models.BooleanField(
                default=False, help_text="Skip auto translation operation for this entity?", verbose_name="Skip auto translation"
            ),
        ),
        migrations.AddField(
            model_name="supportedactivity",
            name="translation_module_original_language",
            field=models.CharField(
                choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                default="en",
                help_text="Language used to create this entity",
                max_length=2,
                verbose_name="Entity Original language",
            ),
        ),
        migrations.AddField(
            model_name="supportedactivity",
            name="translation_module_skip_auto_translation",
            field=models.BooleanField(
                default=False, help_text="Skip auto translation operation for this entity?", verbose_name="Skip auto translation"
            ),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="status",
            field=models.IntegerField(
                choices=[
                    (0, "Unknown"),
                    (2, "Two"),
                    (3, "Three"),
                    (8, "Early Warning / Early Action"),
                    (9, "Event-related"),
                    (10, "Event"),
                ],
                default=0,
                help_text='<a target="_blank" href="/api/v2/fieldreportstatus">Key/value pairs</a>',
                verbose_name="type",
            ),
        ),
        migrations.CreateModel(
            name="Export",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("url", models.URLField(max_length=255, verbose_name="Url")),
                ("token", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("requested_at", models.DateTimeField(blank=True, null=True, verbose_name="Requested At")),
                ("completed_at", models.DateTimeField(blank=True, null=True, verbose_name="Completed At")),
                (
                    "status",
                    models.IntegerField(
                        choices=[(0, "Pending"), (1, "Completed"), (2, "Errored")], default=0, verbose_name="Status"
                    ),
                ),
                (
                    "pdf_file",
                    models.FileField(blank=True, max_length=255, null=True, upload_to="pdf-export/", verbose_name="Pdf File"),
                ),
                ("selector", models.CharField(default=django.utils.timezone.now, max_length=255, verbose_name="Selector")),
            ],
        ),
        migrations.RunPython(
            code=api.management.commands.triggers_to_db.Command.revert,
            reverse_code=api.management.commands.triggers_to_db.Command.apply,
        ),
        migrations.AlterField(
            model_name="appeal",
            name="amount_funded",
            field=models.FloatField(default=0.0, verbose_name="amount funded"),
        ),
        migrations.AlterField(
            model_name="appeal",
            name="amount_requested",
            field=models.FloatField(default=0.0, verbose_name="amount requested"),
        ),
        migrations.RunPython(
            code=api.management.commands.triggers_to_db.Command.apply,
            reverse_code=api.management.commands.triggers_to_db.Command.revert,
        ),
        migrations.AlterField(
            model_name="export",
            name="selector",
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name="Selector"),
        ),
        migrations.AddField(
            model_name="export",
            name="export_id",
            field=models.IntegerField(default=1, verbose_name="Export Id"),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="export",
            name="requested_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
                verbose_name="user",
            ),
        ),
        migrations.AlterField(
            model_name="export",
            name="url",
            field=models.URLField(blank=True, max_length=255, null=True, verbose_name="Url"),
        ),
        migrations.AlterField(
            model_name="appealhistory",
            name="amount_funded",
            field=models.FloatField(default=0.0, verbose_name="amount funded"),
        ),
        migrations.AlterField(
            model_name="appealhistory",
            name="amount_requested",
            field=models.FloatField(default=0.0, verbose_name="amount requested"),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="appeal",
            field=models.IntegerField(
                choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")],
                default=0,
                null=True,
                verbose_name="appeal",
            ),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="bulletin",
            field=models.IntegerField(
                choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")],
                default=0,
                null=True,
                verbose_name="bulletin",
            ),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="dref",
            field=models.IntegerField(
                choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")], default=0, null=True, verbose_name="DREF"
            ),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="fact",
            field=models.IntegerField(
                choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")], default=0, null=True, verbose_name="fact"
            ),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="forecast_based_action",
            field=models.IntegerField(
                choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")],
                default=0,
                null=True,
                verbose_name="forecast based action",
            ),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="ifrc_staff",
            field=models.IntegerField(
                choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")],
                default=0,
                null=True,
                verbose_name="IFRC staff",
            ),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="imminent_dref",
            field=models.IntegerField(
                choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")],
                default=0,
                null=True,
                verbose_name="imminent dref",
            ),
        ),
        migrations.AddField(
            model_name="export",
            name="export_type",
            field=models.CharField(
                choices=[
                    ("dref-applications", "Dref Applications"),
                    ("dref-operational-updates", "Dref Operational Updates"),
                    ("dref-final-reports", "Dref Final Reports"),
                ],
                max_length=255,
                verbose_name="Export Type",
            ),
        ),
        migrations.AddField(
            model_name="source",
            name="spec_ar",
            field=models.TextField(blank=True, null=True, verbose_name="spec"),
        ),
        migrations.AddField(
            model_name="source",
            name="spec_en",
            field=models.TextField(blank=True, null=True, verbose_name="spec"),
        ),
        migrations.AddField(
            model_name="source",
            name="spec_es",
            field=models.TextField(blank=True, null=True, verbose_name="spec"),
        ),
        migrations.AddField(
            model_name="source",
            name="spec_fr",
            field=models.TextField(blank=True, null=True, verbose_name="spec"),
        ),
        migrations.AddField(
            model_name="source",
            name="translation_module_original_language",
            field=models.CharField(
                choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                default="en",
                help_text="Language used to create this entity",
                max_length=2,
                verbose_name="Entity Original language",
            ),
        ),
        migrations.AddField(
            model_name="source",
            name="translation_module_skip_auto_translation",
            field=models.BooleanField(
                default=False, help_text="Skip auto translation operation for this entity?", verbose_name="Skip auto translation"
            ),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="status",
            field=models.IntegerField(
                choices=[
                    (0, "Unknown"),
                    (2, "Two"),
                    (3, "Three"),
                    (8, "Early Warning / Early Action"),
                    (9, "Event"),
                    (10, "Ten"),
                ],
                default=0,
                help_text='<a target="_blank" href="/api/v2/fieldreportstatus">Key/value pairs</a>',
                verbose_name="type",
            ),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="gov_affected_pop_centres",
            field=models.CharField(
                blank=True, max_length=512, null=True, verbose_name="affected population centres (government)"
            ),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="gov_num_affected",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of affected (government)"),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="gov_num_assisted",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of assisted (government)"),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="gov_num_dead",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of dead (government)"),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="gov_num_displaced",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of displaced (government)"),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="gov_num_highest_risk",
            field=models.IntegerField(blank=True, null=True, verbose_name="people at highest risk (government)"),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="gov_num_injured",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of injured (government)"),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="gov_num_missing",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of missing (government)"),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="gov_num_potentially_affected",
            field=models.IntegerField(blank=True, null=True, verbose_name="potentially affected (government)"),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsdataset",
            name="livelihoods_and_basic_needs_female",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of livelihoods and basic needs female"),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsdataset",
            name="livelihoods_and_basic_needs_male",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of livelihoods and basic needs male"),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsdataset",
            name="livelihoods_and_basic_needs_people_reached",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of livelihoods and basic people reached"),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsdataset",
            name="livelihoods_and_basic_needs_people_targeted",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of livelihoods and basic people targeted"),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsdataset",
            name="livelihoods_and_basic_needs_requirements",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of livelihoods and basic needs requirements"),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsdataset",
            name="raw_livelihoods_and_basic_needs_female",
            field=models.TextField(blank=True, null=True, verbose_name="number of livelihoods and basic needs female (raw)"),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsdataset",
            name="raw_livelihoods_and_basic_needs_male",
            field=models.TextField(blank=True, null=True, verbose_name="number of livelihoods and basic needs male (raw)"),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsdataset",
            name="raw_livelihoods_and_basic_needs_people_reached",
            field=models.TextField(
                blank=True, null=True, verbose_name="number of livelihoods and basic needs people reached (raw)"
            ),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsdataset",
            name="raw_livelihoods_and_basic_needs_people_targeted",
            field=models.TextField(
                blank=True, null=True, verbose_name="number of livelihoods and basic needs people targeted (raw)"
            ),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsdataset",
            name="raw_livelihoods_and_basic_needs_requirements",
            field=models.TextField(
                blank=True, null=True, verbose_name="number of livelihoods and basic needs requirements (raw)"
            ),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsea",
            name="livelihoods_and_basic_needs_female",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of livelihoods and basic needs female"),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsea",
            name="livelihoods_and_basic_needs_male",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of livelihoods and basic needs male"),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsea",
            name="livelihoods_and_basic_needs_people_reached",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of livelihoods and basic people reached"),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsea",
            name="livelihoods_and_basic_needs_people_targeted",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of livelihoods and basic people targeted"),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsea",
            name="livelihoods_and_basic_needs_requirements",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of livelihoods and basic needs requirements"),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsea",
            name="raw_livelihoods_and_basic_needs_female",
            field=models.TextField(blank=True, null=True, verbose_name="number of livelihoods and basic needs female (raw)"),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsea",
            name="raw_livelihoods_and_basic_needs_male",
            field=models.TextField(blank=True, null=True, verbose_name="number of livelihoods and basic needs male (raw)"),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsea",
            name="raw_livelihoods_and_basic_needs_people_reached",
            field=models.TextField(
                blank=True, null=True, verbose_name="number of livelihoods and basic needs people reached (raw)"
            ),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsea",
            name="raw_livelihoods_and_basic_needs_people_targeted",
            field=models.TextField(
                blank=True, null=True, verbose_name="number of livelihoods and basic needs people targeted (raw)"
            ),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsea",
            name="raw_livelihoods_and_basic_needs_requirements",
            field=models.TextField(
                blank=True, null=True, verbose_name="number of livelihoods and basic needs requirements (raw)"
            ),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsfr",
            name="livelihoods_and_basic_needs_female",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of livelihoods and basic needs female"),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsfr",
            name="livelihoods_and_basic_needs_male",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of livelihoods and basic needs male"),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsfr",
            name="livelihoods_and_basic_needs_people_reached",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of livelihoods and basic people reached"),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsfr",
            name="livelihoods_and_basic_needs_requirements",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of livelihoods and basic needs requirements"),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsfr",
            name="raw_livelihoods_and_basic_needs_female",
            field=models.TextField(blank=True, null=True, verbose_name="number of livelihoods and basic needs female (raw)"),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsfr",
            name="raw_livelihoods_and_basic_needs_male",
            field=models.TextField(blank=True, null=True, verbose_name="number of livelihoods and basic needs male (raw)"),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsfr",
            name="raw_livelihoods_and_basic_needs_people_reached",
            field=models.TextField(
                blank=True, null=True, verbose_name="number of livelihoods and basic needs people reached (raw)"
            ),
        ),
        migrations.AlterField(
            model_name="emergencyoperationsfr",
            name="raw_livelihoods_and_basic_needs_requirements",
            field=models.TextField(
                blank=True, null=True, verbose_name="number of livelihoods and basic needs requirements (raw)"
            ),
        ),
        migrations.AlterField(
            model_name="emergencyoperationspeoplereached",
            name="livelihoods_and_basic_needs_female",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of livelihoods and basic needs female"),
        ),
        migrations.AlterField(
            model_name="emergencyoperationspeoplereached",
            name="livelihoods_and_basic_needs_male",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of livelihoods and basic needs male"),
        ),
        migrations.AlterField(
            model_name="emergencyoperationspeoplereached",
            name="livelihoods_and_basic_needs_people_reached",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of livelihoods and basic people reached"),
        ),
        migrations.AlterField(
            model_name="emergencyoperationspeoplereached",
            name="livelihoods_and_basic_needs_requirements",
            field=models.IntegerField(blank=True, null=True, verbose_name="number of livelihoods and basic needs requirements"),
        ),
        migrations.AlterField(
            model_name="emergencyoperationspeoplereached",
            name="raw_livelihoods_and_basic_needs_female",
            field=models.TextField(blank=True, null=True, verbose_name="number of livelihoods and basic needs female (raw)"),
        ),
        migrations.AlterField(
            model_name="emergencyoperationspeoplereached",
            name="raw_livelihoods_and_basic_needs_male",
            field=models.TextField(blank=True, null=True, verbose_name="number of livelihoods and basic needs male (raw)"),
        ),
        migrations.AlterField(
            model_name="emergencyoperationspeoplereached",
            name="raw_livelihoods_and_basic_needs_people_reached",
            field=models.TextField(
                blank=True, null=True, verbose_name="number of livelihoods and basic needs people reached (raw)"
            ),
        ),
        migrations.AlterField(
            model_name="emergencyoperationspeoplereached",
            name="raw_livelihoods_and_basic_needs_requirements",
            field=models.TextField(
                blank=True, null=True, verbose_name="number of livelihoods and basic needs requirements (raw)"
            ),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="eru_water_sanitation_15",
            field=models.IntegerField(
                choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")],
                default=0,
                verbose_name="ERU water sanitation M15",
            ),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="eru_water_sanitation_15_units",
            field=models.IntegerField(blank=True, null=True, verbose_name="ERU water sanitation M15 units"),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="eru_water_sanitation_20",
            field=models.IntegerField(
                choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")],
                default=0,
                verbose_name="ERU water sanitation MSM20",
            ),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="eru_water_sanitation_20_units",
            field=models.IntegerField(blank=True, null=True, verbose_name="ERU water sanitation MSM20 units"),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="eru_water_sanitation_40",
            field=models.IntegerField(
                choices=[(0, "No"), (1, "Requested"), (2, "Planned"), (3, "Completed")],
                default=0,
                verbose_name="ERU water sanitation M40",
            ),
        ),
        migrations.AlterField(
            model_name="fieldreport",
            name="eru_water_sanitation_40_units",
            field=models.IntegerField(blank=True, null=True, verbose_name="ERU water sanitation M40 units"),
        ),
        migrations.AddField(
            model_name="gdacsevent",
            name="disaster_type",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.PROTECT, to="api.disastertype", verbose_name="disaster type"
            ),
        ),
        # migrations.RunPython(
        #     code=api.migrations.0188_auto_20231130_0900.Migration.migrate_event_type,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        # ),
        migrations.AddField(
            model_name="country",
            name="address_1",
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name="Address 1"),
        ),
        migrations.AddField(
            model_name="country",
            name="address_2",
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name="Address 2"),
        ),
        migrations.AddField(
            model_name="country",
            name="city_code",
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name="City Code"),
        ),
        migrations.AddField(
            model_name="country",
            name="phone",
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name="Phone"),
        ),
        migrations.AddField(
            model_name="country",
            name="website",
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name="Website"),
        ),
        migrations.CreateModel(
            name="CountryDirectory",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("first_name", models.CharField(blank=True, max_length=255, null=True, verbose_name="First Name")),
                ("last_name", models.CharField(blank=True, max_length=255, null=True, verbose_name="Last Name")),
                ("position", models.CharField(blank=True, max_length=255, null=True, verbose_name="Position")),
                (
                    "country",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.country", verbose_name="Country"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NSDInitiatives",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=255, verbose_name="Title")),
                ("fund_type", models.CharField(max_length=255, verbose_name="Fund Type")),
                ("allocation", models.IntegerField(verbose_name="Allocation in CHF")),
                ("year", models.CharField(max_length=20, verbose_name="Year")),
                ("funding_period", models.IntegerField(verbose_name="Funding Period in Month")),
                (
                    "categories",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255),
                        default=list,
                        null=True,
                        size=None,
                        verbose_name="Funding categories",
                    ),
                ),
                (
                    "country",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.country", verbose_name="Country"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CountryCapacityStrengthening",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("assessment_code", models.CharField(max_length=255, verbose_name="Assessment Code")),
                ("year", models.CharField(max_length=25, verbose_name="Year of Assessment")),
                ("submission_date", models.DateTimeField(verbose_name="Submission Date")),
                ("url", models.CharField(max_length=255, verbose_name="Url")),
                (
                    "assessment_type",
                    models.IntegerField(choices=[(0, "Ocac"), (1, "Boca")], verbose_name="Country Assessment Type"),
                ),
                ("branch_name", models.CharField(blank=True, max_length=255, null=True, verbose_name="Branch Name")),
                (
                    "country",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.country", verbose_name="Country"),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="appeal",
            name="country",
            field=models.ForeignKey(
                default=0, on_delete=django.db.models.deletion.CASCADE, to="api.country", verbose_name="country"
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="appealhistory",
            name="country",
            field=models.ForeignKey(
                default=0, on_delete=django.db.models.deletion.CASCADE, to="api.country", verbose_name="country"
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="gdacsevent",
            name="severity",
            field=models.TextField(blank=True, null=True, verbose_name="severity"),
        ),
        migrations.AddField(
            model_name="country",
            name="founded_date",
            field=models.DateField(blank=True, null=True, verbose_name="Found date"),
        ),
        migrations.CreateModel(
            name="CountrySupportingPartner",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("first_name", models.CharField(blank=True, max_length=255, null=True, verbose_name="First Name")),
                ("last_name", models.CharField(blank=True, max_length=255, null=True, verbose_name="Last Name")),
                ("position", models.CharField(blank=True, max_length=255, null=True, verbose_name="Position")),
                ("email", models.CharField(blank=True, max_length=255, null=True, verbose_name="Email")),
                (
                    "country",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.country", verbose_name="Country"),
                ),
                (
                    "supporting_type",
                    models.IntegerField(
                        blank=True,
                        choices=[(0, "Ifrc"), (1, "International Partners")],
                        null=True,
                        verbose_name="Supporting Type",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="country",
            name="disaster_law_url",
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name="Disaster law url"),
        ),
        migrations.CreateModel(
            name="CountryOrganizationalCapacity",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("leadership_capacity", models.TextField(blank=True, null=True, verbose_name="Leadership Capacity")),
                ("youth_capacity", models.TextField(blank=True, null=True, verbose_name="Youth Capacity")),
                ("volunteer_capacity", models.TextField(blank=True, null=True, verbose_name="Volunteer Capacity")),
                ("financial_capacity", models.TextField(blank=True, null=True, verbose_name="Financial Capacity")),
                (
                    "country",
                    models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to="api.country", verbose_name="Country"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CountryICRCPresence",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("icrc_presence", models.BooleanField(blank=True, null=True, verbose_name="ICRC Presence")),
                ("url", models.CharField(blank=True, max_length=255, null=True, verbose_name="Url")),
                ("key_operation", models.BooleanField(blank=True, null=True, verbose_name="Key Operations")),
                ("description", models.TextField(blank=True, null=True, verbose_name="Description")),
                (
                    "country",
                    models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to="api.country", verbose_name="Country"),
                ),
            ],
        ),
        migrations.RemoveField(
            model_name="event",
            name="slug_ar",
        ),
        migrations.RemoveField(
            model_name="event",
            name="slug_en",
        ),
        migrations.RemoveField(
            model_name="event",
            name="slug_es",
        ),
        migrations.RemoveField(
            model_name="event",
            name="slug_fr",
        ),
        migrations.AlterField(
            model_name="export",
            name="export_type",
            field=models.CharField(
                choices=[
                    ("dref-applications", "Dref Applications"),
                    ("dref-operational-updates", "Dref Operational Updates"),
                    ("dref-final-reports", "Dref Final Reports"),
                    ("per", "Per"),
                ],
                max_length=255,
                verbose_name="Export Type",
            ),
        ),
        migrations.RemoveField(
            model_name="export",
            name="selector",
        ),
        migrations.RemoveField(
            model_name="eventfeatureddocument",
            name="description_ar",
        ),
        migrations.RemoveField(
            model_name="eventfeatureddocument",
            name="description_en",
        ),
        migrations.RemoveField(
            model_name="eventfeatureddocument",
            name="description_es",
        ),
        migrations.RemoveField(
            model_name="eventfeatureddocument",
            name="description_fr",
        ),
        migrations.RemoveField(
            model_name="eventfeatureddocument",
            name="title_ar",
        ),
        migrations.RemoveField(
            model_name="eventfeatureddocument",
            name="title_en",
        ),
        migrations.RemoveField(
            model_name="eventfeatureddocument",
            name="title_es",
        ),
        migrations.RemoveField(
            model_name="eventfeatureddocument",
            name="title_fr",
        ),
        migrations.RemoveField(
            model_name="eventfeatureddocument",
            name="translation_module_original_language",
        ),
        migrations.RemoveField(
            model_name="eventfeatureddocument",
            name="translation_module_skip_auto_translation",
        ),
        migrations.RemoveField(
            model_name="situationreport",
            name="name_ar",
        ),
        migrations.RemoveField(
            model_name="situationreport",
            name="name_en",
        ),
        migrations.RemoveField(
            model_name="situationreport",
            name="name_es",
        ),
        migrations.RemoveField(
            model_name="situationreport",
            name="name_fr",
        ),
        migrations.RemoveField(
            model_name="situationreport",
            name="translation_module_original_language",
        ),
        migrations.RemoveField(
            model_name="situationreport",
            name="translation_module_skip_auto_translation",
        ),
        migrations.AddField(
            model_name="adminkeyfigure",
            name="deck_ar",
            field=models.CharField(max_length=50, null=True, verbose_name="deck"),
        ),
        migrations.AddField(
            model_name="adminkeyfigure",
            name="deck_en",
            field=models.CharField(max_length=50, null=True, verbose_name="deck"),
        ),
        migrations.AddField(
            model_name="adminkeyfigure",
            name="deck_es",
            field=models.CharField(max_length=50, null=True, verbose_name="deck"),
        ),
        migrations.AddField(
            model_name="adminkeyfigure",
            name="deck_fr",
            field=models.CharField(max_length=50, null=True, verbose_name="deck"),
        ),
        migrations.AddField(
            model_name="adminkeyfigure",
            name="translation_module_original_language",
            field=models.CharField(
                choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                default="en",
                help_text="Language used to create this entity",
                max_length=2,
                verbose_name="Entity Original language",
            ),
        ),
        migrations.AddField(
            model_name="adminkeyfigure",
            name="translation_module_skip_auto_translation",
            field=models.BooleanField(
                default=False, help_text="Skip auto translation operation for this entity?", verbose_name="Skip auto translation"
            ),
        ),
        migrations.AddField(
            model_name="keyfigure",
            name="deck_ar",
            field=models.CharField(help_text="key figure units", max_length=50, null=True, verbose_name="deck"),
        ),
        migrations.AddField(
            model_name="keyfigure",
            name="deck_en",
            field=models.CharField(help_text="key figure units", max_length=50, null=True, verbose_name="deck"),
        ),
        migrations.AddField(
            model_name="keyfigure",
            name="deck_es",
            field=models.CharField(help_text="key figure units", max_length=50, null=True, verbose_name="deck"),
        ),
        migrations.AddField(
            model_name="keyfigure",
            name="deck_fr",
            field=models.CharField(help_text="key figure units", max_length=50, null=True, verbose_name="deck"),
        ),
        migrations.AddField(
            model_name="keyfigure",
            name="translation_module_original_language",
            field=models.CharField(
                choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                default="en",
                help_text="Language used to create this entity",
                max_length=2,
                verbose_name="Entity Original language",
            ),
        ),
        migrations.AddField(
            model_name="keyfigure",
            name="translation_module_skip_auto_translation",
            field=models.BooleanField(
                default=False, help_text="Skip auto translation operation for this entity?", verbose_name="Skip auto translation"
            ),
        ),
        migrations.AlterField(
            model_name="export",
            name="export_type",
            field=models.CharField(
                choices=[
                    ("dref-applications", "Dref Applications"),
                    ("dref-operational-updates", "Dref Operational Updates"),
                    ("dref-final-reports", "Dref Final Reports"),
                    ("per-process", "Per Process"),
                ],
                max_length=255,
                verbose_name="Export Type",
            ),
        ),
        migrations.AddField(
            model_name="export",
            name="per_country",
            field=models.IntegerField(blank=True, null=True, verbose_name="Per Country Id"),
        ),
        migrations.AlterField(
            model_name="export",
            name="export_type",
            field=models.CharField(
                choices=[
                    ("dref-applications", "Dref Applications"),
                    ("dref-operational-updates", "Dref Operational Updates"),
                    ("dref-final-reports", "Dref Final Reports"),
                    ("per", "Per"),
                ],
                max_length=255,
                verbose_name="Export Type",
            ),
        ),
        migrations.AddField(
            model_name="country",
            name="emails",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(blank=True, max_length=255, null=True, verbose_name="Email"),
                blank=True,
                default=list,
                null=True,
                size=None,
            ),
        ),
        migrations.CreateModel(
            name="CountryKeyDocument",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255, verbose_name="Name")),
                ("url", models.CharField(max_length=255, verbose_name="Url")),
                ("thumbnail", models.CharField(max_length=255, verbose_name="Thumbnail")),
                ("document_type", models.CharField(max_length=255, verbose_name="Document Type")),
                ("year", models.DateField(verbose_name="Year")),
                (
                    "country",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.country", verbose_name="Country"),
                ),
                ("end_year", models.DateField(blank=True, null=True, verbose_name="End Year")),
                ("year_text", models.CharField(blank=True, max_length=255, null=True, verbose_name="Year Text")),
            ],
        ),
        migrations.AddField(
            model_name="profile",
            name="accepted_montandon_license_terms",
            field=models.BooleanField(default=False, verbose_name="has accepted montandon license terms?"),
        ),
        # migrations.RunPython(
        #     code=api.migrations.0211_alter_countrydirectory_unique_together_and_more.delete_ids,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        # ),
        migrations.AlterUniqueTogether(
            name="countrydirectory",
            unique_together={("country", "first_name", "last_name", "position")},
        ),
        migrations.AlterUniqueTogether(
            name="countrykeydocument",
            unique_together={("country", "url")},
        ),
        migrations.AlterUniqueTogether(
            name="nsdinitiatives",
            unique_together={("country", "year", "fund_type")},
        ),
        migrations.AddField(
            model_name="profile",
            name="limit_access_to_guest",
            field=models.BooleanField(
                default=True,
                help_text="If this value is set to true, the user is treated as a guest user regardless of any other permissions they may have, thereby depriving them of all non-guest user permissions.",
                verbose_name="limit access to guest user permissions",
            ),
        ),
        # migrations.RunPython(
        #     code=api.migrations.0212_profile_limit_access_to_guest.set_limit_access_to_guest_to_false,
        # ),
        # migrations.RunPython(
        #     code=api.migrations.0212_alter_countrycapacitystrengthening_unique_together.delete_ids,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        # ),
        migrations.AlterUniqueTogether(
            name="countrycapacitystrengthening",
            unique_together={("assessment_type", "assessment_code")},
        ),
    ]
