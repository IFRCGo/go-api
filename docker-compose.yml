version: '3.5'

x-server: &base_server_setup
  image: ifrcgo/go-api:latest
  build: .
  # To attach to container with stdin `docker attach <container_name>`
  # Used for python debugging.
  stdin_open: true
  tty: true
  environment:
    # Overwrite this using .env (for additional configuration, look at main/settings.py:env
    # Database (from db.environment)
    DJANGO_DB_HOST: ${DJANGO_DB_HOST:-db}
    DJANGO_DB_NAME: ${DJANGO_DB_NAME:-test}
    DJANGO_DB_USER: ${DJANGO_DB_USER:-test}
    DJANGO_DB_PASS: ${DJANGO_DB_PASS:-test}
    # Other development defaults configs
    DJANGO_DEBUG: ${DJANGO_DEBUG:-true}
    GO_ENVIRONMENT: ${GO_ENVIRONMENT:-development}
    API_FQDN: ${API_FQDN:-localhost:8000}
    FRONTEND_URL: ${FRONTEND_URL:-localhost:3000}
    DEBUG_EMAIL: ${DEBUG_EMAIL:-true}
    MOLNIX_API_BASE: ${MOLNIX_API_BASE:-https://api.ifrc-staging.rpm.molnix.com/api/}
    ERP_API_ENDPOINT: ${ERP_API_ENDPOINT:-https://ifrctintapim001.azure-api.net/GoAPI/ExtractGoEmergency}
    ERP_API_SUBSCRIPTION_KEY: ${ERP_API_SUBSCRIPTION_KEY:-abcdef}
    CELERY_REDIS_URL: ${CELERY_REDIS_URL:-redis://redis:6379/0}
    CACHE_REDIS_URL: ${CACHE_REDIS_URL:-redis://redis:6379/1}
    CACHE_TEST_REDIS_URL: ${CACHE_TEST_REDIS_URL:-redis://redis:6379/11}
    CACHE_MIDDLEWARE_SECONDS: ${CACHE_MIDDLEWARE_SECONDS:-600}
    ELASTIC_SEARCH_HOST: ${ELASTIC_SEARCH_HOST:-elasticsearch://elasticsearch:9200}
    # Appeal API
    APPEALS_USER: ${APPEALS_USER}
    APPEALS_PASS: ${APPEALS_PASS}
    # Sentry
    SENTRY_DSN: ${SENTRY_DSN:-}
    SENTRY_SAMPLE_RATE: ${SENTRY_SAMPLE_RATE:-0.2}
    # Maintenance mode
    DJANGO_READ_ONLY: ${DJANGO_READ_ONLY:-false}

  env_file:
    - .env
  volumes:
    - '.:/home/ifrc/go-api'
  depends_on:
    - db
    - redis
    - elasticsearch
    - kibana


services:
  db:
    image: postgis/postgis:11-3.1-alpine
    environment:
      POSTGRES_PASSWORD: test
      POSTGRES_USER: test
      POSTGRES_DB: test
    volumes:
      - './.db/pg:/var/lib/postgresql/data'

  redis:
    image: redis:latest
    volumes:
      - redis-data:/data

  # NOTE: Used Only for local development
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.0.0
    container_name: elasticsearch
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - http.cors.enabled=true
      - http.cors.allow-origin=*
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elastic-search-data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200

  # NOTE: Used Only for local development
  kibana:
    image: 'docker.elastic.co/kibana/kibana:7.0.0'
    container_name: kibana
    environment:
      SERVER_NAME: kibana.local
      ELASTICSEARCH_URL: http://elasticsearch:9200
    ports:
      - '5601:5601'
    depends_on:
      - elasticsearch


  serve:
    <<: *base_server_setup
    ports:
      - 8000:8000
    command: python manage.py runserver 0.0.0.0:8000

  # For development only
  celery:
    <<: *base_server_setup
    command: python manage.py run_celery_dev

  bash:
    <<: *base_server_setup
    entrypoint: /bin/bash

  shell:
    <<: *base_server_setup
    command: python manage.py shell

  loaddata:
    <<: *base_server_setup
    command: python manage.py loaddata Regions Countries Districts DisasterTypes Actions Groups

  ingest_databank:
    <<: *base_server_setup
    command: python manage.py ingest_databank

  collectstatic:
    <<: *base_server_setup
    command: python manage.py collectstatic --noinput -l

  createsuperuser:
    <<: *base_server_setup
    command: python manage.py createsuperuser

  ingest_appeals:
    <<: *base_server_setup
    command: python manage.py ingest_appeals

  ingest_appeal_docs:
    <<: *base_server_setup
    command: python manage.py ingest_appeal_docs

  user_registration_reminder:
    <<: *base_server_setup
    command: python manage.py user_registration_reminder

  ingest_appeal_docs_fullscan:
    <<: *base_server_setup
    command: python manage.py ingest_appeal_docs --fullscan

  ingest_mdb:
    <<: *base_server_setup
    command: python manage.py ingest_mdb

  migrate:
    <<: *base_server_setup
    command: python manage.py migrate

  makemigrations:
    <<: *base_server_setup
    command: python manage.py makemigrations

  makemigrations_merge:
    <<: *base_server_setup
    command: python manage.py makemigrations --merge

  make_permissions:
    <<: *base_server_setup
    command: python manage.py make_permissions

  test:
    <<: *base_server_setup
    command: pytest --durations=10

  test_snapshot_update:
    <<: *base_server_setup
    command: python manage.py test -k --snapshot-update

  testr:
    <<: *base_server_setup
    command: pytest --reuse-db --durations=10 -s

  coverage:
    <<: *base_server_setup
    command: coverage run --source='.' manage.py test -k

  coverage_report:
    <<: *base_server_setup
    command: coverage report

  coverage_html:
    <<: *base_server_setup
    command: coverage html

  triggers_to_db:
    <<: *base_server_setup
    command: python manage.py triggers_to_db

volumes:
  redis-data:
  elastic-search-data:
