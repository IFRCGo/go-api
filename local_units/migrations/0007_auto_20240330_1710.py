# Generated by Django 3.2.25 on 2024-03-28 17:10

import django.core.validators
import django.db.models.deletion
from django.core.management import call_command
from django.db import migrations, models


class Migration(migrations.Migration):

    def forwards_func(apps, schema_editor):
        print("forwards")
        call_command("loaddata", "health-affiliation-functionality.json", verbosity=2)

    def reverse_func(apps, schema_editor):
        print("reverse")
        model = apps.get_model("local_units", "affiliation")
        model.objects.all().delete()
        model = apps.get_model("local_units", "functionality")
        model.objects.all().delete()
        model = apps.get_model("local_units", "facilitytype")
        model.objects.all().delete()
        model = apps.get_model("local_units", "primaryhcc")
        model.objects.all().delete()
        model = apps.get_model("local_units", "hospitaltype")
        model.objects.all().delete()
        model = apps.get_model("local_units", "generalmedicalservice")
        model.objects.all().delete()
        model = apps.get_model("local_units", "specializedmedicalservice")
        model.objects.all().delete()
        model = apps.get_model("local_units", "bloodservice")
        model.objects.all().delete()
        model = apps.get_model("local_units", "professionaltrainingfacility")
        model.objects.all().delete()

    dependencies = [
        ("local_units", "0006_auto_20240329_0849"),
    ]

    operations = [
        migrations.CreateModel(
            name="Affiliation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "code",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)]
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
            ],
        ),
        migrations.CreateModel(
            name="BloodService",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "code",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)]
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
            ],
        ),
        migrations.CreateModel(
            name="FacilityType",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "code",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)]
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
            ],
        ),
        migrations.CreateModel(
            name="Functionality",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "code",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)]
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
            ],
        ),
        migrations.CreateModel(
            name="GeneralMedicalService",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "code",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)]
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
            ],
        ),
        migrations.CreateModel(
            name="HospitalType",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "code",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)]
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
            ],
        ),
        migrations.CreateModel(
            name="PrimaryHCC",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "code",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)]
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
            ],
        ),
        migrations.CreateModel(
            name="ProfessionalTrainingFacility",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "code",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)]
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
            ],
        ),
        migrations.CreateModel(
            name="SpecializedMedicalService",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "code",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)]
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
            ],
        ),
        migrations.AlterField(
            model_name="localunit",
            name="level",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="local_unit_level",
                to="local_units.localunitlevel",
                verbose_name="Coverage",
            ),
        ),
        migrations.AlterField(
            model_name="localunitlevel",
            name="level",
            field=models.IntegerField(
                validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(0)],
                verbose_name="Coverage",
            ),
        ),
        migrations.CreateModel(
            name="HealthData",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("other_affiliation", models.CharField(blank=True, max_length=300, null=True, verbose_name="Other Affiliation")),
                ("focal_point_email", models.EmailField(blank=True, max_length=90, null=True, verbose_name="Focal point email")),
                (
                    "focal_point_phone_number",
                    models.CharField(blank=True, max_length=90, null=True, verbose_name="Focal point phone number"),
                ),
                (
                    "focal_point_position",
                    models.CharField(blank=True, max_length=90, null=True, verbose_name="Focal point position"),
                ),
                (
                    "other_facility_type",
                    models.CharField(blank=True, max_length=300, null=True, verbose_name="Other facility type"),
                ),
                ("speciality", models.CharField(blank=True, max_length=200, null=True, verbose_name="Speciality")),
                ("is_teaching_hospital", models.BooleanField(default=False, verbose_name="Is teaching hospital?")),
                ("is_in_patient_capacity", models.BooleanField(default=False, verbose_name="Has in-patient capacity?")),
                ("is_isolation_rooms_wards", models.BooleanField(default=False, verbose_name="Has isolation rooms wards?")),
                ("maximum_capacity", models.IntegerField(blank=True, null=True, verbose_name="Maximum Capacity")),
                (
                    "number_of_isolation_rooms",
                    models.IntegerField(blank=True, null=True, verbose_name="Number of isolation rooms"),
                ),
                ("is_warehousing", models.BooleanField(default=False, verbose_name="Has warehousing?")),
                ("is_cold_chain", models.BooleanField(default=False, verbose_name="Has cold chain?")),
                ("ambulance_type_a", models.IntegerField(blank=True, null=True, verbose_name="Ambulance Type A")),
                ("ambulance_type_b", models.IntegerField(blank=True, null=True, verbose_name="Ambulance Type B")),
                ("ambulance_type_c", models.IntegerField(blank=True, null=True, verbose_name="Ambulance Type C")),
                ("other_services", models.CharField(blank=True, max_length=300, null=True, verbose_name="Other Services")),
                (
                    "total_number_of_human_resource",
                    models.IntegerField(blank=True, null=True, verbose_name="Total number of Human Resource"),
                ),
                ("general_practitioner", models.IntegerField(blank=True, null=True, verbose_name="General Practitioner")),
                ("specialist", models.IntegerField(blank=True, null=True, verbose_name="Specialist")),
                ("residents_doctor", models.IntegerField(blank=True, null=True, verbose_name="Residents Doctor")),
                ("nurse", models.IntegerField(blank=True, null=True, verbose_name="Nurse")),
                ("dentist", models.IntegerField(blank=True, null=True, verbose_name="Dentist")),
                ("nursing_aid", models.IntegerField(blank=True, null=True, verbose_name="Nursing Aid")),
                ("midwife", models.IntegerField(blank=True, null=True, verbose_name="Midwife")),
                ("other_medical_heal", models.BooleanField(default=False, verbose_name="Other medical heal")),
                ("other_profiles", models.CharField(blank=True, max_length=200, null=True, verbose_name="Other Profiles")),
                ("feedback", models.CharField(blank=True, max_length=500, null=True, verbose_name="Feedback")),
                (
                    "affiliation",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="health_affiliation",
                        to="local_units.affiliation",
                        verbose_name="Affiliation",
                    ),
                ),
                (
                    "blood_services",
                    models.ManyToManyField(
                        blank=True, related_name="blood_services", to="local_units.BloodService", verbose_name="Blood Services"
                    ),
                ),
                (
                    "functionality",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="health_functionality",
                        to="local_units.functionality",
                        verbose_name="Functionality",
                    ),
                ),
                (
                    "general_medical_services",
                    models.ManyToManyField(
                        blank=True,
                        related_name="general_medical_services",
                        to="local_units.GeneralMedicalService",
                        verbose_name="General medical services",
                    ),
                ),
                (
                    "health_facility_type",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="health_facility_type",
                        to="local_units.facilitytype",
                        verbose_name="Health facility type",
                    ),
                ),
                (
                    "hospital_type",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="hospital_type",
                        to="local_units.hospitaltype",
                        verbose_name="Hospital type",
                    ),
                ),
                (
                    "primary_health_care_center",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="primary_health_care_center",
                        to="local_units.primaryhcc",
                        verbose_name="Primary Health Care Center",
                    ),
                ),
                (
                    "professional_training_facilities",
                    models.ManyToManyField(
                        blank=True,
                        related_name="professional_training_facilities",
                        to="local_units.ProfessionalTrainingFacility",
                        verbose_name="Professional Training Facilities",
                    ),
                ),
                (
                    "specialized_medical_beyond_primary_level",
                    models.ManyToManyField(
                        blank=True,
                        related_name="specialized_medical_beyond_primary_level",
                        to="local_units.SpecializedMedicalService",
                        verbose_name="Specialized medical beyond primary level",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="localunit",
            name="health",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="health_data",
                to="local_units.healthdata",
                verbose_name="Health Data",
            ),
        ),
        migrations.AlterModelOptions(
            name="functionality",
            options={"verbose_name": "Functionality", "verbose_name_plural": "Functionalities"},
        ),
        migrations.AlterModelOptions(
            name="primaryhcc",
            options={"verbose_name": "Primary Health Care Center", "verbose_name_plural": "Primary Health Care Centers"},
        ),
        migrations.AlterModelOptions(
            name="professionaltrainingfacility",
            options={"verbose_name": "Professional Training Facility", "verbose_name_plural": "Professional Training Facilities"},
        ),
        migrations.AlterModelOptions(
            name="healthdata",
            options={"verbose_name": "Health Data", "verbose_name_plural": "Health Data"},
        ),
        migrations.RemoveField(
            model_name="delegationoffice",
            name="is_public",
        ),
        migrations.RemoveField(
            model_name="localunit",
            name="is_public",
        ),
        migrations.AddField(
            model_name="delegationoffice",
            name="visibility",
            field=models.IntegerField(
                choices=[(1, "RCRC Movement"), (2, "IFRC Secretariat"), (3, "Public"), (4, "IFRC and NS")],
                default=2,
                verbose_name="visibility",
            ),
        ),
        migrations.AddField(
            model_name="localunit",
            name="visibility",
            field=models.IntegerField(
                choices=[(1, "RCRC Movement"), (2, "IFRC Secretariat"), (3, "Public"), (4, "IFRC and NS")],
                default=2,
                verbose_name="visibility",
            ),
        ),
        migrations.RunPython(forwards_func, reverse_func, elidable=True),
    ]
