# Generated by Django 4.2.16 on 2024-10-08 07:30

import django.contrib.gis.db.models.fields
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("api", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Affiliation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "code",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)]
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
            ],
        ),
        migrations.CreateModel(
            name="BloodService",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "code",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)]
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
            ],
        ),
        migrations.CreateModel(
            name="DelegationOfficeType",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "code",
                    models.IntegerField(
                        validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(0)],
                        verbose_name="Type Code",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
            ],
        ),
        migrations.CreateModel(
            name="FacilityType",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "code",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)]
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
            ],
        ),
        migrations.CreateModel(
            name="Functionality",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "code",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)]
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
            ],
            options={
                "verbose_name": "Functionality",
                "verbose_name_plural": "Functionalities",
            },
        ),
        migrations.CreateModel(
            name="GeneralMedicalService",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "code",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)]
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
            ],
        ),
        migrations.CreateModel(
            name="HealthData",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now=True, verbose_name="Created at")),
                ("modified_at", models.DateTimeField(auto_now=True, verbose_name="Modified at")),
                ("other_affiliation", models.TextField(blank=True, null=True, verbose_name="Other Affiliation")),
                ("focal_point_email", models.EmailField(blank=True, max_length=255, null=True, verbose_name="Focal point email")),
                (
                    "focal_point_phone_number",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="Focal point phone number"),
                ),
                (
                    "focal_point_position",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="Focal point position"),
                ),
                ("other_facility_type", models.TextField(blank=True, null=True, verbose_name="Other facility type")),
                ("speciality", models.CharField(blank=True, max_length=255, null=True, verbose_name="Speciality")),
                ("is_teaching_hospital", models.BooleanField(blank=True, null=True, verbose_name="Is teaching hospital?")),
                ("is_in_patient_capacity", models.BooleanField(blank=True, null=True, verbose_name="Has in-patient capacity?")),
                (
                    "is_isolation_rooms_wards",
                    models.BooleanField(blank=True, null=True, verbose_name="Has isolation rooms wards?"),
                ),
                ("maximum_capacity", models.IntegerField(blank=True, null=True, verbose_name="Maximum Capacity")),
                (
                    "number_of_isolation_rooms",
                    models.IntegerField(blank=True, null=True, verbose_name="Number of isolation rooms"),
                ),
                ("is_warehousing", models.BooleanField(blank=True, null=True, verbose_name="Has warehousing?")),
                ("is_cold_chain", models.BooleanField(blank=True, null=True, verbose_name="Has cold chain?")),
                ("ambulance_type_a", models.IntegerField(blank=True, null=True, verbose_name="Ambulance Type A")),
                ("ambulance_type_b", models.IntegerField(blank=True, null=True, verbose_name="Ambulance Type B")),
                ("ambulance_type_c", models.IntegerField(blank=True, null=True, verbose_name="Ambulance Type C")),
                ("other_services", models.TextField(blank=True, null=True, verbose_name="Other Services")),
                (
                    "total_number_of_human_resource",
                    models.IntegerField(blank=True, null=True, verbose_name="Total number of Human Resource"),
                ),
                ("general_practitioner", models.IntegerField(blank=True, null=True, verbose_name="General Practitioner")),
                ("specialist", models.IntegerField(blank=True, null=True, verbose_name="Specialist")),
                ("residents_doctor", models.IntegerField(blank=True, null=True, verbose_name="Residents Doctor")),
                ("nurse", models.IntegerField(blank=True, null=True, verbose_name="Nurse")),
                ("dentist", models.IntegerField(blank=True, null=True, verbose_name="Dentist")),
                ("nursing_aid", models.IntegerField(blank=True, null=True, verbose_name="Nursing Aid")),
                ("midwife", models.IntegerField(blank=True, null=True, verbose_name="Midwife")),
                ("other_medical_heal", models.BooleanField(blank=True, null=True, verbose_name="Other medical heal")),
                ("other_profiles", models.CharField(blank=True, max_length=200, null=True, verbose_name="Other Profiles")),
                ("feedback", models.TextField(blank=True, null=True, verbose_name="Feedback")),
                (
                    "affiliation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="health_affiliation",
                        to="local_units.affiliation",
                        verbose_name="Affiliation",
                    ),
                ),
                (
                    "blood_services",
                    models.ManyToManyField(
                        blank=True, related_name="blood_services", to="local_units.bloodservice", verbose_name="Blood Services"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_by_health_data",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "functionality",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="health_functionality",
                        to="local_units.functionality",
                        verbose_name="Functionality",
                    ),
                ),
                (
                    "general_medical_services",
                    models.ManyToManyField(
                        blank=True,
                        related_name="general_medical_services",
                        to="local_units.generalmedicalservice",
                        verbose_name="General medical services",
                    ),
                ),
                (
                    "health_facility_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="health_facility_type",
                        to="local_units.facilitytype",
                        verbose_name="Health facility type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Health Data",
                "verbose_name_plural": "Health Data",
            },
        ),
        migrations.CreateModel(
            name="HospitalType",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "code",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)]
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
            ],
        ),
        migrations.CreateModel(
            name="LocalUnitLevel",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "level",
                    models.IntegerField(
                        validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(0)],
                        verbose_name="Coverage",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
            ],
            options={
                "verbose_name": "Local unit coverage",
                "verbose_name_plural": "Local unit coverages",
            },
        ),
        migrations.CreateModel(
            name="LocalUnitType",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "code",
                    models.IntegerField(
                        validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(0)],
                        verbose_name="Type Code",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                ("colour", models.CharField(blank=True, max_length=50, null=True, verbose_name="Local Unit Colour")),
            ],
        ),
        migrations.CreateModel(
            name="PrimaryHCC",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "code",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)]
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
            ],
            options={
                "verbose_name": "Primary Health Care Center",
                "verbose_name_plural": "Primary Health Care Centers",
            },
        ),
        migrations.CreateModel(
            name="ProfessionalTrainingFacility",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "code",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)]
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
            ],
            options={
                "verbose_name": "Professional Training Facility",
                "verbose_name_plural": "Professional Training Facilities",
            },
        ),
        migrations.CreateModel(
            name="SpecializedMedicalService",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "code",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)]
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
            ],
        ),
        migrations.CreateModel(
            name="LocalUnit",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("subtype", models.CharField(blank=True, max_length=200, null=True, verbose_name="Subtype")),
                (
                    "local_branch_name",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="Branch name in local language"),
                ),
                (
                    "english_branch_name",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="Branch name in English"),
                ),
                ("created_at", models.DateTimeField(auto_now=True, verbose_name="Created at")),
                ("modified_at", models.DateTimeField(auto_now=True, verbose_name="Modified at")),
                ("date_of_data", models.DateField(verbose_name="Date of data collection")),
                ("draft", models.BooleanField(default=False, verbose_name="Draft")),
                ("validated", models.BooleanField(default=False, verbose_name="Validated")),
                (
                    "visibility",
                    models.IntegerField(
                        choices=[(1, "RCRC Movement"), (2, "IFRC Secretariat"), (3, "Public"), (4, "IFRC and NS")],
                        default=2,
                        verbose_name="visibility",
                    ),
                ),
                ("source_en", models.CharField(blank=True, max_length=500, null=True, verbose_name="Source in Local Language")),
                ("source_loc", models.CharField(blank=True, max_length=500, null=True, verbose_name="Source in English")),
                (
                    "address_loc",
                    models.CharField(blank=True, max_length=500, null=True, verbose_name="Address in local language"),
                ),
                ("address_en", models.CharField(blank=True, max_length=500, null=True, verbose_name="Address in English")),
                ("city_loc", models.CharField(blank=True, max_length=255, null=True, verbose_name="City in local language")),
                ("city_en", models.CharField(blank=True, max_length=255, null=True, verbose_name="City in English")),
                (
                    "focal_person_loc",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="Focal person for local language"),
                ),
                (
                    "focal_person_en",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="Focal person for English"),
                ),
                ("postcode", models.CharField(blank=True, max_length=10, null=True, verbose_name="Postal code")),
                ("phone", models.CharField(blank=True, max_length=30, null=True, verbose_name="Telephone")),
                ("email", models.EmailField(blank=True, max_length=255, null=True, verbose_name="Email")),
                ("link", models.URLField(blank=True, max_length=255, null=True, verbose_name="Social link")),
                ("location", django.contrib.gis.db.models.fields.PointField(help_text="Local Unit Location", srid=4326)),
                (
                    "country",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="local_unit_country",
                        to="api.country",
                        verbose_name="Country",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_by_local_unit",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "health",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="health_data",
                        to="local_units.healthdata",
                        verbose_name="Health Data",
                    ),
                ),
                (
                    "level",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="local_unit_level",
                        to="local_units.localunitlevel",
                        verbose_name="Coverage",
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="modified_by_local_unit",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="modified by",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="local_unit_type",
                        to="local_units.localunittype",
                        verbose_name="Type",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="healthdata",
            name="hospital_type",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="hospital_type",
                to="local_units.hospitaltype",
                verbose_name="Hospital type",
            ),
        ),
        migrations.AddField(
            model_name="healthdata",
            name="modified_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="modified_by_health_data",
                to=settings.AUTH_USER_MODEL,
                verbose_name="modified by",
            ),
        ),
        migrations.AddField(
            model_name="healthdata",
            name="primary_health_care_center",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="primary_health_care_center",
                to="local_units.primaryhcc",
                verbose_name="Primary Health Care Center",
            ),
        ),
        migrations.AddField(
            model_name="healthdata",
            name="professional_training_facilities",
            field=models.ManyToManyField(
                blank=True,
                related_name="professional_training_facilities",
                to="local_units.professionaltrainingfacility",
                verbose_name="Professional Training Facilities",
            ),
        ),
        migrations.AddField(
            model_name="healthdata",
            name="specialized_medical_beyond_primary_level",
            field=models.ManyToManyField(
                blank=True,
                related_name="specialized_medical_beyond_primary_level",
                to="local_units.specializedmedicalservice",
                verbose_name="Specialized medical beyond primary level",
            ),
        ),
        migrations.CreateModel(
            name="DelegationOffice",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255, verbose_name="Name")),
                ("city", models.CharField(blank=True, max_length=500, null=True, verbose_name="City")),
                ("address", models.CharField(blank=True, max_length=500, null=True, verbose_name="Address")),
                ("postcode", models.CharField(blank=True, max_length=20, null=True, verbose_name="Postal code")),
                ("location", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("society_url", models.URLField(blank=True, max_length=255, null=True, verbose_name="URL of national society")),
                ("url_ifrc", models.URLField(blank=True, max_length=255, null=True, verbose_name="URL on IFRC webpage")),
                ("hod_first_name", models.CharField(blank=True, max_length=255, null=True, verbose_name="HOD first name")),
                ("hod_last_name", models.CharField(blank=True, max_length=255, null=True, verbose_name="HOD last name")),
                ("hod_mobile_number", models.CharField(blank=True, max_length=255, null=True, verbose_name="HOD mobile number")),
                ("hod_email", models.EmailField(blank=True, max_length=255, null=True, verbose_name="HOD Email")),
                ("assistant_name", models.CharField(blank=True, max_length=255, null=True, verbose_name="Assistant name")),
                ("assistant_email", models.EmailField(blank=True, max_length=255, null=True, verbose_name="Assistant email")),
                ("is_ns_same_location", models.BooleanField(default=False, verbose_name="NS on same location?")),
                ("is_multiple_ifrc_offices", models.BooleanField(default=False, verbose_name="Multiple IFRC offices?")),
                (
                    "visibility",
                    models.IntegerField(
                        choices=[(1, "RCRC Movement"), (2, "IFRC Secretariat"), (3, "Public"), (4, "IFRC and NS")],
                        default=2,
                        verbose_name="visibility",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now=True, verbose_name="Created at")),
                ("modified_at", models.DateTimeField(auto_now=True, verbose_name="Modified at")),
                ("date_of_data", models.DateField(blank=True, null=True, verbose_name="Date of data collection")),
                (
                    "country",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="delegation_office_country",
                        to="api.country",
                        verbose_name="Country",
                    ),
                ),
                (
                    "dotype",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="delegation_office_type",
                        to="local_units.delegationofficetype",
                        verbose_name="Type",
                    ),
                ),
            ],
        ),
    ]
