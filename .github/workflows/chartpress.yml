name: Chartpress Build, Publish & Deploy
on: push
env:
  STAGING_REGISTRY_NAME: ifrcgotest
  STAGING_CLUSTER_NAME: ifrcgo-staging-cluster
  STAGING_CLUSTER_RESOURCE_GROUP: ifrcgo-staging_rg
  # PRODUCTION_REGISTRY_NAME: ''
  # PRODUCTION_CLUSTER_RESOURCE_GROUP: ''
  # PRODUCTION_CLUSTER_NAME: ''
  NAMESPACE: default
jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      TF_VAR_username: github
      subscriptionId: ${{ secrets.TERRAFORM_SUBSCRIPTION_ID }}
      tenantId: ${{ secrets.TERRAFORM_TENANT_ID }}
      servicePrincipalId: ${{ secrets.TERRAFORM_SERVICE_PRINCIPAL_ID }}
      servicePrincipalKey: ${{ secrets.TERRAFORM_SERVICE_PRINCIPAL_KEY }}
      storageAccessKey: ${{ secrets.TERRAFORM_STORAGE_KEY }}
    steps:
    - uses: actions/checkout@v1
    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.STAGING_REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.STAGING_REGISTRY_USERNAME }}
        password: ${{ secrets.STAGING_REGISTRY_PASSWORD }}
    - name: Setup python
      uses: actions/setup-python@v2
      with:
        python-version: '3.6'
    - name: Setup git
      run: git config --global user.email "noreply@developmentseed.org" && git config --global user.name "Github Action"
    - name: Install Chartpress
      run: |
        pip install -v chartpress
    - name: Add ~/home/.local/bin to Github Path
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Build & Publish
      run: ./deploy/scripts/cipublish

    # Uncomment this section to create a dev stack
    # - name: Deploy -- Dev
    #   env:
    #     postgresPassword: ${{ secrets.TERRAFORM_STAGING_POSTGRES_PASSWORD }}
    #     auth0BaseUrl: ${{ secrets.STAGING_AUTH0_ISSUER_BASE_URL }}
    #   if: startsWith(github.event.head_commit.message, '[deploy]')
    #   run: ./scripts/cideploy --dev

    Uncomment this section to create a staging stack
    - name: Deploy -- Staging
      env:
        DJANGO_SECRET_KEY: ${{ secrets.STAGING_DJANGO_SECRET_KEY }}
        DJANGO_DB_NAME: ${{ secrets.STAGING_DJANGO_DB_NAME }}
        DJANGO_DB_USER: ${{ secrets.STAGING_DJANGO_DB_USER }}
        DJANGO_DB_PASS: ${{ secrets.STAGING_DJANGO_DB_PASS }}
        DJANGO_DB_HOST: ${{ secrets.STAGING_DJANGO_DB_HOST }}
        DJANGO_DB_PORT: ${{ secrets.STAGING_DJANGO_DB_PORT }}
        AZURE_STORAGE_ACCOUNT: ${{ secrets.STAGING_AZURE_STORAGE_ACCOUNT }}
        AZURE_STORAGE_KEY: ${{ secrets.STAGING_AZURE_STORAGE_KEY }}
        EMAIL_API_ENDPOINT: ${{ secrets.STAGING_EMAIL_API_ENDPOINT }}
        EMAIL_HOST: ${{ secrets.STAGING_EMAIL_HOST }}
        EMAIL_PORT: ${{ secrets.STAGING_EMAIL_PORT }}
        EMAIL_USER: ${{ secrets.STAGING_EMAIL_USER }}
        EMAIL_PASS: ${{ secrets.STAGING_EMAIL_PASS }}
        TEST_EMAILS: ${{ secrets.STAGING_TEST_EMAILS }}
        AWS_TRANSLATE_ACCESS_KEY: ${{ secrets.STAGING_AWS_TRANSLATE_ACCESS_KEY }}
        AWS_TRANSLATE_SECRET_KEY: ${{ secrets.STAGING_AWS_TRANSLATE_SECRET_KEY }}
        AWS_TRANSLATE_REGION: ${{ secrets.STAGING_AWS_TRANSLATE_REGION }}
        CELERY_REDIS_URL: ${{ secrets.STAGING_CELERY_REDIS_URL }}
        MOLNIX_API_BASE: ${{ secrets.STAGING_MOLNIX_API_BASE }}
        MOLNIX_USERNAME: ${{ secrets.STAGING_MOLNIX_USERNAME }}
        MOLNIX_PASSWORD: ${{ secrets.STAGING_MOLNIX_PASSWORD }}
        ERP_API_ENDPOINT: ${{ secrets.STAGING_ERP_API_ENDPOINT }}
        ERP_API_SUBSCRIPTION_KEY: ${{ secrets.STAGING_ERP_API_SUBSCRIPTION_KEY }}
        FDRS_APIKEY: ${{ secrets.STAGING_FDRS_APIKEY }}
        FDRS_CREDENTIAL: ${{ secrets.STAGING_FDRS_CREDENTIAL }}
        HPC_CREDENTIAL: ${{ secrets.STAGING_HPC_CREDENTIAL }}
        APPLICATION_INSIGHTS_INSTRUMENTATION_KEY: ${{ secrets.STAGING_APPLICATION_INSIGHTS_INSTRUMENTATION_KEY }}
        ELASTIC_SEARCH_HOST: ${{ secrets.STAGING_ELASTIC_SEARCH_HOST }}
        GO_FTPHOST: ${{ secrets.STAGING_GO_FTPHOST }}
        GO_FTPUSER: ${{ secrets.STAGING_GO_FTPUSER }}
        GO_FTPPASS: ${{ secrets.STAGING_GO_FTPPASS }}
        GO_DBPASS: ${{ secrets.STAGING_GO_DBPASS }}


      if: github.ref == 'refs/heads/develop'
      run: ./scripts/cideploy --staging

    # - name: Deploy -- Production
    #   env:
    #     postgresPassword: ${{ secrets.TERRAFORM_STAGING_POSTGRES_PASSWORD }}
    #     auth0BaseUrl: ${{ secrets.PRODUCTION_AUTH0_ISSUER_BASE_URL }}
    #   if: github.ref == 'refs/heads/main'
    #   run: ./scripts/cideploy --production