name: CI

on:
  workflow_call:
    inputs:
      push_docker_image:
        type: string  # true or false
        default: "false"
    secrets:
      GO_API_ARTIFACTS_TOKEN:
        description: 'Token to pull/push to go-api-artifacts'
        required: true
    outputs:
      docker_image_name:
        description: "Only docker image name"
        value: ${{ jobs.test.outputs.docker_image_name }}
      docker_image_tag:
        description: "Only docker image tag"
        value: ${{ jobs.test.outputs.docker_image_tag }}
      docker_image:
        description: "docker image with tag"
        value: ${{ jobs.test.outputs.docker_image }}
  pull_request:
  # NOTE: For develop & master, they are run through helm github action ./build-publish-docker-helm.yml

env:
  COMPOSE_FILE: docker-compose.yml:.github/docker-compose.yml

jobs:
  pre_commit_checks:
    name: Pre-Commit checks
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@main
      - uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Setup uv python environment
        run: uv venv

      - name: uv lock check
        run: uv lock --locked --offline

      - name: uv sync
        run: uv sync --all-extras

      - uses: pre-commit/action@main

  test:
    name: GO Test
    runs-on: ubuntu-latest

    outputs:
      docker_image_name: ${{ steps.prep.outputs.tagged_image_name }}
      docker_image_tag: ${{ steps.prep.outputs.tag }}
      docker_image: ${{ steps.prep.outputs.tagged_image }}

    steps:
      - uses: actions/checkout@main

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: ${{ inputs.push_docker_image }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare
        id: prep
        env:
          IMAGE_NAME: ghcr.io/${{ github.repository }}
        run: |
          BRANCH_NAME=$(echo $GITHUB_REF_NAME | sed 's|:|-|' | tr '[:upper:]' '[:lower:]' | sed 's/_/-/g' | cut -c1-100 | sed 's/-*$//')

          # NOTE: `c` is to avoid error by helm if GITHUB_SHA[:7] has only numbers
          GIT_HASH="c$(echo $GITHUB_SHA | head -c7)"

          # XXX: Check if there is a slash in the BRANCH_NAME eg: project/add-docker
          if [[ "$BRANCH_NAME" == *"/"* ]]; then
              # XXX: Change the docker image package to -alpha
              IMAGE_NAME="$IMAGE_NAME-alpha"
              TAG="$(echo "$BRANCH_NAME" | sed 's|/|-|g').$(echo $GIT_HASH)"
          else
              TAG="$BRANCH_NAME.$(echo $GIT_HASH)"
          fi

          IMAGE_NAME=$(echo $IMAGE_NAME | tr '[:upper:]' '[:lower:]')
          echo "tagged_image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "tagged_image=${IMAGE_NAME}:${TAG}" >> $GITHUB_OUTPUT
          echo "::notice::Tagged docker image: ${IMAGE_NAME}:${TAG}"

      - name: üê≥ Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: üê≥ Build image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: false
          load: true
          tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Docker config setup & Pull docker images
        env:
          DOCKER_IMAGE: ${{ steps.prep.outputs.tagged_image }}
        run: |
          touch .env
          docker compose run --rm serve ls

      - name: üïÆ Validate if there are no pending django migrations.
        env:
          DOCKER_IMAGE: ${{ steps.prep.outputs.tagged_image }}
        run: |
          docker compose run --rm serve ./manage.py makemigrations --check --dry-run || {
            echo 'There are some changes to be reflected in the migration. Make sure to run makemigrations';
            exit 1;
          }

      - name: üïÆ Validate SentryMonitor config
        env:
          DOCKER_IMAGE: ${{ steps.prep.outputs.tagged_image }}
        run: |
          docker compose run --rm serve ./manage.py cron_job_monitor --validate-only || {
            echo 'There are some changes to be reflected in the SentryMonitor. Make sure to update SentryMonitor';
            exit 1;
          }

      - name: Run django migrations
        env:
          DOCKER_IMAGE: ${{ steps.prep.outputs.tagged_image }}
        run: docker compose run --rm serve ./manage.py test --keepdb -v 2 --pattern="test_fake.py"

      # NOTE: Schema generation requires a valid database. Therefore, this step must run after "Run Django migrations."
      - name: üïÆ Generate latest openapi schema
        env:
          DOCKER_IMAGE: ${{ steps.prep.outputs.tagged_image }}
          DJANGO_DB_NAME: "test_test"
        run: |
          docker compose run --rm serve ./manage.py spectacular --file openapi-schema-latest.yaml

      - name: üïÆ Upload latest openapi schema to IFRCGo/go-api-artifacts
        env:
          # Github
          # NOTE: `GO_API_ARTIFACTS_TOKEN` has an expiry date. Please follow `docs/go-artifacts.md` for token rotation.
          GITHUB_TOKEN: ${{ secrets.GO_API_ARTIFACTS_TOKEN }}
          GITHUB_OWNER: IFRCGo
          GITHUB_REPO: go-api-artifacts
          GITHUB_BRANCH: main
          # File
          SOURCE_FILE_PATH: openapi-schema-latest.yaml
        run: |
          COMMIT_SHA="${{ github.event.pull_request.head.sha || github.sha }}"
          export DEST_FILE_PATH="generated/$COMMIT_SHA/openapi-schema.yaml"
          export COMMIT_MESSAGE="Add openapi-schema of $GITHUB_REF_NAME@$COMMIT_SHA"
          .github/go-api-artifacts-add-or-replace.sh
          DEST_FILE_URL="https://github.com/$GITHUB_OWNER/$GITHUB_REPO/blob/$GITHUB_BRANCH/$DEST_FILE_PATH"
          echo "::notice::Uploaded latest openapi-schema to: ${DEST_FILE_URL}"

      - name: ü§û Run Test üß™
        env:
          DOCKER_IMAGE: ${{ steps.prep.outputs.tagged_image }}
        run: docker compose run --rm serve pytest --reuse-db --durations=10

      - name: üê≥ Docker push
        if: ${{ inputs.push_docker_image }}
        run: docker push $IMAGE_TAG
        env:
          IMAGE_TAG: ${{ steps.prep.outputs.tagged_image }}

  validate_helm:
    name: Validate Helm
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@main

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: üê≥ Helm dependency
        working-directory: deploy/helm/ifrcgo-helm
        run: |
          yq --indent 0 '.dependencies | map(["helm", "repo", "add", .name, .repository] | join(" ")) | .[]' ./Chart.lock | sh --
          helm dependency build ./

      - name: üê≥ Helm lint
        working-directory: deploy/helm/ifrcgo-helm
        run: helm lint ./

      - name: üê≥ Helm template
        working-directory: deploy/helm/ifrcgo-helm
        run: helm template ./
