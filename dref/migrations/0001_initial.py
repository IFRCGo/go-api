# Generated by Django 2.2.20 on 2021-08-10 04:45

import django.core.files.storage
from django.db import migrations, models
import django.db.models.deletion
import dref.models
import enumfields.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('api', '0133_auto_20210729_1609'),
    ]

    operations = [
        migrations.CreateModel(
            name='IdentifiedNeed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of identified needs', max_length=255, verbose_name='title')),
                ('description', models.TextField(blank=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'identified need',
                'verbose_name_plural': 'identified needs',
            },
        ),
        migrations.CreateModel(
            name='NationalSocietyAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('description', models.TextField(blank=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'national society action',
                'verbose_name_plural': 'national society actions',
            },
        ),
        migrations.CreateModel(
            name='PlannedIntervention',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of identified needs', max_length=255, verbose_name='title')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('budget', models.IntegerField(blank=True, null=True, verbose_name='budget')),
            ],
            options={
                'verbose_name': 'planned intervention',
                'verbose_name_plural': 'planned interventions',
            },
        ),
        migrations.CreateModel(
            name='Dref',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('type_of_onset', enumfields.fields.EnumIntegerField(enum=dref.models.Dref.OnsetType, verbose_name='onset type')),
                ('disaster_category_level', enumfields.fields.EnumIntegerField(enum=dref.models.Dref.DisasterCategory, verbose_name='disaster category level')),
                ('status', enumfields.fields.EnumIntegerField(enum=dref.models.Dref.Status, verbose_name='status')),
                ('num_assisted', models.IntegerField(blank=True, null=True, verbose_name='number of assisted')),
                ('num_affected', models.IntegerField(blank=True, null=True, verbose_name='number of affected')),
                ('amount_requested', models.IntegerField(blank=True, null=True, verbose_name='amount requested')),
                ('emergency_appeal_planned', models.BooleanField(default=False, verbose_name='emergency appeal planned ')),
                ('document', models.FileField(blank=True, null=True, storage=django.core.files.storage.FileSystemStorage(location='media'), upload_to=dref.models.dref_document_path, verbose_name='document')),
                ('disaster_date', models.DateField(blank=True, null=True, verbose_name='disaster date')),
                ('ns_respond_date', models.DateField(blank=True, null=True, verbose_name='ns respond date')),
                ('ns_respond_text', models.TextField(blank=True, verbose_name='ns respond text')),
                ('affect_same_population', models.BooleanField(default=False, help_text='Has a similar event affected the same population?')),
                ('affect_same_communities', models.BooleanField(default=False, help_text='Did it affect the same communities?')),
                ('affect_same_communities_text', models.CharField(blank=True, max_length=255, null=True, verbose_name='affect same communities text')),
                ('ns_respond', models.BooleanField(default=False, help_text='Did NS respond')),
                ('ns_request', models.BooleanField(default=False, help_text='Did NS request a Dref?')),
                ('ns_request_text', models.CharField(blank=True, max_length=255, null=True, verbose_name='ns request text')),
                ('lessons_learned', models.TextField(blank=True, verbose_name='lessons learned')),
                ('event_description', models.TextField(blank=True, verbose_name='event description')),
                ('image', models.ImageField(blank=True, null=True, storage=django.core.files.storage.FileSystemStorage(location='media'), upload_to='dref/%Y/%m/%d/', verbose_name='image')),
                ('anticipatory_actions', models.TextField(blank=True, help_text='Description of anticipatory actions or imminent disaster', verbose_name='anaticipatory actions')),
                ('event_scope', models.TextField(blank=True, help_text='Scope and scale of event', verbose_name='event scope')),
                ('government_requested_assistance', models.BooleanField(default=False, help_text='Has government requested assistance')),
                ('government_requested_assistance_date', models.DateField(blank=True, null=True, verbose_name='government requested assistance date')),
                ('national_authorities', models.TextField(blank=True, verbose_name='national authorities')),
                ('rcrc_partners', models.TextField(blank=True, verbose_name='rcrc partners')),
                ('icrc', models.TextField(blank=True, verbose_name='icrc')),
                ('un_or_other', models.TextField(blank=True, verbose_name='un or other')),
                ('major_coordination_mechanism', models.TextField(blank=True, help_text='List major coordination mechanisms in place', verbose_name='major coordination mechanism')),
                ('identified_gaps', models.TextField(blank=True, help_text='Any identified gaps/limitations in the assessment', verbose_name='identified gaps')),
                ('people_assisted', models.TextField(blank=True, verbose_name='people assisted')),
                ('selection_criteria', models.TextField(blank=True, help_text='Selection criteria for affected people', verbose_name='selection criteria')),
                ('entity_affected', models.TextField(blank=True, help_text='Protection, gender, Inclusion affected in this process', verbose_name='entity affected')),
                ('community_involved', models.TextField(blank=True, help_text='Community been involved in the analysis of the process', verbose_name='community involved')),
                ('women', models.IntegerField(blank=True, null=True, verbose_name='women')),
                ('men', models.IntegerField(blank=True, null=True, verbose_name='men')),
                ('girls', models.IntegerField(blank=True, help_text='Girls under 18', null=True, verbose_name='girls')),
                ('boys', models.IntegerField(blank=True, help_text='Boys under 18', null=True, verbose_name='boys')),
                ('disability_people_per', models.DecimalField(blank=True, decimal_places=1, help_text='Estimated % people disability', max_digits=3, null=True, verbose_name='disability people per')),
                ('people_per', models.DecimalField(blank=True, decimal_places=1, help_text='Estimated % people Urban/Rural', max_digits=3, null=True, verbose_name='people per')),
                ('displaced_people', models.IntegerField(blank=True, help_text='Estimated number of displaced people', null=True, verbose_name='displaced people')),
                ('operation_objective', models.TextField(blank=True, help_text='Overall objective of the operation', verbose_name='operation objective')),
                ('response_strategy', models.TextField(blank=True, verbose_name='response strategy')),
                ('secretariat_service', models.TextField(blank=True, verbose_name='secretariat service')),
                ('national_society_strengthening', models.TextField(blank=True, verbose_name='nationa society strengthening')),
                ('ns_request_date', models.DateField(blank=True, null=True, verbose_name='ns request date')),
                ('submission_to_geneva', models.DateField(blank=True, null=True, verbose_name='submission to geneva')),
                ('date_of_approval', models.DateField(blank=True, null=True, verbose_name='date of approval')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='start date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='end date')),
                ('publishing_date', models.DateField(blank=True, null=True, verbose_name='publishing date')),
                ('operation_timeframe', models.IntegerField(blank=True, null=True, verbose_name='operation timeframe')),
                ('appeal_code', models.CharField(blank=True, max_length=255, null=True, verbose_name='appeal code')),
                ('glide_code', models.CharField(blank=True, max_length=255, null=True, verbose_name='glide number')),
                ('appeal_manager_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='appeal manager name')),
                ('appeal_manager_email', models.CharField(blank=True, max_length=255, null=True, verbose_name='appeal manager email')),
                ('project_manager_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='project manager name')),
                ('project_manager_email', models.CharField(blank=True, max_length=255, null=True, verbose_name='project manager email')),
                ('national_society_contact_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='national society contact name')),
                ('national_society_contact_email', models.CharField(blank=True, max_length=255, null=True, verbose_name='national society contact email')),
                ('media_contact_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='media contact name')),
                ('media_contact_email', models.CharField(blank=True, max_length=255, null=True, verbose_name='media contact email')),
                ('ifrc_emergency_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='ifrc emergency name')),
                ('ifrc_emergency_email', models.CharField(blank=True, max_length=255, null=True, verbose_name='ifrc emergency email')),
                ('requestor_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='requestor name')),
                ('requestor_email', models.CharField(blank=True, max_length=255, null=True, verbose_name='requestor email')),
                ('disaster_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.DisasterType', verbose_name='disaster type')),
                ('national_society', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.Country', verbose_name='national_society')),
                ('national_society_actions', models.ManyToManyField(blank=True, to='dref.NationalSocietyAction', verbose_name='national society actions')),
                ('needs_identified', models.ManyToManyField(blank=True, to='dref.IdentifiedNeed', verbose_name='needs identified')),
                ('planned_interventions', models.ManyToManyField(blank=True, to='dref.PlannedIntervention', verbose_name='planned intervention')),
            ],
            options={
                'verbose_name': 'dref',
                'verbose_name_plural': 'drefs',
            },
        ),
        migrations.CreateModel(
            name='DrefCountryDistrict',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Country', verbose_name='country')),
                ('district', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.District', verbose_name='district')),
                ('dref', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dref.Dref', verbose_name='dref')),
            ],
            options={
                'unique_together': {('country', 'district')},
            },
        ),
    ]
