# Generated by Django 4.2.16 on 2024-10-08 07:30

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("api", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Dref",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="created at")),
                ("modified_at", models.DateTimeField(default=django.utils.timezone.now, null=True, verbose_name="modified at")),
                ("title", models.CharField(max_length=255, verbose_name="title")),
                ("title_en", models.CharField(max_length=255, null=True, verbose_name="title")),
                ("title_es", models.CharField(max_length=255, null=True, verbose_name="title")),
                ("title_fr", models.CharField(max_length=255, null=True, verbose_name="title")),
                ("title_ar", models.CharField(max_length=255, null=True, verbose_name="title")),
                ("title_prefix", models.CharField(blank=True, max_length=255, null=True, verbose_name="title prefix")),
                ("title_prefix_en", models.CharField(blank=True, max_length=255, null=True, verbose_name="title prefix")),
                ("title_prefix_es", models.CharField(blank=True, max_length=255, null=True, verbose_name="title prefix")),
                ("title_prefix_fr", models.CharField(blank=True, max_length=255, null=True, verbose_name="title prefix")),
                ("title_prefix_ar", models.CharField(blank=True, max_length=255, null=True, verbose_name="title prefix")),
                (
                    "type_of_dref",
                    models.IntegerField(
                        blank=True,
                        choices=[(0, "Imminent"), (1, "Assessment"), (2, "Response"), (3, "Loan")],
                        null=True,
                        verbose_name="dref type",
                    ),
                ),
                (
                    "type_of_onset",
                    models.IntegerField(blank=True, choices=[(1, "Slow"), (2, "Sudden")], null=True, verbose_name="onset type"),
                ),
                (
                    "disaster_category",
                    models.IntegerField(
                        blank=True,
                        choices=[(0, "Yellow"), (1, "Orange"), (2, "Red")],
                        null=True,
                        verbose_name="disaster category",
                    ),
                ),
                (
                    "status",
                    models.IntegerField(
                        blank=True, choices=[(0, "In Progress"), (1, "Completed")], null=True, verbose_name="status"
                    ),
                ),
                ("num_assisted", models.IntegerField(blank=True, null=True, verbose_name="number of assisted")),
                ("num_affected", models.IntegerField(blank=True, null=True, verbose_name="number of affected")),
                ("amount_requested", models.IntegerField(blank=True, null=True, verbose_name="amount requested")),
                ("people_in_need", models.IntegerField(blank=True, null=True, verbose_name="people in need")),
                (
                    "emergency_appeal_planned",
                    models.BooleanField(blank=True, null=True, verbose_name="emergency appeal planned "),
                ),
                (
                    "event_date",
                    models.DateField(
                        blank=True, help_text="Date of event/Approximate date of impact", null=True, verbose_name="event date"
                    ),
                ),
                ("event_text", models.TextField(blank=True, null=True, verbose_name="event text")),
                ("event_text_en", models.TextField(blank=True, null=True, verbose_name="event text")),
                ("event_text_es", models.TextField(blank=True, null=True, verbose_name="event text")),
                ("event_text_fr", models.TextField(blank=True, null=True, verbose_name="event text")),
                ("event_text_ar", models.TextField(blank=True, null=True, verbose_name="event text")),
                (
                    "ns_respond_date",
                    models.DateField(
                        blank=True,
                        help_text="NS anticipatory actions started/NS response",
                        null=True,
                        verbose_name="ns respond date",
                    ),
                ),
                (
                    "did_it_affect_same_area",
                    models.BooleanField(
                        blank=True, help_text="Has a similar event affected the same areas in the past?", null=True
                    ),
                ),
                (
                    "did_it_affect_same_population",
                    models.BooleanField(blank=True, help_text="Did it affect the same population?", null=True),
                ),
                (
                    "affect_same_population_text",
                    models.TextField(blank=True, null=True, verbose_name="affect same population text"),
                ),
                ("did_ns_respond", models.BooleanField(blank=True, default=False, help_text="Did NS respond", null=True)),
                (
                    "did_ns_request_fund",
                    models.BooleanField(blank=True, default=False, help_text="Did the NS request funding from DREF?", null=True),
                ),
                ("ns_request_text", models.TextField(blank=True, null=True, verbose_name="ns request text")),
                ("ns_request_text_en", models.TextField(blank=True, null=True, verbose_name="ns request text")),
                ("ns_request_text_es", models.TextField(blank=True, null=True, verbose_name="ns request text")),
                ("ns_request_text_fr", models.TextField(blank=True, null=True, verbose_name="ns request text")),
                ("ns_request_text_ar", models.TextField(blank=True, null=True, verbose_name="ns request text")),
                ("dref_recurrent_text", models.TextField(blank=True, null=True, verbose_name="dref recurrent text")),
                ("dref_recurrent_text_en", models.TextField(blank=True, null=True, verbose_name="dref recurrent text")),
                ("dref_recurrent_text_es", models.TextField(blank=True, null=True, verbose_name="dref recurrent text")),
                ("dref_recurrent_text_fr", models.TextField(blank=True, null=True, verbose_name="dref recurrent text")),
                ("dref_recurrent_text_ar", models.TextField(blank=True, null=True, verbose_name="dref recurrent text")),
                ("lessons_learned", models.TextField(blank=True, null=True, verbose_name="lessons learned")),
                ("lessons_learned_en", models.TextField(blank=True, null=True, verbose_name="lessons learned")),
                ("lessons_learned_es", models.TextField(blank=True, null=True, verbose_name="lessons learned")),
                ("lessons_learned_fr", models.TextField(blank=True, null=True, verbose_name="lessons learned")),
                ("lessons_learned_ar", models.TextField(blank=True, null=True, verbose_name="lessons learned")),
                ("event_description", models.TextField(blank=True, null=True, verbose_name="event description")),
                ("event_description_en", models.TextField(blank=True, null=True, verbose_name="event description")),
                ("event_description_es", models.TextField(blank=True, null=True, verbose_name="event description")),
                ("event_description_fr", models.TextField(blank=True, null=True, verbose_name="event description")),
                ("event_description_ar", models.TextField(blank=True, null=True, verbose_name="event description")),
                (
                    "anticipatory_actions",
                    models.TextField(
                        blank=True,
                        help_text="Description of anticipatory actions or imminent disaster",
                        null=True,
                        verbose_name="anticipatory actions",
                    ),
                ),
                (
                    "anticipatory_actions_en",
                    models.TextField(
                        blank=True,
                        help_text="Description of anticipatory actions or imminent disaster",
                        null=True,
                        verbose_name="anticipatory actions",
                    ),
                ),
                (
                    "anticipatory_actions_es",
                    models.TextField(
                        blank=True,
                        help_text="Description of anticipatory actions or imminent disaster",
                        null=True,
                        verbose_name="anticipatory actions",
                    ),
                ),
                (
                    "anticipatory_actions_fr",
                    models.TextField(
                        blank=True,
                        help_text="Description of anticipatory actions or imminent disaster",
                        null=True,
                        verbose_name="anticipatory actions",
                    ),
                ),
                (
                    "anticipatory_actions_ar",
                    models.TextField(
                        blank=True,
                        help_text="Description of anticipatory actions or imminent disaster",
                        null=True,
                        verbose_name="anticipatory actions",
                    ),
                ),
                (
                    "event_scope",
                    models.TextField(blank=True, help_text="Scope and scale of event", null=True, verbose_name="event scope"),
                ),
                (
                    "event_scope_en",
                    models.TextField(blank=True, help_text="Scope and scale of event", null=True, verbose_name="event scope"),
                ),
                (
                    "event_scope_es",
                    models.TextField(blank=True, help_text="Scope and scale of event", null=True, verbose_name="event scope"),
                ),
                (
                    "event_scope_fr",
                    models.TextField(blank=True, help_text="Scope and scale of event", null=True, verbose_name="event scope"),
                ),
                (
                    "event_scope_ar",
                    models.TextField(blank=True, help_text="Scope and scale of event", null=True, verbose_name="event scope"),
                ),
                (
                    "government_requested_assistance",
                    models.BooleanField(blank=True, help_text="Has government requested assistance", null=True),
                ),
                (
                    "government_requested_assistance_date",
                    models.DateField(blank=True, null=True, verbose_name="government requested assistance date"),
                ),
                ("national_authorities", models.TextField(blank=True, null=True, verbose_name="national authorities")),
                ("national_authorities_en", models.TextField(blank=True, null=True, verbose_name="national authorities")),
                ("national_authorities_es", models.TextField(blank=True, null=True, verbose_name="national authorities")),
                ("national_authorities_fr", models.TextField(blank=True, null=True, verbose_name="national authorities")),
                ("national_authorities_ar", models.TextField(blank=True, null=True, verbose_name="national authorities")),
                ("ifrc", models.TextField(blank=True, null=True, verbose_name="ifrc")),
                ("ifrc_en", models.TextField(blank=True, null=True, verbose_name="ifrc")),
                ("ifrc_es", models.TextField(blank=True, null=True, verbose_name="ifrc")),
                ("ifrc_fr", models.TextField(blank=True, null=True, verbose_name="ifrc")),
                ("ifrc_ar", models.TextField(blank=True, null=True, verbose_name="ifrc")),
                ("icrc", models.TextField(blank=True, null=True, verbose_name="icrc")),
                ("icrc_en", models.TextField(blank=True, null=True, verbose_name="icrc")),
                ("icrc_es", models.TextField(blank=True, null=True, verbose_name="icrc")),
                ("icrc_fr", models.TextField(blank=True, null=True, verbose_name="icrc")),
                ("icrc_ar", models.TextField(blank=True, null=True, verbose_name="icrc")),
                ("partner_national_society", models.TextField(blank=True, null=True, verbose_name="partner national society")),
                ("partner_national_society_en", models.TextField(blank=True, null=True, verbose_name="partner national society")),
                ("partner_national_society_es", models.TextField(blank=True, null=True, verbose_name="partner national society")),
                ("partner_national_society_fr", models.TextField(blank=True, null=True, verbose_name="partner national society")),
                ("partner_national_society_ar", models.TextField(blank=True, null=True, verbose_name="partner national society")),
                ("un_or_other_actor", models.TextField(blank=True, null=True, verbose_name="un or other")),
                ("un_or_other_actor_en", models.TextField(blank=True, null=True, verbose_name="un or other")),
                ("un_or_other_actor_es", models.TextField(blank=True, null=True, verbose_name="un or other")),
                ("un_or_other_actor_fr", models.TextField(blank=True, null=True, verbose_name="un or other")),
                ("un_or_other_actor_ar", models.TextField(blank=True, null=True, verbose_name="un or other")),
                (
                    "is_there_major_coordination_mechanism",
                    models.BooleanField(blank=True, null=True, verbose_name="Is major coordination mechanism"),
                ),
                (
                    "major_coordination_mechanism",
                    models.TextField(
                        blank=True,
                        help_text="List major coordination mechanisms in place",
                        null=True,
                        verbose_name="major coordination mechanism",
                    ),
                ),
                (
                    "major_coordination_mechanism_en",
                    models.TextField(
                        blank=True,
                        help_text="List major coordination mechanisms in place",
                        null=True,
                        verbose_name="major coordination mechanism",
                    ),
                ),
                (
                    "major_coordination_mechanism_es",
                    models.TextField(
                        blank=True,
                        help_text="List major coordination mechanisms in place",
                        null=True,
                        verbose_name="major coordination mechanism",
                    ),
                ),
                (
                    "major_coordination_mechanism_fr",
                    models.TextField(
                        blank=True,
                        help_text="List major coordination mechanisms in place",
                        null=True,
                        verbose_name="major coordination mechanism",
                    ),
                ),
                (
                    "major_coordination_mechanism_ar",
                    models.TextField(
                        blank=True,
                        help_text="List major coordination mechanisms in place",
                        null=True,
                        verbose_name="major coordination mechanism",
                    ),
                ),
                (
                    "identified_gaps",
                    models.TextField(
                        blank=True,
                        help_text="Any identified gaps/limitations in the assessment",
                        null=True,
                        verbose_name="identified gaps",
                    ),
                ),
                (
                    "identified_gaps_en",
                    models.TextField(
                        blank=True,
                        help_text="Any identified gaps/limitations in the assessment",
                        null=True,
                        verbose_name="identified gaps",
                    ),
                ),
                (
                    "identified_gaps_es",
                    models.TextField(
                        blank=True,
                        help_text="Any identified gaps/limitations in the assessment",
                        null=True,
                        verbose_name="identified gaps",
                    ),
                ),
                (
                    "identified_gaps_fr",
                    models.TextField(
                        blank=True,
                        help_text="Any identified gaps/limitations in the assessment",
                        null=True,
                        verbose_name="identified gaps",
                    ),
                ),
                (
                    "identified_gaps_ar",
                    models.TextField(
                        blank=True,
                        help_text="Any identified gaps/limitations in the assessment",
                        null=True,
                        verbose_name="identified gaps",
                    ),
                ),
                ("people_assisted", models.TextField(blank=True, null=True, verbose_name="people assisted")),
                ("people_assisted_en", models.TextField(blank=True, null=True, verbose_name="people assisted")),
                ("people_assisted_es", models.TextField(blank=True, null=True, verbose_name="people assisted")),
                ("people_assisted_fr", models.TextField(blank=True, null=True, verbose_name="people assisted")),
                ("people_assisted_ar", models.TextField(blank=True, null=True, verbose_name="people assisted")),
                (
                    "selection_criteria",
                    models.TextField(
                        blank=True,
                        help_text="Selection criteria for affected people",
                        null=True,
                        verbose_name="selection criteria",
                    ),
                ),
                (
                    "selection_criteria_en",
                    models.TextField(
                        blank=True,
                        help_text="Selection criteria for affected people",
                        null=True,
                        verbose_name="selection criteria",
                    ),
                ),
                (
                    "selection_criteria_es",
                    models.TextField(
                        blank=True,
                        help_text="Selection criteria for affected people",
                        null=True,
                        verbose_name="selection criteria",
                    ),
                ),
                (
                    "selection_criteria_fr",
                    models.TextField(
                        blank=True,
                        help_text="Selection criteria for affected people",
                        null=True,
                        verbose_name="selection criteria",
                    ),
                ),
                (
                    "selection_criteria_ar",
                    models.TextField(
                        blank=True,
                        help_text="Selection criteria for affected people",
                        null=True,
                        verbose_name="selection criteria",
                    ),
                ),
                (
                    "entity_affected",
                    models.TextField(
                        blank=True,
                        help_text="Protection, gender, Inclusion affected in this process",
                        null=True,
                        verbose_name="entity affected",
                    ),
                ),
                (
                    "community_involved",
                    models.TextField(
                        blank=True,
                        help_text="Community been involved in the analysis of the process",
                        null=True,
                        verbose_name="community involved",
                    ),
                ),
                ("women", models.IntegerField(blank=True, null=True, verbose_name="women")),
                ("men", models.IntegerField(blank=True, null=True, verbose_name="men")),
                ("girls", models.IntegerField(blank=True, help_text="Girls under 18", null=True, verbose_name="girls")),
                ("boys", models.IntegerField(blank=True, help_text="Boys under 18", null=True, verbose_name="boys")),
                (
                    "total_targeted_population",
                    models.IntegerField(
                        blank=True,
                        help_text="Estimated number of targeted people",
                        null=True,
                        verbose_name="total targeted population",
                    ),
                ),
                (
                    "disability_people_per",
                    models.FloatField(
                        blank=True, help_text="Estimated % people disability", null=True, verbose_name="disability people per"
                    ),
                ),
                (
                    "people_per_urban",
                    models.FloatField(
                        blank=True, help_text="Estimated % people Urban", null=True, verbose_name="people per urban"
                    ),
                ),
                (
                    "people_per_local",
                    models.FloatField(
                        blank=True, help_text="Estimated % people Rural", null=True, verbose_name="people per local"
                    ),
                ),
                (
                    "people_targeted_with_early_actions",
                    models.IntegerField(
                        blank=True,
                        help_text="Number of persons targeted with early actions",
                        null=True,
                        verbose_name="people targeted with early actions",
                    ),
                ),
                (
                    "displaced_people",
                    models.IntegerField(
                        blank=True, help_text="Estimated number of displaced people", null=True, verbose_name="displaced people"
                    ),
                ),
                (
                    "operation_objective",
                    models.TextField(
                        blank=True, help_text="Overall objective of the operation", null=True, verbose_name="operation objective"
                    ),
                ),
                (
                    "operation_objective_en",
                    models.TextField(
                        blank=True, help_text="Overall objective of the operation", null=True, verbose_name="operation objective"
                    ),
                ),
                (
                    "operation_objective_es",
                    models.TextField(
                        blank=True, help_text="Overall objective of the operation", null=True, verbose_name="operation objective"
                    ),
                ),
                (
                    "operation_objective_fr",
                    models.TextField(
                        blank=True, help_text="Overall objective of the operation", null=True, verbose_name="operation objective"
                    ),
                ),
                (
                    "operation_objective_ar",
                    models.TextField(
                        blank=True, help_text="Overall objective of the operation", null=True, verbose_name="operation objective"
                    ),
                ),
                ("response_strategy", models.TextField(blank=True, null=True, verbose_name="response strategy")),
                ("response_strategy_en", models.TextField(blank=True, null=True, verbose_name="response strategy")),
                ("response_strategy_es", models.TextField(blank=True, null=True, verbose_name="response strategy")),
                ("response_strategy_fr", models.TextField(blank=True, null=True, verbose_name="response strategy")),
                ("response_strategy_ar", models.TextField(blank=True, null=True, verbose_name="response strategy")),
                ("did_national_society", models.BooleanField(blank=True, null=True, verbose_name="Did National Society")),
                ("ns_request_date", models.DateField(blank=True, null=True, verbose_name="ns request date")),
                ("submission_to_geneva", models.DateField(blank=True, null=True, verbose_name="submission to geneva")),
                ("date_of_approval", models.DateField(blank=True, null=True, verbose_name="date of approval")),
                ("end_date", models.DateField(blank=True, null=True, verbose_name="end date")),
                ("publishing_date", models.DateField(blank=True, null=True, verbose_name="publishing date")),
                ("operation_timeframe", models.IntegerField(blank=True, null=True, verbose_name="operation timeframe")),
                ("appeal_code", models.CharField(blank=True, max_length=255, null=True, verbose_name="appeal code")),
                ("glide_code", models.CharField(blank=True, max_length=255, null=True, verbose_name="glide number")),
                (
                    "ifrc_appeal_manager_name",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="ifrc appeal manager name"),
                ),
                (
                    "ifrc_appeal_manager_email",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="ifrc appeal manager email"),
                ),
                (
                    "ifrc_appeal_manager_title",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="ifrc appeal manager title"),
                ),
                (
                    "ifrc_appeal_manager_phone_number",
                    models.CharField(blank=True, max_length=100, null=True, verbose_name="ifrc appeal manager phone number"),
                ),
                (
                    "ifrc_project_manager_name",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="ifrc project manager name"),
                ),
                (
                    "ifrc_project_manager_email",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="ifrc project manager email"),
                ),
                (
                    "ifrc_project_manager_title",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="ifrc project manager title"),
                ),
                (
                    "ifrc_project_manager_phone_number",
                    models.CharField(blank=True, max_length=100, null=True, verbose_name="ifrc project manager phone number"),
                ),
                (
                    "national_society_contact_name",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="national society contact name"),
                ),
                (
                    "national_society_contact_email",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="national society contact email"),
                ),
                (
                    "national_society_contact_title",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="national society contact title"),
                ),
                (
                    "national_society_contact_phone_number",
                    models.CharField(blank=True, max_length=100, null=True, verbose_name="national society contact phone number"),
                ),
                (
                    "media_contact_name",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="media contact name"),
                ),
                (
                    "media_contact_email",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="media contact email"),
                ),
                (
                    "media_contact_title",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="media contact title"),
                ),
                (
                    "media_contact_phone_number",
                    models.CharField(blank=True, max_length=100, null=True, verbose_name="media_contact phone number"),
                ),
                (
                    "ifrc_emergency_name",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="ifrc emergency name"),
                ),
                (
                    "ifrc_emergency_email",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="ifrc emergency email"),
                ),
                (
                    "ifrc_emergency_title",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="ifrc emergency title"),
                ),
                (
                    "ifrc_emergency_phone_number",
                    models.CharField(blank=True, max_length=100, null=True, verbose_name="ifrc emergency phone number"),
                ),
                ("originator_name", models.CharField(blank=True, max_length=255, null=True, verbose_name="originator name")),
                ("originator_email", models.CharField(blank=True, max_length=255, null=True, verbose_name="originator email")),
                ("originator_title", models.CharField(blank=True, max_length=255, null=True, verbose_name="originator title")),
                (
                    "originator_phone_number",
                    models.CharField(blank=True, max_length=100, null=True, verbose_name="originator phone number"),
                ),
                (
                    "regional_focal_point_name",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="regional focal point name"),
                ),
                (
                    "regional_focal_point_email",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="regional focal point email"),
                ),
                (
                    "regional_focal_point_title",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="regional focal point title"),
                ),
                (
                    "regional_focal_point_phone_number",
                    models.CharField(blank=True, max_length=100, null=True, verbose_name="regional focal point phone number"),
                ),
                (
                    "human_resource",
                    models.TextField(
                        blank=True,
                        help_text="how many volunteers and staff involved in the response?",
                        null=True,
                        verbose_name="human resource",
                    ),
                ),
                (
                    "human_resource_en",
                    models.TextField(
                        blank=True,
                        help_text="how many volunteers and staff involved in the response?",
                        null=True,
                        verbose_name="human resource",
                    ),
                ),
                (
                    "human_resource_es",
                    models.TextField(
                        blank=True,
                        help_text="how many volunteers and staff involved in the response?",
                        null=True,
                        verbose_name="human resource",
                    ),
                ),
                (
                    "human_resource_fr",
                    models.TextField(
                        blank=True,
                        help_text="how many volunteers and staff involved in the response?",
                        null=True,
                        verbose_name="human resource",
                    ),
                ),
                (
                    "human_resource_ar",
                    models.TextField(
                        blank=True,
                        help_text="how many volunteers and staff involved in the response?",
                        null=True,
                        verbose_name="human resource",
                    ),
                ),
                (
                    "is_surge_personnel_deployed",
                    models.BooleanField(blank=True, null=True, verbose_name="Is surge personnel deployed"),
                ),
                (
                    "surge_personnel_deployed",
                    models.TextField(
                        blank=True,
                        help_text="Will a Surge personnel be deployed?",
                        null=True,
                        verbose_name="surge personnel deployed",
                    ),
                ),
                (
                    "surge_personnel_deployed_en",
                    models.TextField(
                        blank=True,
                        help_text="Will a Surge personnel be deployed?",
                        null=True,
                        verbose_name="surge personnel deployed",
                    ),
                ),
                (
                    "surge_personnel_deployed_es",
                    models.TextField(
                        blank=True,
                        help_text="Will a Surge personnel be deployed?",
                        null=True,
                        verbose_name="surge personnel deployed",
                    ),
                ),
                (
                    "surge_personnel_deployed_fr",
                    models.TextField(
                        blank=True,
                        help_text="Will a Surge personnel be deployed?",
                        null=True,
                        verbose_name="surge personnel deployed",
                    ),
                ),
                (
                    "surge_personnel_deployed_ar",
                    models.TextField(
                        blank=True,
                        help_text="Will a Surge personnel be deployed?",
                        null=True,
                        verbose_name="surge personnel deployed",
                    ),
                ),
                (
                    "logistic_capacity_of_ns",
                    models.TextField(
                        blank=True,
                        help_text="what is the logistics capacity of the National Society?",
                        null=True,
                        verbose_name="logistic capacity of ns",
                    ),
                ),
                (
                    "logistic_capacity_of_ns_en",
                    models.TextField(
                        blank=True,
                        help_text="what is the logistics capacity of the National Society?",
                        null=True,
                        verbose_name="logistic capacity of ns",
                    ),
                ),
                (
                    "logistic_capacity_of_ns_es",
                    models.TextField(
                        blank=True,
                        help_text="what is the logistics capacity of the National Society?",
                        null=True,
                        verbose_name="logistic capacity of ns",
                    ),
                ),
                (
                    "logistic_capacity_of_ns_fr",
                    models.TextField(
                        blank=True,
                        help_text="what is the logistics capacity of the National Society?",
                        null=True,
                        verbose_name="logistic capacity of ns",
                    ),
                ),
                (
                    "logistic_capacity_of_ns_ar",
                    models.TextField(
                        blank=True,
                        help_text="what is the logistics capacity of the National Society?",
                        null=True,
                        verbose_name="logistic capacity of ns",
                    ),
                ),
                (
                    "safety_concerns",
                    models.TextField(
                        blank=True,
                        help_text="Are there any safety/security concerns which may impact the implementation of this operation?",
                        null=True,
                        verbose_name="safety concerns",
                    ),
                ),
                (
                    "pmer",
                    models.TextField(blank=True, help_text="Does the NS have PMER capacity?", null=True, verbose_name="pmer"),
                ),
                (
                    "pmer_en",
                    models.TextField(blank=True, help_text="Does the NS have PMER capacity?", null=True, verbose_name="pmer"),
                ),
                (
                    "pmer_es",
                    models.TextField(blank=True, help_text="Does the NS have PMER capacity?", null=True, verbose_name="pmer"),
                ),
                (
                    "pmer_fr",
                    models.TextField(blank=True, help_text="Does the NS have PMER capacity?", null=True, verbose_name="pmer"),
                ),
                (
                    "pmer_ar",
                    models.TextField(blank=True, help_text="Does the NS have PMER capacity?", null=True, verbose_name="pmer"),
                ),
                (
                    "communication",
                    models.TextField(
                        blank=True, help_text="Does the NS have Communications capacity?", null=True, verbose_name="organization"
                    ),
                ),
                (
                    "communication_en",
                    models.TextField(
                        blank=True, help_text="Does the NS have Communications capacity?", null=True, verbose_name="organization"
                    ),
                ),
                (
                    "communication_es",
                    models.TextField(
                        blank=True, help_text="Does the NS have Communications capacity?", null=True, verbose_name="organization"
                    ),
                ),
                (
                    "communication_fr",
                    models.TextField(
                        blank=True, help_text="Does the NS have Communications capacity?", null=True, verbose_name="organization"
                    ),
                ),
                (
                    "communication_ar",
                    models.TextField(
                        blank=True, help_text="Does the NS have Communications capacity?", null=True, verbose_name="organization"
                    ),
                ),
                (
                    "budget_file_preview",
                    models.FileField(blank=True, null=True, upload_to="dref/images/", verbose_name="budget file preview"),
                ),
                ("is_published", models.BooleanField(default=False, verbose_name="Is published")),
                ("is_final_report_created", models.BooleanField(default=False, verbose_name="Is final report created")),
                (
                    "has_child_safeguarding_risk_analysis_assessment",
                    models.BooleanField(
                        blank=True, null=True, verbose_name="Has the child safeguarding risk analysis assessment been completed?"
                    ),
                ),
                ("risk_security_concern", models.TextField(blank=True, null=True, verbose_name="Risk Security Concern")),
                ("risk_security_concern_en", models.TextField(blank=True, null=True, verbose_name="Risk Security Concern")),
                ("risk_security_concern_es", models.TextField(blank=True, null=True, verbose_name="Risk Security Concern")),
                ("risk_security_concern_fr", models.TextField(blank=True, null=True, verbose_name="Risk Security Concern")),
                ("risk_security_concern_ar", models.TextField(blank=True, null=True, verbose_name="Risk Security Concern")),
                ("is_man_made_event", models.BooleanField(blank=True, null=True, verbose_name="Is Man-made Event")),
                ("is_active", models.BooleanField(blank=True, null=True, verbose_name="Is Active")),
                (
                    "translation_module_original_language",
                    models.CharField(
                        choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                        default="en",
                        help_text="Language used to create this entity",
                        max_length=2,
                        verbose_name="Entity Original language",
                    ),
                ),
                (
                    "translation_module_skip_auto_translation",
                    models.BooleanField(
                        default=False,
                        help_text="Skip auto translation operation for this entity?",
                        verbose_name="Skip auto translation",
                    ),
                ),
            ],
            options={
                "verbose_name": "dref",
                "verbose_name_plural": "drefs",
            },
        ),
        migrations.CreateModel(
            name="DrefFile",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("file", models.FileField(upload_to="dref/images/", verbose_name="file")),
                ("caption", models.CharField(blank=True, max_length=225, null=True)),
                ("caption_en", models.CharField(blank=True, max_length=225, null=True)),
                ("caption_es", models.CharField(blank=True, max_length=225, null=True)),
                ("caption_fr", models.CharField(blank=True, max_length=225, null=True)),
                ("caption_ar", models.CharField(blank=True, max_length=225, null=True)),
                ("client_id", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "translation_module_original_language",
                    models.CharField(
                        choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                        default="en",
                        help_text="Language used to create this entity",
                        max_length=2,
                        verbose_name="Entity Original language",
                    ),
                ),
                (
                    "translation_module_skip_auto_translation",
                    models.BooleanField(
                        default=False,
                        help_text="Skip auto translation operation for this entity?",
                        verbose_name="Skip auto translation",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created_by",
                    ),
                ),
            ],
            options={
                "verbose_name": "dref file",
                "verbose_name_plural": "dref files",
            },
        ),
        migrations.CreateModel(
            name="IdentifiedNeed",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "title",
                    models.CharField(
                        choices=[
                            ("shelter_housing_and_settlements", "Shelter Housing And Settlements"),
                            ("livelihoods_and_basic_needs", "Livelihoods And Basic Needs"),
                            ("multi_purpose_cash_grants", "Multi purpose cash grants"),
                            ("health", "Health"),
                            ("water_sanitation_and_hygiene", "Water, Sanitation And Hygiene"),
                            ("protection_gender_and_inclusion", "Protection, Gender And Inclusion"),
                            ("education", "Education"),
                            ("migration_and_displacement", "Migration And Displacement"),
                            ("risk_reduction_climate_adaptation_and_recovery", "Risk Reduction, Climate Adaptation And Recovery"),
                            ("community_engagement_and_accountability", "Community Engagement And Accountability"),
                            ("environment_sustainability", "Environment Sustainability"),
                        ],
                        max_length=255,
                        verbose_name="title",
                    ),
                ),
                (
                    "title_en",
                    models.CharField(
                        choices=[
                            ("shelter_housing_and_settlements", "Shelter Housing And Settlements"),
                            ("livelihoods_and_basic_needs", "Livelihoods And Basic Needs"),
                            ("multi_purpose_cash_grants", "Multi purpose cash grants"),
                            ("health", "Health"),
                            ("water_sanitation_and_hygiene", "Water, Sanitation And Hygiene"),
                            ("protection_gender_and_inclusion", "Protection, Gender And Inclusion"),
                            ("education", "Education"),
                            ("migration_and_displacement", "Migration And Displacement"),
                            ("risk_reduction_climate_adaptation_and_recovery", "Risk Reduction, Climate Adaptation And Recovery"),
                            ("community_engagement_and_accountability", "Community Engagement And Accountability"),
                            ("environment_sustainability", "Environment Sustainability"),
                        ],
                        max_length=255,
                        null=True,
                        verbose_name="title",
                    ),
                ),
                (
                    "title_es",
                    models.CharField(
                        choices=[
                            ("shelter_housing_and_settlements", "Shelter Housing And Settlements"),
                            ("livelihoods_and_basic_needs", "Livelihoods And Basic Needs"),
                            ("multi_purpose_cash_grants", "Multi purpose cash grants"),
                            ("health", "Health"),
                            ("water_sanitation_and_hygiene", "Water, Sanitation And Hygiene"),
                            ("protection_gender_and_inclusion", "Protection, Gender And Inclusion"),
                            ("education", "Education"),
                            ("migration_and_displacement", "Migration And Displacement"),
                            ("risk_reduction_climate_adaptation_and_recovery", "Risk Reduction, Climate Adaptation And Recovery"),
                            ("community_engagement_and_accountability", "Community Engagement And Accountability"),
                            ("environment_sustainability", "Environment Sustainability"),
                        ],
                        max_length=255,
                        null=True,
                        verbose_name="title",
                    ),
                ),
                (
                    "title_fr",
                    models.CharField(
                        choices=[
                            ("shelter_housing_and_settlements", "Shelter Housing And Settlements"),
                            ("livelihoods_and_basic_needs", "Livelihoods And Basic Needs"),
                            ("multi_purpose_cash_grants", "Multi purpose cash grants"),
                            ("health", "Health"),
                            ("water_sanitation_and_hygiene", "Water, Sanitation And Hygiene"),
                            ("protection_gender_and_inclusion", "Protection, Gender And Inclusion"),
                            ("education", "Education"),
                            ("migration_and_displacement", "Migration And Displacement"),
                            ("risk_reduction_climate_adaptation_and_recovery", "Risk Reduction, Climate Adaptation And Recovery"),
                            ("community_engagement_and_accountability", "Community Engagement And Accountability"),
                            ("environment_sustainability", "Environment Sustainability"),
                        ],
                        max_length=255,
                        null=True,
                        verbose_name="title",
                    ),
                ),
                (
                    "title_ar",
                    models.CharField(
                        choices=[
                            ("shelter_housing_and_settlements", "Shelter Housing And Settlements"),
                            ("livelihoods_and_basic_needs", "Livelihoods And Basic Needs"),
                            ("multi_purpose_cash_grants", "Multi purpose cash grants"),
                            ("health", "Health"),
                            ("water_sanitation_and_hygiene", "Water, Sanitation And Hygiene"),
                            ("protection_gender_and_inclusion", "Protection, Gender And Inclusion"),
                            ("education", "Education"),
                            ("migration_and_displacement", "Migration And Displacement"),
                            ("risk_reduction_climate_adaptation_and_recovery", "Risk Reduction, Climate Adaptation And Recovery"),
                            ("community_engagement_and_accountability", "Community Engagement And Accountability"),
                            ("environment_sustainability", "Environment Sustainability"),
                        ],
                        max_length=255,
                        null=True,
                        verbose_name="title",
                    ),
                ),
                ("description", models.TextField(blank=True, null=True, verbose_name="description")),
                ("description_en", models.TextField(blank=True, null=True, verbose_name="description")),
                ("description_es", models.TextField(blank=True, null=True, verbose_name="description")),
                ("description_fr", models.TextField(blank=True, null=True, verbose_name="description")),
                ("description_ar", models.TextField(blank=True, null=True, verbose_name="description")),
                (
                    "translation_module_original_language",
                    models.CharField(
                        choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                        default="en",
                        help_text="Language used to create this entity",
                        max_length=2,
                        verbose_name="Entity Original language",
                    ),
                ),
                (
                    "translation_module_skip_auto_translation",
                    models.BooleanField(
                        default=False,
                        help_text="Skip auto translation operation for this entity?",
                        verbose_name="Skip auto translation",
                    ),
                ),
            ],
            options={
                "verbose_name": "identified need",
                "verbose_name_plural": "identified needs",
            },
        ),
        migrations.CreateModel(
            name="NationalSocietyAction",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "title",
                    models.CharField(
                        choices=[
                            ("shelter_housing_and_settlements", "Shelter, Housing And Settlements"),
                            ("livelihoods_and_basic_needs", "Livelihoods And Basic Needs"),
                            ("multi_purpose_cash", "Multi Purpose Cash"),
                            ("health", "Health"),
                            ("water_sanitation_and_hygiene", "Water, Sanitation And Hygiene"),
                            ("protection_gender_and_inclusion", "Protection, Gender And Inclusion"),
                            ("education", "Education"),
                            ("migration_and_displacement", "Migration And Displacement"),
                            ("risk_reduction_climate_adaptation_and_recovery", "Risk Reduction, Climate Adaptation And Recovery"),
                            ("community_engagement_and_accountability", "Community Engagement And Accountability"),
                            ("environment_sustainability", "Environment Sustainability"),
                            ("coordination", "Coordination"),
                            ("national_society_readiness", "National Society Readiness"),
                            ("assessment", "Assessment"),
                            ("resource_mobilization", "Resource Mobilization"),
                            ("activation_of_contingency_plans", "Activation Of Contingency Plans"),
                            ("national_society_eoc", "National Society EOC"),
                            ("other", "Other"),
                        ],
                        max_length=255,
                        verbose_name="title",
                    ),
                ),
                ("description", models.TextField(blank=True, null=True, verbose_name="description")),
                ("description_en", models.TextField(blank=True, null=True, verbose_name="description")),
                ("description_es", models.TextField(blank=True, null=True, verbose_name="description")),
                ("description_fr", models.TextField(blank=True, null=True, verbose_name="description")),
                ("description_ar", models.TextField(blank=True, null=True, verbose_name="description")),
                (
                    "translation_module_original_language",
                    models.CharField(
                        choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                        default="en",
                        help_text="Language used to create this entity",
                        max_length=2,
                        verbose_name="Entity Original language",
                    ),
                ),
                (
                    "translation_module_skip_auto_translation",
                    models.BooleanField(
                        default=False,
                        help_text="Skip auto translation operation for this entity?",
                        verbose_name="Skip auto translation",
                    ),
                ),
            ],
            options={
                "verbose_name": "national society action",
                "verbose_name_plural": "national society actions",
            },
        ),
        migrations.CreateModel(
            name="PlannedInterventionIndicators",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=255, verbose_name="Title")),
                ("title_en", models.CharField(max_length=255, null=True, verbose_name="Title")),
                ("title_es", models.CharField(max_length=255, null=True, verbose_name="Title")),
                ("title_fr", models.CharField(max_length=255, null=True, verbose_name="Title")),
                ("title_ar", models.CharField(max_length=255, null=True, verbose_name="Title")),
                ("target", models.IntegerField(blank=True, null=True, verbose_name="Target")),
                ("actual", models.IntegerField(blank=True, null=True, verbose_name="Actual")),
                (
                    "translation_module_original_language",
                    models.CharField(
                        choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                        default="en",
                        help_text="Language used to create this entity",
                        max_length=2,
                        verbose_name="Entity Original language",
                    ),
                ),
                (
                    "translation_module_skip_auto_translation",
                    models.BooleanField(
                        default=False,
                        help_text="Skip auto translation operation for this entity?",
                        verbose_name="Skip auto translation",
                    ),
                ),
            ],
            options={
                "verbose_name": "planned intervention indicator",
                "verbose_name_plural": "planned intervention indicators",
            },
        ),
        migrations.CreateModel(
            name="RiskSecurity",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("client_id", models.CharField(blank=True, max_length=50, null=True, verbose_name="client_id")),
                ("risk", models.TextField(blank=True, null=True, verbose_name="Risk")),
                ("risk_en", models.TextField(blank=True, null=True, verbose_name="Risk")),
                ("risk_es", models.TextField(blank=True, null=True, verbose_name="Risk")),
                ("risk_fr", models.TextField(blank=True, null=True, verbose_name="Risk")),
                ("risk_ar", models.TextField(blank=True, null=True, verbose_name="Risk")),
                ("mitigation", models.TextField(blank=True, null=True, verbose_name="Mitigation")),
                ("mitigation_en", models.TextField(blank=True, null=True, verbose_name="Mitigation")),
                ("mitigation_es", models.TextField(blank=True, null=True, verbose_name="Mitigation")),
                ("mitigation_fr", models.TextField(blank=True, null=True, verbose_name="Mitigation")),
                ("mitigation_ar", models.TextField(blank=True, null=True, verbose_name="Mitigation")),
                (
                    "translation_module_original_language",
                    models.CharField(
                        choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                        default="en",
                        help_text="Language used to create this entity",
                        max_length=2,
                        verbose_name="Entity Original language",
                    ),
                ),
                (
                    "translation_module_skip_auto_translation",
                    models.BooleanField(
                        default=False,
                        help_text="Skip auto translation operation for this entity?",
                        verbose_name="Skip auto translation",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SourceInformation",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("client_id", models.CharField(blank=True, max_length=50, null=True, verbose_name="client_id")),
                ("source_name", models.CharField(blank=True, max_length=255, null=True, verbose_name="Source Name")),
                ("source_link", models.CharField(blank=True, max_length=255, null=True, verbose_name="Source Link")),
            ],
        ),
        migrations.CreateModel(
            name="PlannedIntervention",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "title",
                    models.CharField(
                        choices=[
                            ("shelter_housing_and_settlements", "Shelter Housing And Settlements"),
                            ("livelihoods_and_basic_needs", "Livelihoods And Basic Needs"),
                            ("multi_purpose_cash", "Multi Purpose Cash"),
                            ("health", "Health"),
                            ("water_sanitation_and_hygiene", "Water, Sanitation And Hygiene"),
                            ("protection_gender_and_inclusion", "Protection, Gender And Inclusion"),
                            ("education", "Education"),
                            ("migration_and_displacement", "Migration And Displacement"),
                            ("risk_reduction_climate_adaptation_and_recovery", "Risk Reduction, Climate Adaptation And Recovery"),
                            ("community_engagement_and_accountability", "Community Engagement And Accountability"),
                            ("environmental_sustainability", "Environmental Sustainability"),
                            ("coordination_and_partnerships", "Coordination And Partnerships"),
                            ("secretariat_services", "Secretariat Services"),
                            ("national_society_strengthening", "National Society Strengthening"),
                        ],
                        max_length=255,
                        verbose_name="title",
                    ),
                ),
                (
                    "title_en",
                    models.CharField(
                        choices=[
                            ("shelter_housing_and_settlements", "Shelter Housing And Settlements"),
                            ("livelihoods_and_basic_needs", "Livelihoods And Basic Needs"),
                            ("multi_purpose_cash", "Multi Purpose Cash"),
                            ("health", "Health"),
                            ("water_sanitation_and_hygiene", "Water, Sanitation And Hygiene"),
                            ("protection_gender_and_inclusion", "Protection, Gender And Inclusion"),
                            ("education", "Education"),
                            ("migration_and_displacement", "Migration And Displacement"),
                            ("risk_reduction_climate_adaptation_and_recovery", "Risk Reduction, Climate Adaptation And Recovery"),
                            ("community_engagement_and_accountability", "Community Engagement And Accountability"),
                            ("environmental_sustainability", "Environmental Sustainability"),
                            ("coordination_and_partnerships", "Coordination And Partnerships"),
                            ("secretariat_services", "Secretariat Services"),
                            ("national_society_strengthening", "National Society Strengthening"),
                        ],
                        max_length=255,
                        null=True,
                        verbose_name="title",
                    ),
                ),
                (
                    "title_es",
                    models.CharField(
                        choices=[
                            ("shelter_housing_and_settlements", "Shelter Housing And Settlements"),
                            ("livelihoods_and_basic_needs", "Livelihoods And Basic Needs"),
                            ("multi_purpose_cash", "Multi Purpose Cash"),
                            ("health", "Health"),
                            ("water_sanitation_and_hygiene", "Water, Sanitation And Hygiene"),
                            ("protection_gender_and_inclusion", "Protection, Gender And Inclusion"),
                            ("education", "Education"),
                            ("migration_and_displacement", "Migration And Displacement"),
                            ("risk_reduction_climate_adaptation_and_recovery", "Risk Reduction, Climate Adaptation And Recovery"),
                            ("community_engagement_and_accountability", "Community Engagement And Accountability"),
                            ("environmental_sustainability", "Environmental Sustainability"),
                            ("coordination_and_partnerships", "Coordination And Partnerships"),
                            ("secretariat_services", "Secretariat Services"),
                            ("national_society_strengthening", "National Society Strengthening"),
                        ],
                        max_length=255,
                        null=True,
                        verbose_name="title",
                    ),
                ),
                (
                    "title_fr",
                    models.CharField(
                        choices=[
                            ("shelter_housing_and_settlements", "Shelter Housing And Settlements"),
                            ("livelihoods_and_basic_needs", "Livelihoods And Basic Needs"),
                            ("multi_purpose_cash", "Multi Purpose Cash"),
                            ("health", "Health"),
                            ("water_sanitation_and_hygiene", "Water, Sanitation And Hygiene"),
                            ("protection_gender_and_inclusion", "Protection, Gender And Inclusion"),
                            ("education", "Education"),
                            ("migration_and_displacement", "Migration And Displacement"),
                            ("risk_reduction_climate_adaptation_and_recovery", "Risk Reduction, Climate Adaptation And Recovery"),
                            ("community_engagement_and_accountability", "Community Engagement And Accountability"),
                            ("environmental_sustainability", "Environmental Sustainability"),
                            ("coordination_and_partnerships", "Coordination And Partnerships"),
                            ("secretariat_services", "Secretariat Services"),
                            ("national_society_strengthening", "National Society Strengthening"),
                        ],
                        max_length=255,
                        null=True,
                        verbose_name="title",
                    ),
                ),
                (
                    "title_ar",
                    models.CharField(
                        choices=[
                            ("shelter_housing_and_settlements", "Shelter Housing And Settlements"),
                            ("livelihoods_and_basic_needs", "Livelihoods And Basic Needs"),
                            ("multi_purpose_cash", "Multi Purpose Cash"),
                            ("health", "Health"),
                            ("water_sanitation_and_hygiene", "Water, Sanitation And Hygiene"),
                            ("protection_gender_and_inclusion", "Protection, Gender And Inclusion"),
                            ("education", "Education"),
                            ("migration_and_displacement", "Migration And Displacement"),
                            ("risk_reduction_climate_adaptation_and_recovery", "Risk Reduction, Climate Adaptation And Recovery"),
                            ("community_engagement_and_accountability", "Community Engagement And Accountability"),
                            ("environmental_sustainability", "Environmental Sustainability"),
                            ("coordination_and_partnerships", "Coordination And Partnerships"),
                            ("secretariat_services", "Secretariat Services"),
                            ("national_society_strengthening", "National Society Strengthening"),
                        ],
                        max_length=255,
                        null=True,
                        verbose_name="title",
                    ),
                ),
                ("description", models.TextField(blank=True, null=True, verbose_name="description")),
                ("description_en", models.TextField(blank=True, null=True, verbose_name="description")),
                ("description_es", models.TextField(blank=True, null=True, verbose_name="description")),
                ("description_fr", models.TextField(blank=True, null=True, verbose_name="description")),
                ("description_ar", models.TextField(blank=True, null=True, verbose_name="description")),
                ("person_targeted", models.IntegerField(blank=True, null=True, verbose_name="person targeted")),
                ("person_assisted", models.IntegerField(blank=True, null=True, verbose_name="person assisted")),
                ("budget", models.IntegerField(blank=True, null=True, verbose_name="budget")),
                ("male", models.IntegerField(blank=True, null=True, verbose_name="male")),
                ("female", models.IntegerField(blank=True, null=True, verbose_name="female")),
                ("progress_towards_outcome", models.TextField(blank=True, null=True, verbose_name="Progress Towards Outcome")),
                ("progress_towards_outcome_en", models.TextField(blank=True, null=True, verbose_name="Progress Towards Outcome")),
                ("progress_towards_outcome_es", models.TextField(blank=True, null=True, verbose_name="Progress Towards Outcome")),
                ("progress_towards_outcome_fr", models.TextField(blank=True, null=True, verbose_name="Progress Towards Outcome")),
                ("progress_towards_outcome_ar", models.TextField(blank=True, null=True, verbose_name="Progress Towards Outcome")),
                (
                    "narrative_description_of_achievements",
                    models.TextField(blank=True, null=True, verbose_name="Narrative description of achievements"),
                ),
                (
                    "narrative_description_of_achievements_en",
                    models.TextField(blank=True, null=True, verbose_name="Narrative description of achievements"),
                ),
                (
                    "narrative_description_of_achievements_es",
                    models.TextField(blank=True, null=True, verbose_name="Narrative description of achievements"),
                ),
                (
                    "narrative_description_of_achievements_fr",
                    models.TextField(blank=True, null=True, verbose_name="Narrative description of achievements"),
                ),
                (
                    "narrative_description_of_achievements_ar",
                    models.TextField(blank=True, null=True, verbose_name="Narrative description of achievements"),
                ),
                ("challenges", models.TextField(blank=True, null=True, verbose_name="Challenges")),
                ("challenges_en", models.TextField(blank=True, null=True, verbose_name="Challenges")),
                ("challenges_es", models.TextField(blank=True, null=True, verbose_name="Challenges")),
                ("challenges_fr", models.TextField(blank=True, null=True, verbose_name="Challenges")),
                ("challenges_ar", models.TextField(blank=True, null=True, verbose_name="Challenges")),
                ("lessons_learnt", models.TextField(blank=True, null=True, verbose_name="Lessons learnt")),
                ("lessons_learnt_en", models.TextField(blank=True, null=True, verbose_name="Lessons learnt")),
                ("lessons_learnt_es", models.TextField(blank=True, null=True, verbose_name="Lessons learnt")),
                ("lessons_learnt_fr", models.TextField(blank=True, null=True, verbose_name="Lessons learnt")),
                ("lessons_learnt_ar", models.TextField(blank=True, null=True, verbose_name="Lessons learnt")),
                (
                    "translation_module_original_language",
                    models.CharField(
                        choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                        default="en",
                        help_text="Language used to create this entity",
                        max_length=2,
                        verbose_name="Entity Original language",
                    ),
                ),
                (
                    "translation_module_skip_auto_translation",
                    models.BooleanField(
                        default=False,
                        help_text="Skip auto translation operation for this entity?",
                        verbose_name="Skip auto translation",
                    ),
                ),
                (
                    "indicators",
                    models.ManyToManyField(blank=True, to="dref.plannedinterventionindicators", verbose_name="Indicators"),
                ),
            ],
            options={
                "verbose_name": "planned intervention",
                "verbose_name_plural": "planned interventions",
            },
        ),
        migrations.CreateModel(
            name="DrefOperationalUpdate",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="created at")),
                ("modified_at", models.DateTimeField(default=django.utils.timezone.now, null=True, verbose_name="modified at")),
                ("title", models.CharField(blank=True, max_length=255, null=True, verbose_name="title")),
                ("title_en", models.CharField(blank=True, max_length=255, null=True, verbose_name="title")),
                ("title_es", models.CharField(blank=True, max_length=255, null=True, verbose_name="title")),
                ("title_fr", models.CharField(blank=True, max_length=255, null=True, verbose_name="title")),
                ("title_ar", models.CharField(blank=True, max_length=255, null=True, verbose_name="title")),
                ("title_prefix", models.CharField(blank=True, max_length=255, null=True, verbose_name="title prefix")),
                ("title_prefix_en", models.CharField(blank=True, max_length=255, null=True, verbose_name="title prefix")),
                ("title_prefix_es", models.CharField(blank=True, max_length=255, null=True, verbose_name="title prefix")),
                ("title_prefix_fr", models.CharField(blank=True, max_length=255, null=True, verbose_name="title prefix")),
                ("title_prefix_ar", models.CharField(blank=True, max_length=255, null=True, verbose_name="title prefix")),
                (
                    "type_of_dref",
                    models.IntegerField(
                        blank=True,
                        choices=[(0, "Imminent"), (1, "Assessment"), (2, "Response"), (3, "Loan")],
                        null=True,
                        verbose_name="dref type",
                    ),
                ),
                (
                    "type_of_onset",
                    models.IntegerField(blank=True, choices=[(1, "Slow"), (2, "Sudden")], null=True, verbose_name="onset type"),
                ),
                (
                    "disaster_category",
                    models.IntegerField(
                        blank=True,
                        choices=[(0, "Yellow"), (1, "Orange"), (2, "Red")],
                        null=True,
                        verbose_name="disaster category",
                    ),
                ),
                (
                    "status",
                    models.IntegerField(
                        blank=True, choices=[(0, "In Progress"), (1, "Completed")], null=True, verbose_name="status"
                    ),
                ),
                (
                    "number_of_people_targeted",
                    models.IntegerField(blank=True, null=True, verbose_name="Number of people targeted"),
                ),
                (
                    "number_of_people_affected",
                    models.IntegerField(blank=True, null=True, verbose_name="number of people affected"),
                ),
                ("dref_allocated_so_far", models.IntegerField(blank=True, null=True, verbose_name="Dref allocated so far")),
                ("additional_allocation", models.IntegerField(blank=True, null=True, verbose_name="Additional allocation")),
                ("total_dref_allocation", models.IntegerField(blank=True, null=True, verbose_name="Total dref allocation")),
                (
                    "emergency_appeal_planned",
                    models.BooleanField(blank=True, null=True, verbose_name="emergency appeal planned "),
                ),
                (
                    "budget_file_preview",
                    models.FileField(
                        blank=True, null=True, upload_to="dref-op-update/images/", verbose_name="budget file preview"
                    ),
                ),
                (
                    "operational_update_number",
                    models.IntegerField(blank=True, null=True, verbose_name="Operational Update Number"),
                ),
                ("reporting_timeframe", models.DateField(blank=True, null=True, verbose_name="Reporting Timeframe")),
                ("update_date", models.DateField(blank=True, null=True, verbose_name="Update Date")),
                (
                    "is_timeframe_extension_required",
                    models.BooleanField(blank=True, null=True, verbose_name="Is Timeframe Extension Required"),
                ),
                ("new_operational_start_date", models.DateField(blank=True, null=True, verbose_name="New Operation Start Date")),
                ("new_operational_end_date", models.DateField(blank=True, null=True, verbose_name="New Operation End Date")),
                (
                    "total_operation_timeframe",
                    models.IntegerField(blank=True, null=True, verbose_name="Total Operation Timeframe"),
                ),
                ("appeal_code", models.CharField(blank=True, max_length=255, null=True, verbose_name="appeal code")),
                ("glide_code", models.CharField(blank=True, max_length=255, null=True, verbose_name="glide number")),
                (
                    "ifrc_appeal_manager_name",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="ifrc appeal manager name"),
                ),
                (
                    "ifrc_appeal_manager_email",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="ifrc appeal manager email"),
                ),
                (
                    "ifrc_appeal_manager_title",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="ifrc appeal manager title"),
                ),
                (
                    "ifrc_appeal_manager_phone_number",
                    models.CharField(blank=True, max_length=100, null=True, verbose_name="ifrc appeal manager phone number"),
                ),
                (
                    "ifrc_project_manager_name",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="ifrc project manager name"),
                ),
                (
                    "ifrc_project_manager_email",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="ifrc project manager email"),
                ),
                (
                    "ifrc_project_manager_title",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="ifrc project manager title"),
                ),
                (
                    "ifrc_project_manager_phone_number",
                    models.CharField(blank=True, max_length=100, null=True, verbose_name="ifrc project manager phone number"),
                ),
                (
                    "national_society_contact_name",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="national society contact name"),
                ),
                (
                    "national_society_contact_email",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="national society contact email"),
                ),
                (
                    "national_society_contact_title",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="national society contact title"),
                ),
                (
                    "national_society_contact_phone_number",
                    models.CharField(blank=True, max_length=100, null=True, verbose_name="national society contact phone number"),
                ),
                (
                    "media_contact_name",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="media contact name"),
                ),
                (
                    "media_contact_email",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="media contact email"),
                ),
                (
                    "media_contact_title",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="media contact title"),
                ),
                (
                    "media_contact_phone_number",
                    models.CharField(blank=True, max_length=100, null=True, verbose_name="media_contact phone number"),
                ),
                (
                    "ifrc_emergency_name",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="ifrc emergency name"),
                ),
                (
                    "ifrc_emergency_email",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="ifrc emergency email"),
                ),
                (
                    "ifrc_emergency_title",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="ifrc emergency title"),
                ),
                (
                    "ifrc_emergency_phone_number",
                    models.CharField(blank=True, max_length=100, null=True, verbose_name="ifrc emergency phone number"),
                ),
                (
                    "regional_focal_point_name",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="regional focal point name"),
                ),
                (
                    "regional_focal_point_email",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="regional focal point email"),
                ),
                (
                    "regional_focal_point_title",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="regional focal point title"),
                ),
                (
                    "regional_focal_point_phone_number",
                    models.CharField(blank=True, max_length=100, null=True, verbose_name="regional focal point phone number"),
                ),
                (
                    "changing_timeframe_operation",
                    models.BooleanField(blank=True, null=True, verbose_name="Changing time operation"),
                ),
                (
                    "changing_operation_strategy",
                    models.BooleanField(blank=True, null=True, verbose_name="Changing operation strategy"),
                ),
                (
                    "changing_target_population_of_operation",
                    models.BooleanField(blank=True, null=True, verbose_name="Changing target population of operation"),
                ),
                (
                    "changing_geographic_location",
                    models.BooleanField(blank=True, null=True, verbose_name="Changing geographic location"),
                ),
                ("changing_budget", models.BooleanField(blank=True, null=True, verbose_name="Changing budget")),
                (
                    "request_for_second_allocation",
                    models.BooleanField(blank=True, null=True, verbose_name="Request for second allocation"),
                ),
                ("summary_of_change", models.TextField(blank=True, null=True, verbose_name="Summary of change")),
                ("has_change_since_request", models.BooleanField(blank=True, null=True, verbose_name="Has change since request")),
                ("event_description", models.TextField(blank=True, null=True, verbose_name="Event description")),
                ("event_description_en", models.TextField(blank=True, null=True, verbose_name="Event description")),
                ("event_description_es", models.TextField(blank=True, null=True, verbose_name="Event description")),
                ("event_description_fr", models.TextField(blank=True, null=True, verbose_name="Event description")),
                ("event_description_ar", models.TextField(blank=True, null=True, verbose_name="Event description")),
                ("anticipatory_actions", models.TextField(blank=True, null=True, verbose_name="Anticipatory actions")),
                ("anticipatory_actions_en", models.TextField(blank=True, null=True, verbose_name="Anticipatory actions")),
                ("anticipatory_actions_es", models.TextField(blank=True, null=True, verbose_name="Anticipatory actions")),
                ("anticipatory_actions_fr", models.TextField(blank=True, null=True, verbose_name="Anticipatory actions")),
                ("anticipatory_actions_ar", models.TextField(blank=True, null=True, verbose_name="Anticipatory actions")),
                ("event_scope", models.TextField(blank=True, null=True, verbose_name="Event scope")),
                ("event_scope_en", models.TextField(blank=True, null=True, verbose_name="Event scope")),
                ("event_scope_es", models.TextField(blank=True, null=True, verbose_name="Event scope")),
                ("event_scope_fr", models.TextField(blank=True, null=True, verbose_name="Event scope")),
                ("event_scope_ar", models.TextField(blank=True, null=True, verbose_name="Event scope")),
                ("ifrc", models.TextField(blank=True, null=True, verbose_name="ifrc")),
                ("ifrc_en", models.TextField(blank=True, null=True, verbose_name="ifrc")),
                ("ifrc_es", models.TextField(blank=True, null=True, verbose_name="ifrc")),
                ("ifrc_fr", models.TextField(blank=True, null=True, verbose_name="ifrc")),
                ("ifrc_ar", models.TextField(blank=True, null=True, verbose_name="ifrc")),
                ("icrc", models.TextField(blank=True, null=True, verbose_name="icrc")),
                ("icrc_en", models.TextField(blank=True, null=True, verbose_name="icrc")),
                ("icrc_es", models.TextField(blank=True, null=True, verbose_name="icrc")),
                ("icrc_fr", models.TextField(blank=True, null=True, verbose_name="icrc")),
                ("icrc_ar", models.TextField(blank=True, null=True, verbose_name="icrc")),
                ("partner_national_society", models.TextField(blank=True, null=True, verbose_name="partner national society")),
                ("partner_national_society_en", models.TextField(blank=True, null=True, verbose_name="partner national society")),
                ("partner_national_society_es", models.TextField(blank=True, null=True, verbose_name="partner national society")),
                ("partner_national_society_fr", models.TextField(blank=True, null=True, verbose_name="partner national society")),
                ("partner_national_society_ar", models.TextField(blank=True, null=True, verbose_name="partner national society")),
                (
                    "government_requested_assistance",
                    models.BooleanField(blank=True, help_text="Has government requested assistance", null=True),
                ),
                ("national_authorities", models.TextField(blank=True, null=True, verbose_name="national authorities")),
                ("national_authorities_en", models.TextField(blank=True, null=True, verbose_name="national authorities")),
                ("national_authorities_es", models.TextField(blank=True, null=True, verbose_name="national authorities")),
                ("national_authorities_fr", models.TextField(blank=True, null=True, verbose_name="national authorities")),
                ("national_authorities_ar", models.TextField(blank=True, null=True, verbose_name="national authorities")),
                (
                    "is_there_un_or_other_actor",
                    models.BooleanField(blank=True, null=True, verbose_name="Is there un_or_other_actor"),
                ),
                ("un_or_other_actor", models.TextField(blank=True, null=True, verbose_name="un or other")),
                ("un_or_other_actor_en", models.TextField(blank=True, null=True, verbose_name="un or other")),
                ("un_or_other_actor_es", models.TextField(blank=True, null=True, verbose_name="un or other")),
                ("un_or_other_actor_fr", models.TextField(blank=True, null=True, verbose_name="un or other")),
                ("un_or_other_actor_ar", models.TextField(blank=True, null=True, verbose_name="un or other")),
                (
                    "is_there_major_coordination_mechanism",
                    models.BooleanField(blank=True, help_text="Is there major coordinate mechanism", null=True),
                ),
                (
                    "major_coordination_mechanism",
                    models.TextField(blank=True, null=True, verbose_name="major coordination mechanism"),
                ),
                (
                    "major_coordination_mechanism_en",
                    models.TextField(blank=True, null=True, verbose_name="major coordination mechanism"),
                ),
                (
                    "major_coordination_mechanism_es",
                    models.TextField(blank=True, null=True, verbose_name="major coordination mechanism"),
                ),
                (
                    "major_coordination_mechanism_fr",
                    models.TextField(blank=True, null=True, verbose_name="major coordination mechanism"),
                ),
                (
                    "major_coordination_mechanism_ar",
                    models.TextField(blank=True, null=True, verbose_name="major coordination mechanism"),
                ),
                ("people_assisted", models.TextField(blank=True, null=True, verbose_name="people assisted")),
                ("people_assisted_en", models.TextField(blank=True, null=True, verbose_name="people assisted")),
                ("people_assisted_es", models.TextField(blank=True, null=True, verbose_name="people assisted")),
                ("people_assisted_fr", models.TextField(blank=True, null=True, verbose_name="people assisted")),
                ("people_assisted_ar", models.TextField(blank=True, null=True, verbose_name="people assisted")),
                (
                    "selection_criteria",
                    models.TextField(
                        blank=True,
                        help_text="Selection criteria for affected people",
                        null=True,
                        verbose_name="selection criteria",
                    ),
                ),
                (
                    "selection_criteria_en",
                    models.TextField(
                        blank=True,
                        help_text="Selection criteria for affected people",
                        null=True,
                        verbose_name="selection criteria",
                    ),
                ),
                (
                    "selection_criteria_es",
                    models.TextField(
                        blank=True,
                        help_text="Selection criteria for affected people",
                        null=True,
                        verbose_name="selection criteria",
                    ),
                ),
                (
                    "selection_criteria_fr",
                    models.TextField(
                        blank=True,
                        help_text="Selection criteria for affected people",
                        null=True,
                        verbose_name="selection criteria",
                    ),
                ),
                (
                    "selection_criteria_ar",
                    models.TextField(
                        blank=True,
                        help_text="Selection criteria for affected people",
                        null=True,
                        verbose_name="selection criteria",
                    ),
                ),
                (
                    "community_involved",
                    models.TextField(
                        blank=True,
                        help_text="Community been involved in the analysis of the process",
                        null=True,
                        verbose_name="community involved",
                    ),
                ),
                (
                    "entity_affected",
                    models.TextField(
                        blank=True,
                        help_text="Protection, gender, Inclusion affected in this process",
                        null=True,
                        verbose_name="entity affected",
                    ),
                ),
                ("women", models.IntegerField(blank=True, null=True, verbose_name="women")),
                ("men", models.IntegerField(blank=True, null=True, verbose_name="men")),
                ("girls", models.IntegerField(blank=True, help_text="Girls under 18", null=True, verbose_name="girls")),
                ("boys", models.IntegerField(blank=True, help_text="Boys under 18", null=True, verbose_name="boys")),
                (
                    "disability_people_per",
                    models.FloatField(
                        blank=True, help_text="Estimated % people disability", null=True, verbose_name="disability people per"
                    ),
                ),
                (
                    "people_per_urban",
                    models.FloatField(
                        blank=True, help_text="Estimated % people Urban", null=True, verbose_name="people per urban"
                    ),
                ),
                (
                    "people_per_local",
                    models.FloatField(
                        blank=True, help_text="Estimated % people Rural", null=True, verbose_name="people per local"
                    ),
                ),
                (
                    "people_targeted_with_early_actions",
                    models.IntegerField(blank=True, null=True, verbose_name="people targeted with early actions"),
                ),
                ("displaced_people", models.IntegerField(blank=True, null=True, verbose_name="displaced people")),
                ("operation_objective", models.TextField(blank=True, null=True, verbose_name="operation objective")),
                ("operation_objective_en", models.TextField(blank=True, null=True, verbose_name="operation objective")),
                ("operation_objective_es", models.TextField(blank=True, null=True, verbose_name="operation objective")),
                ("operation_objective_fr", models.TextField(blank=True, null=True, verbose_name="operation objective")),
                ("operation_objective_ar", models.TextField(blank=True, null=True, verbose_name="operation objective")),
                ("response_strategy", models.TextField(blank=True, null=True, verbose_name="response strategy")),
                ("response_strategy_en", models.TextField(blank=True, null=True, verbose_name="response strategy")),
                ("response_strategy_es", models.TextField(blank=True, null=True, verbose_name="response strategy")),
                ("response_strategy_fr", models.TextField(blank=True, null=True, verbose_name="response strategy")),
                ("response_strategy_ar", models.TextField(blank=True, null=True, verbose_name="response strategy")),
                ("is_published", models.BooleanField(default=False, verbose_name="Is published")),
                ("risk_security_concern", models.TextField(blank=True, null=True, verbose_name="Risk Security Concern")),
                ("risk_security_concern_en", models.TextField(blank=True, null=True, verbose_name="Risk Security Concern")),
                ("risk_security_concern_es", models.TextField(blank=True, null=True, verbose_name="Risk Security Concern")),
                ("risk_security_concern_fr", models.TextField(blank=True, null=True, verbose_name="Risk Security Concern")),
                ("risk_security_concern_ar", models.TextField(blank=True, null=True, verbose_name="Risk Security Concern")),
                (
                    "has_child_safeguarding_risk_analysis_assessment",
                    models.BooleanField(
                        blank=True, null=True, verbose_name="Has the child safeguarding risk analysis assessment been completed?"
                    ),
                ),
                (
                    "has_forecasted_event_materialize",
                    models.BooleanField(blank=True, null=True, verbose_name="Has Forecasted Event Materialize"),
                ),
                (
                    "anticipatory_to_response",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Please explain how is the operation is transitioning from Anticipatory to Response",
                    ),
                ),
                (
                    "anticipatory_to_response_en",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Please explain how is the operation is transitioning from Anticipatory to Response",
                    ),
                ),
                (
                    "anticipatory_to_response_es",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Please explain how is the operation is transitioning from Anticipatory to Response",
                    ),
                ),
                (
                    "anticipatory_to_response_fr",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Please explain how is the operation is transitioning from Anticipatory to Response",
                    ),
                ),
                (
                    "anticipatory_to_response_ar",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Please explain how is the operation is transitioning from Anticipatory to Response",
                    ),
                ),
                ("specified_trigger_met", models.TextField(blank=True, null=True, verbose_name="Specified Trigger Met")),
                ("people_in_need", models.IntegerField(blank=True, null=True, verbose_name="people in need")),
                ("event_date", models.DateField(blank=True, null=True, verbose_name="event date")),
                ("ns_respond_date", models.DateField(blank=True, null=True, verbose_name="ns respond date")),
                ("did_ns_respond", models.BooleanField(blank=True, default=False, help_text="Did NS respond", null=True)),
                (
                    "total_targeted_population",
                    models.IntegerField(blank=True, null=True, verbose_name="total targeted population"),
                ),
                ("has_event_occurred", models.BooleanField(blank=True, help_text="Has Event occurred", null=True)),
                (
                    "human_resource",
                    models.TextField(
                        blank=True,
                        help_text="how many volunteers and staff involved in the response?",
                        null=True,
                        verbose_name="human resource",
                    ),
                ),
                (
                    "human_resource_en",
                    models.TextField(
                        blank=True,
                        help_text="how many volunteers and staff involved in the response?",
                        null=True,
                        verbose_name="human resource",
                    ),
                ),
                (
                    "human_resource_es",
                    models.TextField(
                        blank=True,
                        help_text="how many volunteers and staff involved in the response?",
                        null=True,
                        verbose_name="human resource",
                    ),
                ),
                (
                    "human_resource_fr",
                    models.TextField(
                        blank=True,
                        help_text="how many volunteers and staff involved in the response?",
                        null=True,
                        verbose_name="human resource",
                    ),
                ),
                (
                    "human_resource_ar",
                    models.TextField(
                        blank=True,
                        help_text="how many volunteers and staff involved in the response?",
                        null=True,
                        verbose_name="human resource",
                    ),
                ),
                (
                    "is_surge_personnel_deployed",
                    models.BooleanField(blank=True, null=True, verbose_name="Is surge personnel deployed"),
                ),
                (
                    "surge_personnel_deployed",
                    models.TextField(
                        blank=True,
                        help_text="Will a Surge personnel be deployed?",
                        null=True,
                        verbose_name="surge personnel deployed",
                    ),
                ),
                (
                    "surge_personnel_deployed_en",
                    models.TextField(
                        blank=True,
                        help_text="Will a Surge personnel be deployed?",
                        null=True,
                        verbose_name="surge personnel deployed",
                    ),
                ),
                (
                    "surge_personnel_deployed_es",
                    models.TextField(
                        blank=True,
                        help_text="Will a Surge personnel be deployed?",
                        null=True,
                        verbose_name="surge personnel deployed",
                    ),
                ),
                (
                    "surge_personnel_deployed_fr",
                    models.TextField(
                        blank=True,
                        help_text="Will a Surge personnel be deployed?",
                        null=True,
                        verbose_name="surge personnel deployed",
                    ),
                ),
                (
                    "surge_personnel_deployed_ar",
                    models.TextField(
                        blank=True,
                        help_text="Will a Surge personnel be deployed?",
                        null=True,
                        verbose_name="surge personnel deployed",
                    ),
                ),
                (
                    "logistic_capacity_of_ns",
                    models.TextField(
                        blank=True,
                        help_text="what is the logistics capacity of the National Society?",
                        null=True,
                        verbose_name="logistic capacity of ns",
                    ),
                ),
                (
                    "logistic_capacity_of_ns_en",
                    models.TextField(
                        blank=True,
                        help_text="what is the logistics capacity of the National Society?",
                        null=True,
                        verbose_name="logistic capacity of ns",
                    ),
                ),
                (
                    "logistic_capacity_of_ns_es",
                    models.TextField(
                        blank=True,
                        help_text="what is the logistics capacity of the National Society?",
                        null=True,
                        verbose_name="logistic capacity of ns",
                    ),
                ),
                (
                    "logistic_capacity_of_ns_fr",
                    models.TextField(
                        blank=True,
                        help_text="what is the logistics capacity of the National Society?",
                        null=True,
                        verbose_name="logistic capacity of ns",
                    ),
                ),
                (
                    "logistic_capacity_of_ns_ar",
                    models.TextField(
                        blank=True,
                        help_text="what is the logistics capacity of the National Society?",
                        null=True,
                        verbose_name="logistic capacity of ns",
                    ),
                ),
                (
                    "safety_concerns",
                    models.TextField(
                        blank=True,
                        help_text="Are there any safety/security concerns which may impact the implementation of this operation?",
                        null=True,
                        verbose_name="safety concerns",
                    ),
                ),
                (
                    "pmer",
                    models.TextField(blank=True, help_text="Does the NS have PMER capacity?", null=True, verbose_name="pmer"),
                ),
                (
                    "pmer_en",
                    models.TextField(blank=True, help_text="Does the NS have PMER capacity?", null=True, verbose_name="pmer"),
                ),
                (
                    "pmer_es",
                    models.TextField(blank=True, help_text="Does the NS have PMER capacity?", null=True, verbose_name="pmer"),
                ),
                (
                    "pmer_fr",
                    models.TextField(blank=True, help_text="Does the NS have PMER capacity?", null=True, verbose_name="pmer"),
                ),
                (
                    "pmer_ar",
                    models.TextField(blank=True, help_text="Does the NS have PMER capacity?", null=True, verbose_name="pmer"),
                ),
                (
                    "communication",
                    models.TextField(
                        blank=True, help_text="Does the NS have Communications capacity?", null=True, verbose_name="organization"
                    ),
                ),
                (
                    "communication_en",
                    models.TextField(
                        blank=True, help_text="Does the NS have Communications capacity?", null=True, verbose_name="organization"
                    ),
                ),
                (
                    "communication_es",
                    models.TextField(
                        blank=True, help_text="Does the NS have Communications capacity?", null=True, verbose_name="organization"
                    ),
                ),
                (
                    "communication_fr",
                    models.TextField(
                        blank=True, help_text="Does the NS have Communications capacity?", null=True, verbose_name="organization"
                    ),
                ),
                (
                    "communication_ar",
                    models.TextField(
                        blank=True, help_text="Does the NS have Communications capacity?", null=True, verbose_name="organization"
                    ),
                ),
                ("ns_request_date", models.DateField(blank=True, null=True, verbose_name="Ns request date")),
                ("date_of_approval", models.DateField(blank=True, null=True, verbose_name="Date of Approval")),
                (
                    "identified_gaps",
                    models.TextField(
                        blank=True,
                        help_text="Any identified gaps/limitations in the assessment",
                        null=True,
                        verbose_name="identified gaps",
                    ),
                ),
                ("is_man_made_event", models.BooleanField(blank=True, null=True, verbose_name="Is Man-made Event")),
                ("event_text", models.TextField(blank=True, null=True, verbose_name="event text")),
                ("did_national_society", models.BooleanField(blank=True, null=True, verbose_name="Did National Society")),
                ("reporting_start_date", models.DateField(blank=True, null=True, verbose_name="Reporting Start Date")),
                ("reporting_end_date", models.DateField(blank=True, null=True, verbose_name="Reporting End Date")),
                (
                    "translation_module_original_language",
                    models.CharField(
                        choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                        default="en",
                        help_text="Language used to create this entity",
                        max_length=2,
                        verbose_name="Entity Original language",
                    ),
                ),
                (
                    "translation_module_skip_auto_translation",
                    models.BooleanField(
                        default=False,
                        help_text="Skip auto translation operation for this entity?",
                        verbose_name="Skip auto translation",
                    ),
                ),
                (
                    "assessment_report",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="dref_operational_update_assessment_report",
                        to="dref.dreffile",
                        verbose_name="Assessment Report",
                    ),
                ),
                (
                    "budget_file",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="budget_file_dref_operational_update",
                        to="dref.dreffile",
                        verbose_name="budget file",
                    ),
                ),
                (
                    "country",
                    models.ForeignKey(
                        blank=True,
                        help_text="Affected County",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="operational_update_country",
                        to="api.country",
                        verbose_name="country",
                    ),
                ),
                (
                    "cover_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="cover_image_dref_operational_update",
                        to="dref.dreffile",
                        verbose_name="cover image",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_by_dref_operational_update",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "disaster_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.disastertype",
                        verbose_name="disaster type",
                    ),
                ),
                ("district", models.ManyToManyField(blank=True, to="api.district", verbose_name="district")),
                ("dref", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="dref.dref", verbose_name="Dref")),
                (
                    "event_map",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="event_map_dref_operational_update",
                        to="dref.dreffile",
                        verbose_name="event map",
                    ),
                ),
                (
                    "images",
                    models.ManyToManyField(
                        blank=True, related_name="image_dref_operational_update", to="dref.dreffile", verbose_name="images"
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="modified_by_dref_operational_update",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="modified by",
                    ),
                ),
                (
                    "national_society",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="national_society_operational_update",
                        to="api.country",
                        verbose_name="national_society",
                    ),
                ),
                (
                    "national_society_actions",
                    models.ManyToManyField(blank=True, to="dref.nationalsocietyaction", verbose_name="national society actions"),
                ),
                (
                    "needs_identified",
                    models.ManyToManyField(blank=True, to="dref.identifiedneed", verbose_name="needs identified"),
                ),
                (
                    "photos",
                    models.ManyToManyField(
                        blank=True, related_name="photos_dref_operational_update", to="dref.dreffile", verbose_name="images"
                    ),
                ),
                (
                    "planned_interventions",
                    models.ManyToManyField(blank=True, to="dref.plannedintervention", verbose_name="planned intervention"),
                ),
                ("risk_security", models.ManyToManyField(blank=True, to="dref.risksecurity", verbose_name="Risk Security")),
                (
                    "source_information",
                    models.ManyToManyField(blank=True, to="dref.sourceinformation", verbose_name="Source Information"),
                ),
                (
                    "users",
                    models.ManyToManyField(
                        blank=True, related_name="user_dref_operational_update", to=settings.AUTH_USER_MODEL, verbose_name="users"
                    ),
                ),
            ],
            options={
                "verbose_name": "Dref Operational Update",
                "verbose_name_plural": "Dref Operational Updates",
            },
        ),
        migrations.CreateModel(
            name="DrefFinalReport",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="created at")),
                ("modified_at", models.DateTimeField(default=django.utils.timezone.now, null=True, verbose_name="modified at")),
                ("title", models.CharField(blank=True, max_length=255, null=True, verbose_name="title")),
                ("title_en", models.CharField(blank=True, max_length=255, null=True, verbose_name="title")),
                ("title_es", models.CharField(blank=True, max_length=255, null=True, verbose_name="title")),
                ("title_fr", models.CharField(blank=True, max_length=255, null=True, verbose_name="title")),
                ("title_ar", models.CharField(blank=True, max_length=255, null=True, verbose_name="title")),
                ("title_prefix", models.CharField(blank=True, max_length=255, null=True, verbose_name="title prefix")),
                ("title_prefix_en", models.CharField(blank=True, max_length=255, null=True, verbose_name="title prefix")),
                ("title_prefix_es", models.CharField(blank=True, max_length=255, null=True, verbose_name="title prefix")),
                ("title_prefix_fr", models.CharField(blank=True, max_length=255, null=True, verbose_name="title prefix")),
                ("title_prefix_ar", models.CharField(blank=True, max_length=255, null=True, verbose_name="title prefix")),
                (
                    "type_of_dref",
                    models.IntegerField(
                        blank=True,
                        choices=[(0, "Imminent"), (1, "Assessment"), (2, "Response"), (3, "Loan")],
                        null=True,
                        verbose_name="dref type",
                    ),
                ),
                (
                    "type_of_onset",
                    models.IntegerField(blank=True, choices=[(1, "Slow"), (2, "Sudden")], null=True, verbose_name="onset type"),
                ),
                (
                    "disaster_category",
                    models.IntegerField(
                        blank=True,
                        choices=[(0, "Yellow"), (1, "Orange"), (2, "Red")],
                        null=True,
                        verbose_name="disaster category",
                    ),
                ),
                (
                    "status",
                    models.IntegerField(
                        blank=True, choices=[(0, "In Progress"), (1, "Completed")], null=True, verbose_name="status"
                    ),
                ),
                (
                    "number_of_people_targeted",
                    models.IntegerField(blank=True, null=True, verbose_name="Number of people targeted"),
                ),
                (
                    "number_of_people_affected",
                    models.IntegerField(blank=True, null=True, verbose_name="number of people affected"),
                ),
                ("total_dref_allocation", models.IntegerField(blank=True, null=True, verbose_name="Total dref allocation")),
                ("date_of_publication", models.DateField(blank=True, null=True, verbose_name="Date of publication")),
                (
                    "total_operation_timeframe",
                    models.IntegerField(blank=True, null=True, verbose_name="Total Operation Timeframe"),
                ),
                ("operation_start_date", models.DateField(blank=True, null=True, verbose_name="Operation Start Date")),
                ("appeal_code", models.CharField(blank=True, max_length=255, null=True, verbose_name="appeal code")),
                ("glide_code", models.CharField(blank=True, max_length=255, null=True, verbose_name="glide number")),
                (
                    "ifrc_appeal_manager_name",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="ifrc appeal manager name"),
                ),
                (
                    "ifrc_appeal_manager_email",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="ifrc appeal manager email"),
                ),
                (
                    "ifrc_appeal_manager_title",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="ifrc appeal manager title"),
                ),
                (
                    "ifrc_appeal_manager_phone_number",
                    models.CharField(blank=True, max_length=100, null=True, verbose_name="ifrc appeal manager phone number"),
                ),
                (
                    "ifrc_project_manager_name",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="ifrc project manager name"),
                ),
                (
                    "ifrc_project_manager_email",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="ifrc project manager email"),
                ),
                (
                    "ifrc_project_manager_title",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="ifrc project manager title"),
                ),
                (
                    "ifrc_project_manager_phone_number",
                    models.CharField(blank=True, max_length=100, null=True, verbose_name="ifrc project manager phone number"),
                ),
                (
                    "national_society_contact_name",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="national society contact name"),
                ),
                (
                    "national_society_contact_email",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="national society contact email"),
                ),
                (
                    "national_society_contact_title",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="national society contact title"),
                ),
                (
                    "national_society_contact_phone_number",
                    models.CharField(blank=True, max_length=100, null=True, verbose_name="national society contact phone number"),
                ),
                (
                    "ifrc_emergency_name",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="ifrc emergency name"),
                ),
                (
                    "ifrc_emergency_email",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="ifrc emergency email"),
                ),
                (
                    "ifrc_emergency_title",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="ifrc emergency title"),
                ),
                (
                    "ifrc_emergency_phone_number",
                    models.CharField(blank=True, max_length=100, null=True, verbose_name="ifrc emergency phone number"),
                ),
                (
                    "media_contact_name",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="media contact name"),
                ),
                (
                    "media_contact_email",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="media contact email"),
                ),
                (
                    "media_contact_title",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="media contact title"),
                ),
                (
                    "media_contact_phone_number",
                    models.CharField(blank=True, max_length=100, null=True, verbose_name="media_contact phone number"),
                ),
                (
                    "regional_focal_point_name",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="regional focal point name"),
                ),
                (
                    "regional_focal_point_email",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="regional focal point email"),
                ),
                (
                    "regional_focal_point_title",
                    models.CharField(blank=True, max_length=255, null=True, verbose_name="regional focal point title"),
                ),
                (
                    "regional_focal_point_phone_number",
                    models.CharField(blank=True, max_length=100, null=True, verbose_name="regional focal point phone number"),
                ),
                ("event_description", models.TextField(blank=True, null=True, verbose_name="Event description")),
                ("event_description_en", models.TextField(blank=True, null=True, verbose_name="Event description")),
                ("event_description_es", models.TextField(blank=True, null=True, verbose_name="Event description")),
                ("event_description_fr", models.TextField(blank=True, null=True, verbose_name="Event description")),
                ("event_description_ar", models.TextField(blank=True, null=True, verbose_name="Event description")),
                ("anticipatory_actions", models.TextField(blank=True, null=True, verbose_name="Anticipatory actions")),
                ("anticipatory_actions_en", models.TextField(blank=True, null=True, verbose_name="Anticipatory actions")),
                ("anticipatory_actions_es", models.TextField(blank=True, null=True, verbose_name="Anticipatory actions")),
                ("anticipatory_actions_fr", models.TextField(blank=True, null=True, verbose_name="Anticipatory actions")),
                ("anticipatory_actions_ar", models.TextField(blank=True, null=True, verbose_name="Anticipatory actions")),
                ("event_scope", models.TextField(blank=True, null=True, verbose_name="Event scope")),
                ("event_scope_en", models.TextField(blank=True, null=True, verbose_name="Event scope")),
                ("event_scope_es", models.TextField(blank=True, null=True, verbose_name="Event scope")),
                ("event_scope_fr", models.TextField(blank=True, null=True, verbose_name="Event scope")),
                ("event_scope_ar", models.TextField(blank=True, null=True, verbose_name="Event scope")),
                ("ifrc", models.TextField(blank=True, null=True, verbose_name="ifrc")),
                ("ifrc_en", models.TextField(blank=True, null=True, verbose_name="ifrc")),
                ("ifrc_es", models.TextField(blank=True, null=True, verbose_name="ifrc")),
                ("ifrc_fr", models.TextField(blank=True, null=True, verbose_name="ifrc")),
                ("ifrc_ar", models.TextField(blank=True, null=True, verbose_name="ifrc")),
                ("icrc", models.TextField(blank=True, null=True, verbose_name="icrc")),
                ("icrc_en", models.TextField(blank=True, null=True, verbose_name="icrc")),
                ("icrc_es", models.TextField(blank=True, null=True, verbose_name="icrc")),
                ("icrc_fr", models.TextField(blank=True, null=True, verbose_name="icrc")),
                ("icrc_ar", models.TextField(blank=True, null=True, verbose_name="icrc")),
                ("partner_national_society", models.TextField(blank=True, null=True, verbose_name="partner national society")),
                ("partner_national_society_en", models.TextField(blank=True, null=True, verbose_name="partner national society")),
                ("partner_national_society_es", models.TextField(blank=True, null=True, verbose_name="partner national society")),
                ("partner_national_society_fr", models.TextField(blank=True, null=True, verbose_name="partner national society")),
                ("partner_national_society_ar", models.TextField(blank=True, null=True, verbose_name="partner national society")),
                (
                    "government_requested_assistance",
                    models.BooleanField(blank=True, help_text="Has government requested assistance", null=True),
                ),
                ("national_authorities", models.TextField(blank=True, null=True, verbose_name="national authorities")),
                ("national_authorities_en", models.TextField(blank=True, null=True, verbose_name="national authorities")),
                ("national_authorities_es", models.TextField(blank=True, null=True, verbose_name="national authorities")),
                ("national_authorities_fr", models.TextField(blank=True, null=True, verbose_name="national authorities")),
                ("national_authorities_ar", models.TextField(blank=True, null=True, verbose_name="national authorities")),
                ("un_or_other_actor", models.TextField(blank=True, null=True, verbose_name="un or other")),
                ("un_or_other_actor_en", models.TextField(blank=True, null=True, verbose_name="un or other")),
                ("un_or_other_actor_es", models.TextField(blank=True, null=True, verbose_name="un or other")),
                ("un_or_other_actor_fr", models.TextField(blank=True, null=True, verbose_name="un or other")),
                ("un_or_other_actor_ar", models.TextField(blank=True, null=True, verbose_name="un or other")),
                ("people_assisted", models.TextField(blank=True, null=True, verbose_name="people assisted")),
                (
                    "selection_criteria",
                    models.TextField(
                        blank=True,
                        help_text="Selection criteria for affected people",
                        null=True,
                        verbose_name="selection criteria",
                    ),
                ),
                (
                    "selection_criteria_en",
                    models.TextField(
                        blank=True,
                        help_text="Selection criteria for affected people",
                        null=True,
                        verbose_name="selection criteria",
                    ),
                ),
                (
                    "selection_criteria_es",
                    models.TextField(
                        blank=True,
                        help_text="Selection criteria for affected people",
                        null=True,
                        verbose_name="selection criteria",
                    ),
                ),
                (
                    "selection_criteria_fr",
                    models.TextField(
                        blank=True,
                        help_text="Selection criteria for affected people",
                        null=True,
                        verbose_name="selection criteria",
                    ),
                ),
                (
                    "selection_criteria_ar",
                    models.TextField(
                        blank=True,
                        help_text="Selection criteria for affected people",
                        null=True,
                        verbose_name="selection criteria",
                    ),
                ),
                (
                    "community_involved",
                    models.TextField(
                        blank=True,
                        help_text="Community been involved in the analysis of the process",
                        null=True,
                        verbose_name="community involved",
                    ),
                ),
                (
                    "entity_affected",
                    models.TextField(
                        blank=True,
                        help_text="Protection, gender, Inclusion affected in this process",
                        null=True,
                        verbose_name="entity affected",
                    ),
                ),
                (
                    "change_in_operational_strategy",
                    models.BooleanField(default=False, verbose_name="Change in operational strategy"),
                ),
                (
                    "change_in_operational_strategy_text",
                    models.TextField(blank=True, null=True, verbose_name="Change in operational strategy"),
                ),
                ("women", models.IntegerField(blank=True, null=True, verbose_name="women")),
                ("men", models.IntegerField(blank=True, null=True, verbose_name="men")),
                ("girls", models.IntegerField(blank=True, help_text="Girls under 18", null=True, verbose_name="girls")),
                ("boys", models.IntegerField(blank=True, help_text="Boys under 18", null=True, verbose_name="boys")),
                ("disability_people_per", models.FloatField(blank=True, null=True, verbose_name="disability people per")),
                ("people_per_urban", models.FloatField(blank=True, null=True, verbose_name="people per urban")),
                ("people_per_local", models.FloatField(blank=True, null=True, verbose_name="people per local")),
                (
                    "people_targeted_with_early_actions",
                    models.IntegerField(blank=True, null=True, verbose_name="people targeted with early actions"),
                ),
                ("displaced_people", models.IntegerField(blank=True, null=True, verbose_name="displaced people")),
                ("operation_objective", models.TextField(blank=True, null=True, verbose_name="operation objective")),
                ("operation_objective_en", models.TextField(blank=True, null=True, verbose_name="operation objective")),
                ("operation_objective_es", models.TextField(blank=True, null=True, verbose_name="operation objective")),
                ("operation_objective_fr", models.TextField(blank=True, null=True, verbose_name="operation objective")),
                ("operation_objective_ar", models.TextField(blank=True, null=True, verbose_name="operation objective")),
                ("response_strategy", models.TextField(blank=True, null=True, verbose_name="response strategy")),
                ("response_strategy_en", models.TextField(blank=True, null=True, verbose_name="response strategy")),
                ("response_strategy_es", models.TextField(blank=True, null=True, verbose_name="response strategy")),
                ("response_strategy_fr", models.TextField(blank=True, null=True, verbose_name="response strategy")),
                ("response_strategy_ar", models.TextField(blank=True, null=True, verbose_name="response strategy")),
                ("want_to_report", models.BooleanField(default=False, verbose_name="Want to report")),
                (
                    "additional_national_society_actions",
                    models.TextField(blank=True, null=True, verbose_name="Additional National Societies Actions"),
                ),
                ("is_published", models.BooleanField(default=False, verbose_name="Is Published")),
                (
                    "is_there_major_coordination_mechanism",
                    models.BooleanField(blank=True, help_text="Is there major coordinate mechanism", null=True),
                ),
                (
                    "major_coordination_mechanism",
                    models.TextField(blank=True, null=True, verbose_name="major coordination mechanism"),
                ),
                (
                    "major_coordination_mechanism_en",
                    models.TextField(blank=True, null=True, verbose_name="major coordination mechanism"),
                ),
                (
                    "major_coordination_mechanism_es",
                    models.TextField(blank=True, null=True, verbose_name="major coordination mechanism"),
                ),
                (
                    "major_coordination_mechanism_fr",
                    models.TextField(blank=True, null=True, verbose_name="major coordination mechanism"),
                ),
                (
                    "major_coordination_mechanism_ar",
                    models.TextField(blank=True, null=True, verbose_name="major coordination mechanism"),
                ),
                (
                    "total_targeted_population",
                    models.IntegerField(blank=True, null=True, verbose_name="total targeted population"),
                ),
                (
                    "has_child_safeguarding_risk_analysis_assessment",
                    models.BooleanField(
                        blank=True, null=True, verbose_name="Has the child safeguarding risk analysis assessment been completed?"
                    ),
                ),
                ("risk_security_concern", models.TextField(blank=True, null=True, verbose_name="Risk Security Concern")),
                ("risk_security_concern_en", models.TextField(blank=True, null=True, verbose_name="Risk Security Concern")),
                ("risk_security_concern_es", models.TextField(blank=True, null=True, verbose_name="Risk Security Concern")),
                ("risk_security_concern_fr", models.TextField(blank=True, null=True, verbose_name="Risk Security Concern")),
                ("risk_security_concern_ar", models.TextField(blank=True, null=True, verbose_name="Risk Security Concern")),
                (
                    "event_date",
                    models.DateField(
                        blank=True, help_text="Date of event/Approximate date of impact", null=True, verbose_name="event date"
                    ),
                ),
                ("people_in_need", models.IntegerField(blank=True, null=True, verbose_name="people in need")),
                ("event_text", models.TextField(blank=True, null=True, verbose_name="event text")),
                ("event_text_en", models.TextField(blank=True, null=True, verbose_name="event text")),
                ("event_text_es", models.TextField(blank=True, null=True, verbose_name="event text")),
                ("event_text_fr", models.TextField(blank=True, null=True, verbose_name="event text")),
                ("event_text_ar", models.TextField(blank=True, null=True, verbose_name="event text")),
                (
                    "ns_respond_date",
                    models.DateField(
                        blank=True,
                        help_text="NS anticipatory actions started/NS response",
                        null=True,
                        verbose_name="ns respond date",
                    ),
                ),
                ("did_national_society", models.BooleanField(blank=True, null=True, verbose_name="Did National Society")),
                (
                    "financial_report_preview",
                    models.FileField(blank=True, null=True, upload_to="dref/images/", verbose_name="financial preview"),
                ),
                ("num_assisted", models.IntegerField(blank=True, null=True, verbose_name="number of assisted")),
                (
                    "has_national_society_conducted",
                    models.BooleanField(blank=True, null=True, verbose_name="Has national society conducted any intervention"),
                ),
                (
                    "national_society_conducted_description",
                    models.TextField(blank=True, null=True, verbose_name="National Society conducted description"),
                ),
                (
                    "national_society_conducted_description_en",
                    models.TextField(blank=True, null=True, verbose_name="National Society conducted description"),
                ),
                (
                    "national_society_conducted_description_es",
                    models.TextField(blank=True, null=True, verbose_name="National Society conducted description"),
                ),
                (
                    "national_society_conducted_description_fr",
                    models.TextField(blank=True, null=True, verbose_name="National Society conducted description"),
                ),
                (
                    "national_society_conducted_description_ar",
                    models.TextField(blank=True, null=True, verbose_name="National Society conducted description"),
                ),
                (
                    "financial_report_description",
                    models.TextField(blank=True, null=True, verbose_name="Financial Report Description"),
                ),
                (
                    "financial_report_description_en",
                    models.TextField(blank=True, null=True, verbose_name="Financial Report Description"),
                ),
                (
                    "financial_report_description_es",
                    models.TextField(blank=True, null=True, verbose_name="Financial Report Description"),
                ),
                (
                    "financial_report_description_fr",
                    models.TextField(blank=True, null=True, verbose_name="Financial Report Description"),
                ),
                (
                    "financial_report_description_ar",
                    models.TextField(blank=True, null=True, verbose_name="Financial Report Description"),
                ),
                ("date_of_approval", models.DateField(blank=True, null=True, verbose_name="Date of Approval")),
                ("main_donors", models.TextField(blank=True, null=True, verbose_name="Main Donors")),
                ("operation_end_date", models.DateField(blank=True, null=True, verbose_name="Operation End Date")),
                (
                    "translation_module_original_language",
                    models.CharField(
                        choices=[("en", "English"), ("es", "Spanish"), ("fr", "French"), ("ar", "Arabic")],
                        default="en",
                        help_text="Language used to create this entity",
                        max_length=2,
                        verbose_name="Entity Original language",
                    ),
                ),
                (
                    "translation_module_skip_auto_translation",
                    models.BooleanField(
                        default=False,
                        help_text="Skip auto translation operation for this entity?",
                        verbose_name="Skip auto translation",
                    ),
                ),
                (
                    "assessment_report",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="dref_final_report_assessment_report",
                        to="dref.dreffile",
                        verbose_name="Assessment Report",
                    ),
                ),
                (
                    "country",
                    models.ForeignKey(
                        blank=True,
                        help_text="Affected County",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="final_report_country",
                        to="api.country",
                        verbose_name="country",
                    ),
                ),
                (
                    "cover_image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="cover_image_dref_final_report",
                        to="dref.dreffile",
                        verbose_name="cover image",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_by_dref_final_report",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "disaster_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.disastertype",
                        verbose_name="disaster type",
                    ),
                ),
                ("district", models.ManyToManyField(blank=True, to="api.district", verbose_name="district")),
                ("dref", models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to="dref.dref", verbose_name="Dref")),
                (
                    "event_map",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="event_map_dref_final_report",
                        to="dref.dreffile",
                        verbose_name="event map",
                    ),
                ),
                (
                    "financial_report",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="financial_report_dref_final_report",
                        to="dref.dreffile",
                        verbose_name="financial report",
                    ),
                ),
                (
                    "images",
                    models.ManyToManyField(
                        blank=True, related_name="image_dref_final_report", to="dref.dreffile", verbose_name="images"
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="modified_by_dref_final_report",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="modified by",
                    ),
                ),
                (
                    "national_society",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="national_society_final_report",
                        to="api.country",
                        verbose_name="national_society",
                    ),
                ),
                (
                    "national_society_actions",
                    models.ManyToManyField(blank=True, to="dref.nationalsocietyaction", verbose_name="national society actions"),
                ),
                (
                    "needs_identified",
                    models.ManyToManyField(blank=True, to="dref.identifiedneed", verbose_name="needs identified"),
                ),
                (
                    "photos",
                    models.ManyToManyField(
                        blank=True, related_name="photos_dref_final_report", to="dref.dreffile", verbose_name="images"
                    ),
                ),
                (
                    "planned_interventions",
                    models.ManyToManyField(blank=True, to="dref.plannedintervention", verbose_name="planned intervention"),
                ),
                ("risk_security", models.ManyToManyField(blank=True, to="dref.risksecurity", verbose_name="Risk Security")),
                (
                    "source_information",
                    models.ManyToManyField(blank=True, to="dref.sourceinformation", verbose_name="Source Information"),
                ),
                (
                    "users",
                    models.ManyToManyField(
                        blank=True, related_name="user_dref_final_report", to=settings.AUTH_USER_MODEL, verbose_name="users"
                    ),
                ),
            ],
            options={
                "verbose_name": "Dref Final Report",
                "verbose_name_plural": "Dref Final Reports",
            },
        ),
        migrations.AddField(
            model_name="dref",
            name="assessment_report",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="dref_assessment_report",
                to="dref.dreffile",
                verbose_name="Assessment Report",
            ),
        ),
        migrations.AddField(
            model_name="dref",
            name="budget_file",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="budget_file_dref",
                to="dref.dreffile",
                verbose_name="budget file",
            ),
        ),
        migrations.AddField(
            model_name="dref",
            name="country",
            field=models.ForeignKey(
                blank=True,
                help_text="Affected County",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="dref_country",
                to="api.country",
                verbose_name="country",
            ),
        ),
        migrations.AddField(
            model_name="dref",
            name="cover_image",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="cover_image_dref",
                to="dref.dreffile",
                verbose_name="cover image",
            ),
        ),
        migrations.AddField(
            model_name="dref",
            name="created_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="created_by_dref",
                to=settings.AUTH_USER_MODEL,
                verbose_name="created by",
            ),
        ),
        migrations.AddField(
            model_name="dref",
            name="disaster_category_analysis",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="dref_disaster_category_file",
                to="dref.dreffile",
                verbose_name="If available please upload Disaster categorization Analysis",
            ),
        ),
        migrations.AddField(
            model_name="dref",
            name="disaster_type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="api.disastertype",
                verbose_name="disaster type",
            ),
        ),
        migrations.AddField(
            model_name="dref",
            name="district",
            field=models.ManyToManyField(blank=True, to="api.district", verbose_name="district"),
        ),
        migrations.AddField(
            model_name="dref",
            name="event_map",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="event_map_dref",
                to="dref.dreffile",
                verbose_name="event map",
            ),
        ),
        migrations.AddField(
            model_name="dref",
            name="field_report",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="field_report_dref",
                to="api.fieldreport",
                verbose_name="field report",
            ),
        ),
        migrations.AddField(
            model_name="dref",
            name="images",
            field=models.ManyToManyField(blank=True, related_name="image_dref", to="dref.dreffile", verbose_name="images"),
        ),
        migrations.AddField(
            model_name="dref",
            name="modified_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="modified_by_dref",
                to=settings.AUTH_USER_MODEL,
                verbose_name="modified by",
            ),
        ),
        migrations.AddField(
            model_name="dref",
            name="national_society",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.country", verbose_name="national_society"
            ),
        ),
        migrations.AddField(
            model_name="dref",
            name="national_society_actions",
            field=models.ManyToManyField(blank=True, to="dref.nationalsocietyaction", verbose_name="national society actions"),
        ),
        migrations.AddField(
            model_name="dref",
            name="needs_identified",
            field=models.ManyToManyField(blank=True, to="dref.identifiedneed", verbose_name="needs identified"),
        ),
        migrations.AddField(
            model_name="dref",
            name="planned_interventions",
            field=models.ManyToManyField(blank=True, to="dref.plannedintervention", verbose_name="planned intervention"),
        ),
        migrations.AddField(
            model_name="dref",
            name="risk_security",
            field=models.ManyToManyField(blank=True, to="dref.risksecurity", verbose_name="Risk Security"),
        ),
        migrations.AddField(
            model_name="dref",
            name="source_information",
            field=models.ManyToManyField(blank=True, to="dref.sourceinformation", verbose_name="Source Information"),
        ),
        migrations.AddField(
            model_name="dref",
            name="supporting_document",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="dref_supporting_document",
                to="dref.dreffile",
                verbose_name="Supporting Document",
            ),
        ),
        migrations.AddField(
            model_name="dref",
            name="targeting_strategy_support_file",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="dref_targeting_strategy_support_file",
                to="dref.dreffile",
                verbose_name="If available please upload additional support documentation for targeting strategy",
            ),
        ),
        migrations.AddField(
            model_name="dref",
            name="users",
            field=models.ManyToManyField(blank=True, related_name="user_dref", to=settings.AUTH_USER_MODEL, verbose_name="users"),
        ),
    ]
