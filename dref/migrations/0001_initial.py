# Generated by Django 2.2.26 on 2022-02-03 06:18

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('api', '0142_auto_20220202_0551'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='IdentifiedNeed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(choices=[('shelter_and_basic_household_items', 'Shelter And Basic Household Items'), ('livelihoods_and_basic_needs', 'Livelihoods And Basic Needs'), ('health', 'Health'), ('water_sanitation_and_hygiene', 'Water, Sanitation And Hygiene'), ('protection_gender_and_inculsion', 'Protection, Gender And Inculsion'), ('education', 'Education'), ('migration', 'Migration'), ('risk_reduction_climate_adaptation_and_recovery', 'Risk Reduction, Climate Adaptation And Recovery'), ('community_engagement_and _accountability', 'Community Engagement And Accountability'), ('environment_sustainability ', 'Environment Sustainability'), ('shelter_cluster_coordination', 'Shelter Cluster Coordination')], max_length=255, verbose_name='title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'identified need',
                'verbose_name_plural': 'identified needs',
            },
        ),
        migrations.CreateModel(
            name='NationalSocietyAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(choices=[('national_society_readiness', 'National Society Readiness'), ('assessment', 'Assessment'), ('coordination', 'Coordination'), ('resource_mobilization', 'Resource Mobilization'), ('activation_of_contingency_plans', 'Activation Of Contingency Plans'), ('national_society_eoc', 'National Society EOC'), ('shelter_and_basic_household_items', 'Shelter And Basic Household Items'), ('livelihoods_and_basic_needs', 'Livelihoods And Basic Needs'), ('health', 'Health'), ('water_sanitation_and_hygiene', 'Water, Sanitation And Hygiene'), ('protection_gender_and_inculsion', 'Protection, Gender And Inculsion'), ('education', 'Education'), ('migration', 'Migration'), ('risk_reduction_climate_adaptation_and_recovery', 'Risk Reduction, Climate Adaptation And Recovery'), ('community_engagement_and _accountability', 'Community Engagement And Accountability'), ('environment_sustainability ', 'Environment Sustainability'), ('other', 'Other')], max_length=255, verbose_name='title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'national society action',
                'verbose_name_plural': 'national society actions',
            },
        ),
        migrations.CreateModel(
            name='PlannedIntervention',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(choices=[('shelter_and_basic_household_items', 'Shelter And Basic Household Items'), ('livelihoods_and_basic_needs', 'Livelihoods And Basic Needs'), ('health', 'Health'), ('water_sanitation_and_hygiene', 'Water, Sanitation And Hygiene'), ('protection_gender_and_inculsion', 'Protection, Gender And Inculsion'), ('education', 'Education'), ('migration', 'Migration'), ('risk_reduction_climate_adaptation_and_recovery_', 'Risk Reduction, Climate Adaptation And Recovery'), ('secretariat_services', 'Secretariat Services'), ('national_society_strengthening', 'National Society Strengthening')], max_length=255, verbose_name='title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('budget', models.IntegerField(blank=True, null=True, verbose_name='budget')),
                ('person_targeted', models.IntegerField(blank=True, null=True, verbose_name='person targeted')),
                ('indicator', models.TextField(blank=True, null=True, verbose_name='indicator')),
            ],
            options={
                'verbose_name': 'planned intervention',
                'verbose_name_plural': 'planned interventions',
            },
        ),
        migrations.CreateModel(
            name='DrefFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='dref/images/', verbose_name='file')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='created_by')),
            ],
            options={
                'verbose_name': 'dref file',
                'verbose_name_plural': 'dref files',
            },
        ),
        migrations.CreateModel(
            name='Dref',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='modified at')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('title_en', models.CharField(max_length=255, null=True, verbose_name='title')),
                ('title_es', models.CharField(max_length=255, null=True, verbose_name='title')),
                ('title_fr', models.CharField(max_length=255, null=True, verbose_name='title')),
                ('title_ar', models.CharField(max_length=255, null=True, verbose_name='title')),
                ('type_of_onset', models.IntegerField(blank=True, choices=[(0, 'Imminent'), (1, 'Slow'), (2, 'Sudden')], null=True, verbose_name='onset type')),
                ('disaster_category', models.IntegerField(blank=True, choices=[(0, 'Yellow'), (1, 'Orange'), (2, 'Red')], null=True, verbose_name='disaster category')),
                ('status', models.IntegerField(blank=True, choices=[(0, 'In Progress'), (1, 'Completed')], null=True, verbose_name='status')),
                ('num_assisted', models.IntegerField(blank=True, null=True, verbose_name='number of assisted')),
                ('num_affected', models.IntegerField(blank=True, null=True, verbose_name='number of affected')),
                ('amount_requested', models.IntegerField(blank=True, null=True, verbose_name='amount requested')),
                ('emergency_appeal_planned', models.BooleanField(blank=True, null=True, verbose_name='emergency appeal planned ')),
                ('event_date', models.DateField(blank=True, help_text='Date of event/Approximate date of impact', null=True, verbose_name='event date')),
                ('event_text', models.TextField(blank=True, null=True, verbose_name='event text')),
                ('ns_respond_date', models.DateField(blank=True, help_text='NS anticipatory actions started/NS response', null=True, verbose_name='ns respond date')),
                ('affect_same_area', models.BooleanField(blank=True, help_text='Has a similar event affected the same areas in the past?', null=True)),
                ('affect_same_population', models.BooleanField(blank=True, help_text='Did it affect the same population?', null=True)),
                ('affect_same_population_text', models.TextField(blank=True, null=True, verbose_name='affect same population text')),
                ('ns_respond', models.BooleanField(blank=True, default=False, help_text='Did NS respond', null=True)),
                ('ns_request_fund', models.BooleanField(blank=True, default=False, help_text='Did the NS request funding from DREF?', null=True)),
                ('ns_request_text', models.TextField(blank=True, null=True, verbose_name='ns request text')),
                ('dref_recurrent_text', models.TextField(blank=True, null=True, verbose_name='dref recurrent text')),
                ('lessons_learned', models.TextField(blank=True, null=True, verbose_name='lessons learned')),
                ('event_description', models.TextField(blank=True, null=True, verbose_name='event description')),
                ('anticipatory_actions', models.TextField(blank=True, help_text='Description of anticipatory actions or imminent disaster', null=True, verbose_name='anaticipatory actions')),
                ('event_scope', models.TextField(blank=True, help_text='Scope and scale of event', null=True, verbose_name='event scope')),
                ('government_requested_assistance', models.BooleanField(blank=True, help_text='Has government requested assistance', null=True)),
                ('government_requested_assistance_date', models.DateField(blank=True, null=True, verbose_name='government requested assistance date')),
                ('national_authorities', models.TextField(blank=True, null=True, verbose_name='national authorities')),
                ('ifrc', models.TextField(blank=True, null=True, verbose_name='ifrc')),
                ('icrc', models.TextField(blank=True, null=True, verbose_name='icrc')),
                ('partner_national_society', models.TextField(blank=True, null=True, verbose_name='partner national society')),
                ('un_or_other_actor', models.TextField(blank=True, null=True, verbose_name='un or other')),
                ('major_coordination_mechanism', models.TextField(blank=True, help_text='List major coordination mechanisms in place', null=True, verbose_name='major coordination mechanism')),
                ('identified_gaps', models.TextField(blank=True, help_text='Any identified gaps/limitations in the assessment', null=True, verbose_name='identified gaps')),
                ('people_assisted', models.TextField(blank=True, null=True, verbose_name='people assisted')),
                ('selection_criteria', models.TextField(blank=True, help_text='Selection criteria for affected people', null=True, verbose_name='selection criteria')),
                ('entity_affected', models.TextField(blank=True, help_text='Protection, gender, Inclusion affected in this process', null=True, verbose_name='entity affected')),
                ('community_involved', models.TextField(blank=True, help_text='Community been involved in the analysis of the process', null=True, verbose_name='community involved')),
                ('women', models.IntegerField(blank=True, null=True, verbose_name='women')),
                ('men', models.IntegerField(blank=True, null=True, verbose_name='men')),
                ('girls', models.IntegerField(blank=True, help_text='Girls under 18', null=True, verbose_name='girls')),
                ('boys', models.IntegerField(blank=True, help_text='Boys under 18', null=True, verbose_name='boys')),
                ('total_targeted_population', models.IntegerField(blank=True, help_text='Estimated number of targeted people', null=True, verbose_name='total targeted population')),
                ('disability_people_per', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated % people disability', max_digits=5, null=True, verbose_name='disability people per')),
                ('people_per_urban', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated % people Urban', max_digits=5, null=True, verbose_name='people per urban')),
                ('people_per_local', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated % people Rural', max_digits=5, null=True, verbose_name='people per local')),
                ('people_targeted_with_early_actions', models.IntegerField(blank=True, help_text='Number of persons targeted with early actions', null=True, verbose_name='people targeted with early actions')),
                ('displaced_people', models.IntegerField(blank=True, help_text='Estimated number of displaced people', null=True, verbose_name='displaced people')),
                ('operation_objective', models.TextField(blank=True, help_text='Overall objective of the operation', null=True, verbose_name='operation objective')),
                ('response_strategy', models.TextField(blank=True, null=True, verbose_name='response strategy')),
                ('go_field_report_date', models.DateField(blank=True, null=True, verbose_name='go field report date')),
                ('ns_request_date', models.DateField(blank=True, null=True, verbose_name='ns request date')),
                ('submission_to_geneva', models.DateField(blank=True, null=True, verbose_name='submission to geneva')),
                ('date_of_approval', models.DateField(blank=True, null=True, verbose_name='date of approval')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='end date')),
                ('publishing_date', models.DateField(blank=True, null=True, verbose_name='publishing date')),
                ('operation_timeframe', models.IntegerField(blank=True, null=True, verbose_name='operation timeframe')),
                ('appeal_code', models.CharField(blank=True, max_length=255, null=True, verbose_name='appeal code')),
                ('glide_code', models.CharField(blank=True, max_length=255, null=True, verbose_name='glide number')),
                ('ifrc_appeal_manager_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='ifrc appeal manager name')),
                ('ifrc_appeal_manager_email', models.CharField(blank=True, max_length=255, null=True, verbose_name='ifrc appeal manager email')),
                ('ifrc_appeal_manager_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='ifrc appeal manager title')),
                ('ifrc_appeal_manager_phone_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='ifrc appeal manager phone number')),
                ('ifrc_project_manager_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='ifrc project manager name')),
                ('ifrc_project_manager_email', models.CharField(blank=True, max_length=255, null=True, verbose_name='ifrc project manager email')),
                ('ifrc_project_manager_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='ifrc project manager title')),
                ('ifrc_project_manager_phone_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='ifrc project manager phone number')),
                ('national_society_contact_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='national society contact name')),
                ('national_society_contact_email', models.CharField(blank=True, max_length=255, null=True, verbose_name='national society contact email')),
                ('national_society_contact_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='national society contact title')),
                ('national_society_contact_phone_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='national society contact phone number')),
                ('media_contact_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='media contact name')),
                ('media_contact_email', models.CharField(blank=True, max_length=255, null=True, verbose_name='media contact email')),
                ('media_contact_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='media contact title')),
                ('media_contact_phone_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='media_contact phone number')),
                ('ifrc_emergency_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='ifrc emergency name')),
                ('ifrc_emergency_email', models.CharField(blank=True, max_length=255, null=True, verbose_name='ifrc emergency email')),
                ('ifrc_emergency_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='ifrc emergency title')),
                ('ifrc_emergency_phone_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='ifrc emergency phone number')),
                ('originator_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='originator name')),
                ('originator_email', models.CharField(blank=True, max_length=255, null=True, verbose_name='originator email')),
                ('originator_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='originator title')),
                ('originator_phone_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='originator phone number')),
                ('human_resource', models.TextField(blank=True, help_text='how many volunteers and staff involved in the response?', null=True, verbose_name='human resource')),
                ('surge_personnel_deployed', models.TextField(blank=True, help_text='Will a Surge personnel be deployed?', null=True, verbose_name='surge personnel deployed')),
                ('logistic_capacity_of_ns', models.TextField(blank=True, help_text='what is the logistics capacity of the National Society?', null=True, verbose_name='logistic capacity of ns')),
                ('safety_concerns', models.TextField(blank=True, help_text='Are there any safety/security concerns which may impact the implementation of this operation?', null=True, verbose_name='safety concerns')),
                ('pmer', models.TextField(blank=True, help_text='Does the NS have PMER capacity?', null=True, verbose_name='pmer')),
                ('communication', models.TextField(blank=True, help_text='Does the NS have Communications capacity?', null=True, verbose_name='organization')),
                ('budget_file_preview', models.FileField(blank=True, null=True, upload_to='dref/images/', verbose_name='budget file preview')),
                ('budget_file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='budget_file_dref', to='dref.DrefFile', verbose_name='budget file')),
                ('cover_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cover_image_dref', to='dref.DrefFile', verbose_name='cover image')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_by_dref', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('disaster_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.DisasterType', verbose_name='disaster type')),
                ('event_map', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='event_map_dref', to='dref.DrefFile', verbose_name='event map')),
                ('field_report', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='field_report_dref', to='api.FieldReport', verbose_name='field report')),
                ('images', models.ManyToManyField(blank=True, related_name='image_dref', to='dref.DrefFile', verbose_name='images')),
                ('modified_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modified_by_dref', to=settings.AUTH_USER_MODEL, verbose_name='modified by')),
                ('national_society', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Country', verbose_name='national_society')),
                ('national_society_actions', models.ManyToManyField(blank=True, to='dref.NationalSocietyAction', verbose_name='national society actions')),
                ('needs_identified', models.ManyToManyField(blank=True, to='dref.IdentifiedNeed', verbose_name='needs identified')),
                ('planned_interventions', models.ManyToManyField(blank=True, to='dref.PlannedIntervention', verbose_name='planned intervention')),
                ('users', models.ManyToManyField(blank=True, related_name='user_dref', to=settings.AUTH_USER_MODEL, verbose_name='users')),
            ],
            options={
                'verbose_name': 'dref',
                'verbose_name_plural': 'drefs',
            },
        ),
        migrations.CreateModel(
            name='DrefCountryDistrict',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.ForeignKey(help_text='Affected County', on_delete=django.db.models.deletion.CASCADE, to='api.Country', verbose_name='country')),
                ('district', models.ManyToManyField(blank=True, to='api.District', verbose_name='district')),
                ('dref', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dref.Dref', verbose_name='dref')),
            ],
            options={
                'unique_together': {('dref', 'country')},
            },
        ),
    ]
