# Generated by Django 4.2.15 on 2024-09-13 15:20

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models

import databank.models


class Migration(migrations.Migration):

    replaces = [
        ("databank", "0001_initial"),
        ("databank", "0002_auto_20200603_0613"),
        ("databank", "0003_auto_20200618_0904"),
        ("databank", "0004_externalsource_keydocument_keydocumentgroup"),
        ("databank", "0005_auto_20200903_0843"),
        ("databank", "0006_acapsseasonalcalender"),
        ("databank", "0007_auto_20231221_0608"),
        ("databank", "0008_countryoverview_branches"),
        ("databank", "0009_auto_20231226_0516"),
        ("databank", "0010_auto_20231227_0445"),
        ("databank", "0011_auto_20231227_0922"),
        ("databank", "0012_auto_20231228_0623"),
        ("databank", "0013_auto_20231228_1038"),
        ("databank", "0014_auto_20231229_0510"),
        ("databank", "0015_auto_20240111_0813"),
        ("databank", "0016_fdrsincome"),
        ("databank", "0017_countryoverview_world_bank_poverty_rate"),
        ("databank", "0018_countryoverview_unicef_population_under_18"),
        ("databank", "0019_countryoverview_hdr_gii"),
        ("databank", "0020_fdrsannualincome"),
        ("databank", "0021_countrykeyclimate"),
        ("databank", "0022_alter_fdrsincome_indicator"),
        ("databank", "0023_auto_20240402_0912"),
        ("databank", "0024_countryoverview_fdrs_data_fetched_year"),
        ("databank", "0025_countryoverview_world_bank_gni_capita"),
        ("databank", "0026_countryoverview_calculated_world_bank_gdp_year_and_more"),
    ]

    initial = True

    dependencies = [
        ("api", "0036_auto_20191215_0615"),
    ]

    operations = [
        migrations.CreateModel(
            name="CountryOverview",
            fields=[
                (
                    "country",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to="api.country"
                    ),
                ),
                ("script_modified_at", models.DateTimeField(blank=True, null=True)),
                ("population", models.IntegerField(blank=True, null=True, verbose_name="population")),
                ("gdp", models.FloatField(blank=True, null=True, verbose_name="GDP")),
                ("gnipc", models.IntegerField(blank=True, null=True, verbose_name="GNI/CAPITA")),
                ("life_expectancy", models.IntegerField(blank=True, null=True, verbose_name="life expectancy")),
                (
                    "urban_population",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)],
                        verbose_name="urban POP (%)",
                    ),
                ),
                (
                    "poverty",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)],
                        verbose_name="poverty (%)",
                    ),
                ),
                (
                    "literacy",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)],
                        verbose_name="literacy (%)",
                    ),
                ),
                ("income", models.FloatField(blank=True, null=True, verbose_name="income (CHF)")),
                ("expenditures", models.FloatField(blank=True, null=True, verbose_name="expenditures (CHF)")),
                ("volunteers", models.IntegerField(blank=True, null=True, verbose_name="volunteers")),
                ("trained_in_first_aid", models.IntegerField(blank=True, null=True, verbose_name="trained in first aid")),
                ("avg_temperature", models.FloatField(blank=True, null=True, verbose_name="average temperature")),
                (
                    "avg_rainfall_precipitation",
                    models.FloatField(blank=True, null=True, verbose_name="average rainfall precipitation"),
                ),
                (
                    "rainy_season",
                    models.CharField(
                        blank=True,
                        choices=[("active", "Active"), ("not_active", "Not Active")],
                        max_length=20,
                        null=True,
                        verbose_name="rainy season",
                    ),
                ),
                ("fts_data", models.JSONField(default=list, verbose_name="FTS data")),
                ("start_network_data", models.JSONField(default=list, verbose_name="start network data")),
                ("past_crises_events", models.JSONField(default=list, verbose_name="past crises data")),
                ("past_epidemics", models.JSONField(default=list, verbose_name="past epidemics data")),
                ("inform_indicators", models.JSONField(default=list, verbose_name="inform indicators data")),
                ("branches", models.IntegerField(blank=True, null=True, verbose_name="Branches")),
                ("female_staff_age_18_29", models.IntegerField(blank=True, null=True, verbose_name="female staff age 18 to 29")),
                ("female_staff_age_18_49", models.IntegerField(blank=True, null=True, verbose_name="female staff age 18 to 49")),
                ("female_staff_age_30_39", models.IntegerField(blank=True, null=True, verbose_name="female staff age 30 to 39")),
                ("female_staff_age_40_49", models.IntegerField(blank=True, null=True, verbose_name="female staff age 40 to 49")),
                ("female_staff_age_50_59", models.IntegerField(blank=True, null=True, verbose_name="female staff age 50 to 59")),
                ("female_staff_age_60_69", models.IntegerField(blank=True, null=True, verbose_name="female staff age 60 to 69")),
                ("female_staff_age_70_79", models.IntegerField(blank=True, null=True, verbose_name="female staff age 70 to 79")),
                ("female_staff_age_80", models.IntegerField(blank=True, null=True, verbose_name="female staff age 80")),
                (
                    "female_volunteer_age_13_17",
                    models.IntegerField(blank=True, null=True, verbose_name="female volunteer age 13 to 17"),
                ),
                (
                    "female_volunteer_age_18_29",
                    models.IntegerField(blank=True, null=True, verbose_name="female volunteer age 18 to 29"),
                ),
                (
                    "female_volunteer_age_18_49",
                    models.IntegerField(blank=True, null=True, verbose_name="female volunteer age 18 to 49"),
                ),
                (
                    "female_volunteer_age_30_39",
                    models.IntegerField(blank=True, null=True, verbose_name="female volunteer age 30 to 39"),
                ),
                (
                    "female_volunteer_age_40_49",
                    models.IntegerField(blank=True, null=True, verbose_name="female volunteer age 40 to 49"),
                ),
                (
                    "female_volunteer_age_50_59",
                    models.IntegerField(blank=True, null=True, verbose_name="female volunteer age 50 to 59"),
                ),
                (
                    "female_volunteer_age_60_69",
                    models.IntegerField(blank=True, null=True, verbose_name="female volunteer age 60 to 69"),
                ),
                (
                    "female_volunteer_age_6_12",
                    models.IntegerField(blank=True, null=True, verbose_name="female volunteer age 6 to 12"),
                ),
                (
                    "female_volunteer_age_70_79",
                    models.IntegerField(blank=True, null=True, verbose_name="female volunteer age 70 to 79"),
                ),
                ("female_volunteer_age_80", models.IntegerField(blank=True, null=True, verbose_name="female volunteer age 80")),
                ("male_staff_age_18_29", models.IntegerField(blank=True, null=True, verbose_name="male staff age 18 to 29")),
                ("male_staff_age_18_49", models.IntegerField(blank=True, null=True, verbose_name="male staff age 18 to 49")),
                ("male_staff_age_30_39", models.IntegerField(blank=True, null=True, verbose_name="male staff age 30 to 39")),
                ("male_staff_age_40_49", models.IntegerField(blank=True, null=True, verbose_name="male staff age 40 to 49")),
                ("male_staff_age_50_59", models.IntegerField(blank=True, null=True, verbose_name="male staff age 50 to 59")),
                ("male_staff_age_60_69", models.IntegerField(blank=True, null=True, verbose_name="male staff age 60 to 69")),
                ("male_staff_age_70_79", models.IntegerField(blank=True, null=True, verbose_name="male staff age 70 to 79")),
                ("male_staff_age_80", models.IntegerField(blank=True, null=True, verbose_name="male staff age 80")),
                (
                    "male_volunteer_age_13_17",
                    models.IntegerField(blank=True, null=True, verbose_name="male volunteer age 13 to 17"),
                ),
                (
                    "male_volunteer_age_18_29",
                    models.IntegerField(blank=True, null=True, verbose_name="male volunteer age 18 to 29"),
                ),
                (
                    "male_volunteer_age_18_49",
                    models.IntegerField(blank=True, null=True, verbose_name="male volunteer age 18 to 49"),
                ),
                (
                    "male_volunteer_age_30_39",
                    models.IntegerField(blank=True, null=True, verbose_name="male volunteer age 30 to 39"),
                ),
                (
                    "male_volunteer_age_40_49",
                    models.IntegerField(blank=True, null=True, verbose_name="male volunteer age 40 to 49"),
                ),
                (
                    "male_volunteer_age_50_59",
                    models.IntegerField(blank=True, null=True, verbose_name="male volunteer age 50 to 59"),
                ),
                (
                    "male_volunteer_age_60_69",
                    models.IntegerField(blank=True, null=True, verbose_name="male volunteer age 60 to 69"),
                ),
                (
                    "male_volunteer_age_6_12",
                    models.IntegerField(blank=True, null=True, verbose_name="male volunteer age 6 to 12"),
                ),
                (
                    "male_volunteer_age_70_79",
                    models.IntegerField(blank=True, null=True, verbose_name="male volunteer age 70 to 79"),
                ),
                ("male_volunteer_age_80", models.IntegerField(blank=True, null=True, verbose_name="male volunteer age 80")),
                ("female_staff_age_other", models.IntegerField(blank=True, null=True, verbose_name="female staff other")),
                ("female_staff_total", models.IntegerField(blank=True, null=True, verbose_name="female staff total")),
                ("female_volunteer_age_other", models.IntegerField(blank=True, null=True, verbose_name="female volunteer other")),
                ("female_volunteer_total", models.IntegerField(blank=True, null=True, verbose_name="female volunteer total")),
                ("male_staff_age_other", models.IntegerField(blank=True, null=True, verbose_name="male staff other")),
                ("male_staff_total", models.IntegerField(blank=True, null=True, verbose_name="male staff total")),
                ("male_volunteer_age_other", models.IntegerField(blank=True, null=True, verbose_name="male volunteer other")),
                ("male_volunteer_total", models.IntegerField(blank=True, null=True, verbose_name="male volunteer total")),
                ("staff_total", models.IntegerField(blank=True, null=True, verbose_name="staff total")),
                ("volunteer_total", models.IntegerField(blank=True, null=True, verbose_name="volunteer total")),
                ("staff_age_18_29", models.IntegerField(blank=True, null=True, verbose_name="staff age 18 to 29")),
                ("volunteer_age_13_17", models.IntegerField(blank=True, null=True, verbose_name="volunteer age 13 to 17")),
                ("volunteer_age_18_29", models.IntegerField(blank=True, null=True, verbose_name="volunteer age 18 to 29")),
                ("volunteer_age_6_12", models.IntegerField(blank=True, null=True, verbose_name="volunteer age 6 to 12")),
                ("world_bank_gdp", models.FloatField(blank=True, null=True, verbose_name="world bank gdp")),
                (
                    "world_bank_gender_equality_index",
                    models.FloatField(blank=True, null=True, verbose_name="world bank gender equality index"),
                ),
                ("world_bank_gni", models.FloatField(blank=True, null=True, verbose_name="world bank gni")),
                (
                    "world_bank_life_expectancy",
                    models.IntegerField(blank=True, null=True, verbose_name="world bank life expectancy"),
                ),
                ("world_bank_literacy_rate", models.FloatField(blank=True, null=True, verbose_name="world bank life expectancy")),
                ("world_bank_population", models.IntegerField(blank=True, null=True, verbose_name="world bank population")),
                (
                    "world_bank_population_above_age_65",
                    models.IntegerField(blank=True, null=True, verbose_name="world bank population above age 65"),
                ),
                (
                    "world_bank_population_age_14",
                    models.IntegerField(blank=True, null=True, verbose_name="world bank population age 14"),
                ),
                (
                    "world_bank_urban_population_percentage",
                    models.FloatField(blank=True, null=True, verbose_name="world bank urban population percentage"),
                ),
                ("world_bank_poverty_rate", models.FloatField(blank=True, null=True, verbose_name="world bank poverty rate")),
                (
                    "unicef_population_under_18",
                    models.IntegerField(blank=True, null=True, verbose_name="Unicef population under 18"),
                ),
                ("hdr_gii", models.FloatField(blank=True, null=True, verbose_name="HDR GII")),
                (
                    "fdrs_data_fetched_year",
                    models.CharField(blank=True, max_length=50, null=True, verbose_name="FDRS Data Fetched Year"),
                ),
                ("world_bank_gni_capita", models.IntegerField(blank=True, null=True, verbose_name="world bank GNI Per Capita")),
                (
                    "calculated_world_bank_gdp_year",
                    models.CharField(blank=True, max_length=50, null=True, verbose_name="calculated world bank gdp year"),
                ),
                (
                    "calculated_world_bank_gender_equality_index_year",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="calculated world bank gender equality index year"
                    ),
                ),
                (
                    "calculated_world_bank_gni_capita_year",
                    models.CharField(blank=True, max_length=50, null=True, verbose_name="calculated world bank gni capita year"),
                ),
                (
                    "calculated_world_bank_gni_year",
                    models.CharField(blank=True, max_length=50, null=True, verbose_name="calculated world bank gni year"),
                ),
                (
                    "calculated_world_bank_life_expectancy_year",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="calculated world bank life expectancy year"
                    ),
                ),
                (
                    "calculated_world_bank_literacy_rate_year",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="calculated world bank literacy rate year"
                    ),
                ),
                (
                    "calculated_world_bank_population_above_age_65_year",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="calculated world bank population above age 65 date in year",
                    ),
                ),
                (
                    "calculated_world_bank_population_age_14_year",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="calculated world bank population age 14 date in year"
                    ),
                ),
                (
                    "calculated_world_bank_population_year",
                    models.CharField(blank=True, max_length=50, null=True, verbose_name="calculated world bank population year"),
                ),
                (
                    "calculated_world_bank_poverty_rate_year",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="calculated world bank poverty rate year"
                    ),
                ),
                (
                    "calculated_world_bank_urban_population_percentage_year",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="calculated world bank urban population percentage year",
                    ),
                ),
            ],
            options={
                "verbose_name": "country overview",
                "verbose_name_plural": "countries overview",
            },
        ),
        migrations.CreateModel(
            name="KeyClimateEvent",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("modified_at", models.DateTimeField(auto_now=True, verbose_name="modified at")),
                (
                    "month",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "January"),
                            (2, "February"),
                            (3, "March"),
                            (4, "April"),
                            (5, "May"),
                            (6, "June"),
                            (7, "July"),
                            (8, "August"),
                            (9, "September"),
                            (10, "October"),
                            (11, "November"),
                            (12, "December"),
                        ],
                        verbose_name="month",
                    ),
                ),
                ("avg_max_temperature", models.FloatField(verbose_name="average maximum temperature")),
                ("avg_min_temperature", models.FloatField(verbose_name="average minimum temperature")),
                ("avg_rainfall_precipitation", models.FloatField(verbose_name="average rainfall precipitation")),
                (
                    "overview",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="databank.countryoverview",
                        verbose_name="country overview",
                    ),
                ),
            ],
            options={
                "unique_together": {("overview", "month")},
                "verbose_name": "Key Client Event",
                "verbose_name_plural": "Key Client Events",
            },
        ),
        migrations.CreateModel(
            name="SeasonalCalender",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("modified_at", models.DateTimeField(auto_now=True, verbose_name="modified at")),
                ("title", models.CharField(max_length=20, verbose_name="title")),
                ("sector", models.CharField(max_length=20, verbose_name="sector")),
                ("date_start", models.DateField(verbose_name="date start")),
                ("date_end", models.DateField(verbose_name="date end")),
                (
                    "overview",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="databank.countryoverview",
                        verbose_name="country overview",
                    ),
                ),
            ],
            options={
                "unique_together": {("overview", "sector", "title")},
                "verbose_name": "Seasonal Calender Record",
                "verbose_name_plural": "Seasonal Calender Records",
            },
        ),
        migrations.CreateModel(
            name="SocialEvent",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("label", models.CharField(max_length=255, verbose_name="label")),
                ("value", models.CharField(max_length=255, verbose_name="value")),
                (
                    "overview",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="databank.countryoverview",
                        verbose_name="country overview",
                    ),
                ),
            ],
            options={
                "unique_together": {("overview", "label")},
                "verbose_name": "Social Event",
                "verbose_name_plural": "Social Events",
            },
        ),
        migrations.CreateModel(
            name="KeyDocumentGroup",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=20, verbose_name="title")),
            ],
        ),
        migrations.CreateModel(
            name="ExternalSource",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=20, verbose_name="title")),
                ("url", models.URLField(max_length=300, verbose_name="url")),
                (
                    "overview",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="databank.countryoverview",
                        verbose_name="country overview",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="KeyDocument",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=20, verbose_name="title")),
                ("date", models.DateField(verbose_name="date")),
                ("file", models.FileField(upload_to=databank.models.key_document_path, verbose_name="file")),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="databank.keydocumentgroup", verbose_name="group"
                    ),
                ),
                (
                    "overview",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="databank.countryoverview",
                        verbose_name="country overview",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AcapsSeasonalCalender",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("modified_at", models.DateTimeField(auto_now=True, verbose_name="modified at")),
                (
                    "month",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=100), default=list, size=None, verbose_name="month"
                    ),
                ),
                (
                    "event",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=100), default=list, size=None, verbose_name="event"
                    ),
                ),
                (
                    "event_type",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=100), default=list, size=None, verbose_name="event type"
                    ),
                ),
                (
                    "label",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=100), default=list, size=None, verbose_name="label"
                    ),
                ),
                ("source", models.CharField(blank=True, max_length=255, null=True, verbose_name="Source")),
                ("source_date", models.DateField(blank=True, null=True, verbose_name="Source Date")),
                (
                    "overview",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="databank.countryoverview",
                        verbose_name="country overview",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FDRSAnnualIncome",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("date", models.DateField(verbose_name="date")),
                ("value", models.FloatField(blank=True, null=True, verbose_name="value")),
                (
                    "overview",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="databank.countryoverview",
                        verbose_name="country overview",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CountryKeyClimate",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("year", models.PositiveIntegerField(verbose_name="year")),
                (
                    "month",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "January"),
                            (2, "February"),
                            (3, "March"),
                            (4, "April"),
                            (5, "May"),
                            (6, "June"),
                            (7, "July"),
                            (8, "August"),
                            (9, "September"),
                            (10, "October"),
                            (11, "November"),
                            (12, "December"),
                        ],
                        verbose_name="month",
                    ),
                ),
                ("min_temp", models.FloatField(verbose_name="min temperature")),
                ("max_temp", models.FloatField(verbose_name="max temperature")),
                ("avg_temp", models.FloatField(verbose_name="average temperature")),
                ("precipitation", models.FloatField(verbose_name="precipitation")),
                (
                    "overview",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="databank.countryoverview",
                        verbose_name="country overview",
                    ),
                ),
            ],
            options={
                "verbose_name": "Country Climate",
                "verbose_name_plural": "Country Climate",
                "unique_together": {("overview", "month", "year")},
            },
        ),
        migrations.CreateModel(
            name="FDRSIndicator",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=255, verbose_name="Indicator Title")),
                ("description", models.TextField(blank=True, null=True, verbose_name="Indicator Descritpion")),
            ],
        ),
        migrations.CreateModel(
            name="FDRSIncome",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("date", models.DateField(verbose_name="date")),
                (
                    "indicator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="databank.fdrsindicator", verbose_name="FDRS Indicator"
                    ),
                ),
                ("value", models.FloatField(blank=True, null=True, verbose_name="value")),
                (
                    "overview",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="databank.countryoverview",
                        verbose_name="country overview",
                    ),
                ),
            ],
        ),
    ]
